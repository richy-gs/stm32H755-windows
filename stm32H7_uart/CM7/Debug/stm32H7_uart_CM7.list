
stm32H7_uart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000505c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080052f4  080052f4  000062f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800532c  0800532c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800532c  0800532c  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005334  08005334  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800533c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  0800534c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  0800534c  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb32  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e74  00000000  00000000  00016b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  000189e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  000194f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e65  00000000  00000000  00019d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0bb  00000000  00000000  00052bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179d09  00000000  00000000  00061c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  001db9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001de6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080052dc 	.word	0x080052dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080052dc 	.word	0x080052dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006fa:	f000 f979 	bl	80009f0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000702:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000704:	bf00      	nop
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <main+0x9c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d004      	beq.n	800071c <main+0x28>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	1e5a      	subs	r2, r3, #1
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dcf4      	bgt.n	8000706 <main+0x12>
  if ( timeout < 0 )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	da01      	bge.n	8000726 <main+0x32>
  {
  Error_Handler();
 8000722:	f000 f991 	bl	8000a48 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fa73 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f833 	bl	8000794 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <main+0x9c>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <main+0x9c>)
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fe23 	bl	8001398 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fe39 	bl	80013cc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000760:	bf00      	nop
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <main+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <main+0x84>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf4      	bgt.n	8000762 <main+0x6e>
if ( timeout < 0 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da01      	bge.n	8000782 <main+0x8e>
{
Error_Handler();
 800077e:	f000 f963 	bl	8000a48 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f8d1 	bl	8000928 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000786:	f000 f883 	bl	8000890 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0x96>
 800078e:	bf00      	nop
 8000790:	58024400 	.word	0x58024400

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	224c      	movs	r2, #76	@ 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fd6e 	bl	8005284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fd68 	bl	8005284 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f000 fe1d 	bl	80013f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <SystemClock_Config+0xf4>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c2:	4a31      	ldr	r2, [pc, #196]	@ (8000888 <SystemClock_Config+0xf4>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <SystemClock_Config+0xf4>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <SystemClock_Config+0xf8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007dc:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <SystemClock_Config+0xf8>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <SystemClock_Config+0xf8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f0:	bf00      	nop
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <SystemClock_Config+0xf8>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fe:	d1f8      	bne.n	80007f2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000804:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000816:	2325      	movs	r3, #37	@ 0x25
 8000818:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000826:	2308      	movs	r3, #8
 8000828:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800082a:	2302      	movs	r3, #2
 800082c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fe35 	bl	80014a8 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000844:	f000 f900 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	233f      	movs	r3, #63	@ 0x3f
 800084a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000854:	2308      	movs	r3, #8
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000864:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fa74 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800087a:	f000 f8e5 	bl	8000a48 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3770      	adds	r7, #112	@ 0x70
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58000400 	.word	0x58000400
 800088c:	58024800 	.word	0x58024800

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 800089c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008da:	f003 fbf7 	bl	80040cc <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f8b0 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008ec:	f004 fbff 	bl	80050ee <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 f8a7 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008fe:	f004 fc34 	bl	800516a <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f89e 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 800090e:	f004 fbb5 	bl	800507c <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f896 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2400002c 	.word	0x2400002c
 8000924:	40004800 	.word	0x40004800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094e:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	4a20      	ldr	r2, [pc, #128]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_GPIO_Init+0xbc>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800099e:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <MX_GPIO_Init+0xc0>)
 80009a0:	f000 fce0 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_GPIO_Init+0xc4>)
 80009ba:	f000 fb23 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009be:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_GPIO_Init+0xc0>)
 80009d8:	f000 fb14 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58020400 	.word	0x58020400
 80009ec:	58020800 	.word	0x58020800

080009f0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a02:	f000 fa87 	bl	8000f14 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a12:	231f      	movs	r3, #31
 8000a14:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a16:	2387      	movs	r3, #135	@ 0x87
 8000a18:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 faa5 	bl	8000f84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a3a:	2004      	movs	r0, #4
 8000a3c:	f000 fa82 	bl	8000f44 <HAL_MPU_Enable>

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a60:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	58024400 	.word	0x58024400

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	22c0      	movs	r2, #192	@ 0xc0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 fbeb 	bl	8005284 <memset>
  if(huart->Instance==USART3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a27      	ldr	r2, [pc, #156]	@ (8000b50 <HAL_UART_MspInit+0xc8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d146      	bne.n	8000b46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab8:	f04f 0202 	mov.w	r2, #2
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fcd0 	bl	8002474 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ada:	f7ff ffb5 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000ae6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0xcc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b34:	2307      	movs	r3, #7
 8000b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0xd0>)
 8000b42:	f000 fa5f 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	37e8      	adds	r7, #232	@ 0xe8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004800 	.word	0x40004800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020c00 	.word	0x58020c00

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f89f 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc0:	f7ff fd02 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f004 fb53 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd81 	bl	80006f4 <main>
  bx  lr
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bf8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bfc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c00:	0800533c 	.word	0x0800533c
  ldr r2, =_sbss
 8000c04:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c08:	240000c4 	.word	0x240000c4

08000c0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC3_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f94a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c1c:	f001 fa54 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	4913      	ldr	r1, [pc, #76]	@ (8000c7c <HAL_Init+0x6c>)
 8000c2e:	5ccb      	ldrb	r3, [r1, r3]
 8000c30:	f003 031f 	and.w	r3, r3, #31
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_Init+0x68>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_Init+0x6c>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	f003 031f 	and.w	r3, r3, #31
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <HAL_Init+0x70>)
 8000c52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_Init+0x74>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f814 	bl	8000c88 <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e002      	b.n	8000c70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6a:	f7ff fef3 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	080052f4 	.word	0x080052f4
 8000c80:	24000004 	.word	0x24000004
 8000c84:	24000000 	.word	0x24000000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_InitTick+0x60>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e021      	b.n	8000ce0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <HAL_InitTick+0x64>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_InitTick+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f921 	bl	8000efa <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f8f9 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_InitTick+0x68>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2400000c 	.word	0x2400000c
 8000cec:	24000000 	.word	0x24000000
 8000cf0:	24000008 	.word	0x24000008

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2400000c 	.word	0x2400000c
 8000d18:	240000c0 	.word	0x240000c0

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	240000c0 	.word	0x240000c0

08000d34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetREVID+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0c1b      	lsrs	r3, r3, #16
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	5c001000 	.word	0x5c001000

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	05fa0000 	.word	0x05fa0000

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb2 	bl	8000e6c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f18:	f3bf 8f5f 	dmb	sy
}
 8000f1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_MPU_Disable+0x28>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HAL_MPU_Disable+0x28>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f28:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_MPU_Disable+0x2c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	e000ed90 	.word	0xe000ed90

08000f44 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_MPU_Enable+0x38>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f60:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
}
 8000f66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f68:	f3bf 8f6f 	isb	sy
}
 8000f6c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed90 	.word	0xe000ed90
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_MPU_ConfigRegion+0x7c>)
 8000f92:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_MPU_ConfigRegion+0x7c>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_MPU_ConfigRegion+0x7c>)
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fa0:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_MPU_ConfigRegion+0x7c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7b1b      	ldrb	r3, [r3, #12]
 8000fac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7adb      	ldrb	r3, [r3, #11]
 8000fb2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b5b      	ldrb	r3, [r3, #13]
 8000fc2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b9b      	ldrb	r3, [r3, #14]
 8000fca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7bdb      	ldrb	r3, [r3, #15]
 8000fd2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a5b      	ldrb	r3, [r3, #9]
 8000fda:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7a1b      	ldrb	r3, [r3, #8]
 8000fe2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fe4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff0:	6113      	str	r3, [r2, #16]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed90 	.word	0xe000ed90

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001012:	4b89      	ldr	r3, [pc, #548]	@ (8001238 <HAL_GPIO_Init+0x234>)
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001016:	e194      	b.n	8001342 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8186 	beq.w	800133c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x44>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	69b9      	ldr	r1, [r7, #24]
 8001136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0203 	and.w	r2, r3, #3
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80e0 	beq.w	800133c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x238>)
 800117e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001182:	4a2e      	ldr	r2, [pc, #184]	@ (800123c <HAL_GPIO_Init+0x238>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800118c:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_GPIO_Init+0x238>)
 800118e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a29      	ldr	r2, [pc, #164]	@ (8001240 <HAL_GPIO_Init+0x23c>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <HAL_GPIO_Init+0x240>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d052      	beq.n	800126c <HAL_GPIO_Init+0x268>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <HAL_GPIO_Init+0x244>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d031      	beq.n	8001232 <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1e      	ldr	r2, [pc, #120]	@ (800124c <HAL_GPIO_Init+0x248>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d02b      	beq.n	800122e <HAL_GPIO_Init+0x22a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x24c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_GPIO_Init+0x250>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_GPIO_Init+0x254>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <HAL_GPIO_Init+0x258>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_GPIO_Init+0x25c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <HAL_GPIO_Init+0x260>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_GPIO_Init+0x264>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x20e>
 800120e:	2309      	movs	r3, #9
 8001210:	e02d      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001212:	230a      	movs	r3, #10
 8001214:	e02b      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001216:	2308      	movs	r3, #8
 8001218:	e029      	b.n	800126e <HAL_GPIO_Init+0x26a>
 800121a:	2307      	movs	r3, #7
 800121c:	e027      	b.n	800126e <HAL_GPIO_Init+0x26a>
 800121e:	2306      	movs	r3, #6
 8001220:	e025      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001222:	2305      	movs	r3, #5
 8001224:	e023      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001226:	2304      	movs	r3, #4
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x26a>
 800122a:	2303      	movs	r3, #3
 800122c:	e01f      	b.n	800126e <HAL_GPIO_Init+0x26a>
 800122e:	2302      	movs	r3, #2
 8001230:	e01d      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001232:	2301      	movs	r3, #1
 8001234:	e01b      	b.n	800126e <HAL_GPIO_Init+0x26a>
 8001236:	bf00      	nop
 8001238:	58000080 	.word	0x58000080
 800123c:	58024400 	.word	0x58024400
 8001240:	58000400 	.word	0x58000400
 8001244:	58020000 	.word	0x58020000
 8001248:	58020400 	.word	0x58020400
 800124c:	58020800 	.word	0x58020800
 8001250:	58020c00 	.word	0x58020c00
 8001254:	58021000 	.word	0x58021000
 8001258:	58021400 	.word	0x58021400
 800125c:	58021800 	.word	0x58021800
 8001260:	58021c00 	.word	0x58021c00
 8001264:	58022000 	.word	0x58022000
 8001268:	58022400 	.word	0x58022400
 800126c:	2300      	movs	r3, #0
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127e:	4938      	ldr	r1, [pc, #224]	@ (8001360 <HAL_GPIO_Init+0x35c>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	f47f ae63 	bne.w	8001018 <HAL_GPIO_Init+0x14>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	@ 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58000400 	.word	0x58000400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <HAL_HSEM_FastTake+0x2c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3320      	adds	r3, #32
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_HSEM_FastTake+0x30>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	58026400 	.word	0x58026400
 80013c8:	80000300 	.word	0x80000300

080013cc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013d6:	4906      	ldr	r1, [pc, #24]	@ (80013f0 <HAL_HSEM_Release+0x24>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	58026400 	.word	0x58026400

080013f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013fc:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	2b06      	cmp	r3, #6
 8001406:	d00a      	beq.n	800141e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e040      	b.n	800149c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e03e      	b.n	800149c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001426:	491f      	ldr	r1, [pc, #124]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4313      	orrs	r3, r2
 800142c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800142e:	f7ff fc75 	bl	8000d1c <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001434:	e009      	b.n	800144a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001436:	f7ff fc71 	bl	8000d1c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001444:	d901      	bls.n	800144a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e028      	b.n	800149c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d1ee      	bne.n	8001436 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b1e      	cmp	r3, #30
 800145c:	d008      	beq.n	8001470 <HAL_PWREx_ConfigSupply+0x7c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b2e      	cmp	r3, #46	@ 0x2e
 8001462:	d005      	beq.n	8001470 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b1d      	cmp	r3, #29
 8001468:	d002      	beq.n	8001470 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b2d      	cmp	r3, #45	@ 0x2d
 800146e:	d114      	bne.n	800149a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001470:	f7ff fc54 	bl	8000d1c <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001476:	e009      	b.n	800148c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001478:	f7ff fc50 	bl	8000d1c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001486:	d901      	bls.n	800148c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e007      	b.n	800149c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001498:	d1ee      	bne.n	8001478 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58024800 	.word	0x58024800

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f000 bc48 	b.w	8001d4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8088 	beq.w	80015da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ca:	4b99      	ldr	r3, [pc, #612]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d4:	4b96      	ldr	r3, [pc, #600]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d007      	beq.n	80014f0 <HAL_RCC_OscConfig+0x48>
 80014e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e2:	2b18      	cmp	r3, #24
 80014e4:	d111      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
 80014e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d06d      	beq.n	80015d8 <HAL_RCC_OscConfig+0x130>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d169      	bne.n	80015d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	f000 bc21 	b.w	8001d4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x7a>
 8001514:	4b86      	ldr	r3, [pc, #536]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a85      	ldr	r2, [pc, #532]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x9c>
 800152a:	4b81      	ldr	r3, [pc, #516]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a80      	ldr	r2, [pc, #512]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b7e      	ldr	r3, [pc, #504]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7d      	ldr	r2, [pc, #500]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xc0>
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a77      	ldr	r2, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a74      	ldr	r2, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001568:	4b71      	ldr	r3, [pc, #452]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a70      	ldr	r2, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b6e      	ldr	r3, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6d      	ldr	r2, [pc, #436]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbc8 	bl	8000d1c <HAL_GetTick>
 800158c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fbc4 	bl	8000d1c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e3d4      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a2:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbb4 	bl	8000d1c <HAL_GetTick>
 80015b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbb0 	bl	8000d1c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e3c0      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x110>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80ca 	beq.w	800177c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e8:	4b51      	ldr	r3, [pc, #324]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0x166>
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	2b18      	cmp	r3, #24
 8001602:	d156      	bne.n	80016b2 <HAL_RCC_OscConfig+0x20a>
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d151      	bne.n	80016b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160e:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x17e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e392      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001626:	4b42      	ldr	r3, [pc, #264]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0219 	bic.w	r2, r3, #25
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	493f      	ldr	r1, [pc, #252]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fb70 	bl	8000d1c <HAL_GetTick>
 800163c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fb6c 	bl	8000d1c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e37c      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	f7ff fb69 	bl	8000d34 <HAL_GetREVID>
 8001662:	4603      	mov	r3, r0
 8001664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001668:	4293      	cmp	r3, r2
 800166a:	d817      	bhi.n	800169c <HAL_RCC_OscConfig+0x1f4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b40      	cmp	r3, #64	@ 0x40
 8001672:	d108      	bne.n	8001686 <HAL_RCC_OscConfig+0x1de>
 8001674:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800167c:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800167e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001682:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e07a      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	031b      	lsls	r3, r3, #12
 8001694:	4926      	ldr	r1, [pc, #152]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169a:	e06f      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	4921      	ldr	r1, [pc, #132]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	e064      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d047      	beq.n	800174a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0219 	bic.w	r2, r3, #25
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	491a      	ldr	r1, [pc, #104]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb26 	bl	8000d1c <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb22 	bl	8000d1c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e332      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	f7ff fb1f 	bl	8000d34 <HAL_GetREVID>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d819      	bhi.n	8001734 <HAL_RCC_OscConfig+0x28c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b40      	cmp	r3, #64	@ 0x40
 8001706:	d108      	bne.n	800171a <HAL_RCC_OscConfig+0x272>
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 8001712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001716:	6053      	str	r3, [r2, #4]
 8001718:	e030      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	031b      	lsls	r3, r3, #12
 8001728:	4901      	ldr	r1, [pc, #4]	@ (8001730 <HAL_RCC_OscConfig+0x288>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
 800172e:	e025      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
 8001730:	58024400 	.word	0x58024400
 8001734:	4b9a      	ldr	r3, [pc, #616]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	061b      	lsls	r3, r3, #24
 8001742:	4997      	ldr	r1, [pc, #604]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b95      	ldr	r3, [pc, #596]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a94      	ldr	r2, [pc, #592]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fae1 	bl	8000d1c <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fadd 	bl	8000d1c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e2ed      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001770:	4b8b      	ldr	r3, [pc, #556]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a9 	beq.w	80018dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178a:	4b85      	ldr	r3, [pc, #532]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001792:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001794:	4b82      	ldr	r3, [pc, #520]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d007      	beq.n	80017b0 <HAL_RCC_OscConfig+0x308>
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b18      	cmp	r3, #24
 80017a4:	d13a      	bne.n	800181c <HAL_RCC_OscConfig+0x374>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d135      	bne.n	800181c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b0:	4b7b      	ldr	r3, [pc, #492]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_OscConfig+0x320>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b80      	cmp	r3, #128	@ 0x80
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e2c1      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c8:	f7ff fab4 	bl	8000d34 <HAL_GetREVID>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d817      	bhi.n	8001806 <HAL_RCC_OscConfig+0x35e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b20      	cmp	r3, #32
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_OscConfig+0x348>
 80017de:	4b70      	ldr	r3, [pc, #448]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017e6:	4a6e      	ldr	r2, [pc, #440]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ee:	e075      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f0:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	069b      	lsls	r3, r3, #26
 80017fe:	4968      	ldr	r1, [pc, #416]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001804:	e06a      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001806:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	061b      	lsls	r3, r3, #24
 8001814:	4962      	ldr	r1, [pc, #392]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001816:	4313      	orrs	r3, r2
 8001818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800181a:	e05f      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d042      	beq.n	80018aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001824:	4b5e      	ldr	r3, [pc, #376]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a5d      	ldr	r2, [pc, #372]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800182e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fa74 	bl	8000d1c <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001838:	f7ff fa70 	bl	8000d1c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e280      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800184a:	4b55      	ldr	r3, [pc, #340]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001856:	f7ff fa6d 	bl	8000d34 <HAL_GetREVID>
 800185a:	4603      	mov	r3, r0
 800185c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001860:	4293      	cmp	r3, r2
 8001862:	d817      	bhi.n	8001894 <HAL_RCC_OscConfig+0x3ec>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	2b20      	cmp	r3, #32
 800186a:	d108      	bne.n	800187e <HAL_RCC_OscConfig+0x3d6>
 800186c:	4b4c      	ldr	r3, [pc, #304]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001874:	4a4a      	ldr	r2, [pc, #296]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001876:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800187a:	6053      	str	r3, [r2, #4]
 800187c:	e02e      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
 800187e:	4b48      	ldr	r3, [pc, #288]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	069b      	lsls	r3, r3, #26
 800188c:	4944      	ldr	r1, [pc, #272]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
 8001892:	e023      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
 8001894:	4b42      	ldr	r3, [pc, #264]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	493f      	ldr	r1, [pc, #252]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
 80018a8:	e018      	b.n	80018dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3c      	ldr	r2, [pc, #240]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa31 	bl	8000d1c <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018be:	f7ff fa2d 	bl	8000d1c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e23d      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018d0:	4b33      	ldr	r3, [pc, #204]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d036      	beq.n	8001956 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d019      	beq.n	8001924 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f0:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f4:	4a2a      	ldr	r2, [pc, #168]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fa0e 	bl	8000d1c <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fa0a 	bl	8000d1c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e21a      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x45c>
 8001922:	e018      	b.n	8001956 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001928:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f9f4 	bl	8000d1c <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f9f0 	bl	8000d1c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e200      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d039      	beq.n	80019d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001976:	f7ff f9d1 	bl	8000d1c <HAL_GetTick>
 800197a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197e:	f7ff f9cd 	bl	8000d1c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1dd      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x4d6>
 800199c:	e01b      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
 800199e:	bf00      	nop
 80019a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a9a      	ldr	r2, [pc, #616]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b0:	f7ff f9b4 	bl	8000d1c <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b8:	f7ff f9b0 	bl	8000d1c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1c0      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ca:	4b92      	ldr	r3, [pc, #584]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8081 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c18 <HAL_RCC_OscConfig+0x770>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001c18 <HAL_RCC_OscConfig+0x770>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f994 	bl	8000d1c <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff f990 	bl	8000d1c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1a0      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a0a:	4b83      	ldr	r3, [pc, #524]	@ (8001c18 <HAL_RCC_OscConfig+0x770>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x584>
 8001a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a7c      	ldr	r2, [pc, #496]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	e02d      	b.n	8001a88 <HAL_RCC_OscConfig+0x5e0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5a6>
 8001a34:	4b77      	ldr	r3, [pc, #476]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a76      	ldr	r2, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a40:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a44:	4a73      	ldr	r2, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x5e0>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x5c8>
 8001a56:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a62:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	4a6b      	ldr	r2, [pc, #428]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x5e0>
 8001a70:	4b68      	ldr	r3, [pc, #416]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a67      	ldr	r2, [pc, #412]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7c:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a80:	4a64      	ldr	r2, [pc, #400]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f944 	bl	8000d1c <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f940 	bl	8000d1c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e14e      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aae:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0ee      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5f0>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f92e 	bl	8000d1c <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f92a 	bl	8000d1c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e138      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ada:	4b4e      	ldr	r3, [pc, #312]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ee      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 812d 	beq.w	8001d4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001af0:	4b48      	ldr	r3, [pc, #288]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001af8:	2b18      	cmp	r3, #24
 8001afa:	f000 80bd 	beq.w	8001c78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	f040 809e 	bne.w	8001c44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b42      	ldr	r3, [pc, #264]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a41      	ldr	r2, [pc, #260]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f902 	bl	8000d1c <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f8fe 	bl	8000d1c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e10e      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2e:	4b39      	ldr	r3, [pc, #228]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x774>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	4931      	ldr	r1, [pc, #196]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b62:	3b01      	subs	r3, #1
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	061b      	lsls	r3, r3, #24
 8001b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b84:	4923      	ldr	r1, [pc, #140]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b8a:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b96:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <HAL_RCC_OscConfig+0x778>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ba2:	00d2      	lsls	r2, r2, #3
 8001ba4:	491b      	ldr	r1, [pc, #108]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	f023 020c 	bic.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4917      	ldr	r1, [pc, #92]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f023 0202 	bic.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	4912      	ldr	r1, [pc, #72]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	4a10      	ldr	r2, [pc, #64]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f887 	bl	8000d1c <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c10:	e011      	b.n	8001c36 <HAL_RCC_OscConfig+0x78e>
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58024800 	.word	0x58024800
 8001c1c:	fffffc0c 	.word	0xfffffc0c
 8001c20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f87a 	bl	8000d1c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e08a      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c36:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x77c>
 8001c42:	e082      	b.n	8001d4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f864 	bl	8000d1c <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f860 	bl	8000d1c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e070      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x7b0>
 8001c76:	e068      	b.n	8001d4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d031      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f003 0203 	and.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d12a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d122      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0a5b      	lsrs	r3, r3, #9
 8001cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d111      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d108      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	0e1b      	lsrs	r3, r3, #24
 8001ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e02b      	b.n	8001d4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d01f      	beq.n	8001d4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d16:	f7ff f801 	bl	8000d1c <HAL_GetTick>
 8001d1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d1c:	bf00      	nop
 8001d1e:	f7fe fffd 	bl	8000d1c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d0f9      	beq.n	8001d1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x8b0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d36:	00d2      	lsls	r2, r2, #3
 8001d38:	4906      	ldr	r1, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3730      	adds	r7, #48	@ 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58024400 	.word	0x58024400
 8001d58:	ffff0007 	.word	0xffff0007

08001d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e19c      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b8a      	ldr	r3, [pc, #552]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b87      	ldr	r3, [pc, #540]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	4985      	ldr	r1, [pc, #532]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e184      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d908      	bls.n	8001dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dbc:	4b78      	ldr	r3, [pc, #480]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4975      	ldr	r1, [pc, #468]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	4b70      	ldr	r3, [pc, #448]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d908      	bls.n	8001dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dea:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	496a      	ldr	r1, [pc, #424]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d010      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	4b64      	ldr	r3, [pc, #400]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d908      	bls.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e18:	4b61      	ldr	r3, [pc, #388]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	495e      	ldr	r1, [pc, #376]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d010      	beq.n	8001e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e46:	4b56      	ldr	r3, [pc, #344]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4953      	ldr	r1, [pc, #332]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d908      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e74:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f023 020f 	bic.w	r2, r3, #15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4947      	ldr	r1, [pc, #284]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d055      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4940      	ldr	r1, [pc, #256]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eac:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d121      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0f6      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d115      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0ea      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001edc:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0de      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eec:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d6      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f023 0207 	bic.w	r2, r3, #7
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4925      	ldr	r1, [pc, #148]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0e:	f7fe ff05 	bl	8000d1c <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe ff01 	bl	8000d1c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0be      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d1eb      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d208      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f023 020f 	bic.w	r2, r3, #15
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	490e      	ldr	r1, [pc, #56]	@ (8001fa0 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d214      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 020f 	bic.w	r2, r3, #15
 8001f82:	4906      	ldr	r1, [pc, #24]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <HAL_RCC_ClockConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e086      	b.n	80020aa <HAL_RCC_ClockConfig+0x34e>
 8001f9c:	52002000 	.word	0x52002000
 8001fa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d208      	bcs.n	8001fd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4939      	ldr	r1, [pc, #228]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d010      	beq.n	8002000 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d208      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	492e      	ldr	r1, [pc, #184]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002018:	429a      	cmp	r2, r3
 800201a:	d208      	bcs.n	800202e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4922      	ldr	r1, [pc, #136]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 800202a:	4313      	orrs	r3, r2
 800202c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002046:	429a      	cmp	r2, r3
 8002048:	d208      	bcs.n	800205c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4917      	ldr	r1, [pc, #92]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8002058:	4313      	orrs	r3, r2
 800205a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800205c:	f000 f834 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	4912      	ldr	r1, [pc, #72]	@ (80020b8 <HAL_RCC_ClockConfig+0x35c>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_RCC_ClockConfig+0x358>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <HAL_RCC_ClockConfig+0x35c>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_RCC_ClockConfig+0x360>)
 8002092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x364>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x368>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fdf2 	bl	8000c88 <HAL_InitTick>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	58024400 	.word	0x58024400
 80020b8:	080052f4 	.word	0x080052f4
 80020bc:	24000004 	.word	0x24000004
 80020c0:	24000000 	.word	0x24000000
 80020c4:	24000008 	.word	0x24000008

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ce:	4bb3      	ldr	r3, [pc, #716]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020d6:	2b18      	cmp	r3, #24
 80020d8:	f200 8155 	bhi.w	8002386 <HAL_RCC_GetSysClockFreq+0x2be>
 80020dc:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002149 	.word	0x08002149
 80020e8:	08002387 	.word	0x08002387
 80020ec:	08002387 	.word	0x08002387
 80020f0:	08002387 	.word	0x08002387
 80020f4:	08002387 	.word	0x08002387
 80020f8:	08002387 	.word	0x08002387
 80020fc:	08002387 	.word	0x08002387
 8002100:	08002387 	.word	0x08002387
 8002104:	0800216f 	.word	0x0800216f
 8002108:	08002387 	.word	0x08002387
 800210c:	08002387 	.word	0x08002387
 8002110:	08002387 	.word	0x08002387
 8002114:	08002387 	.word	0x08002387
 8002118:	08002387 	.word	0x08002387
 800211c:	08002387 	.word	0x08002387
 8002120:	08002387 	.word	0x08002387
 8002124:	08002175 	.word	0x08002175
 8002128:	08002387 	.word	0x08002387
 800212c:	08002387 	.word	0x08002387
 8002130:	08002387 	.word	0x08002387
 8002134:	08002387 	.word	0x08002387
 8002138:	08002387 	.word	0x08002387
 800213c:	08002387 	.word	0x08002387
 8002140:	08002387 	.word	0x08002387
 8002144:	0800217b 	.word	0x0800217b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002148:	4b94      	ldr	r3, [pc, #592]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002154:	4b91      	ldr	r3, [pc, #580]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	4a90      	ldr	r2, [pc, #576]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002166:	e111      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002168:	4b8d      	ldr	r3, [pc, #564]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800216a:	61bb      	str	r3, [r7, #24]
      break;
 800216c:	e10e      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800216e:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002170:	61bb      	str	r3, [r7, #24]
      break;
 8002172:	e10b      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002174:	4b8c      	ldr	r3, [pc, #560]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002176:	61bb      	str	r3, [r7, #24]
      break;
 8002178:	e108      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800217a:	4b88      	ldr	r3, [pc, #544]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002184:	4b85      	ldr	r3, [pc, #532]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800218e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002190:	4b82      	ldr	r3, [pc, #520]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800219a:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80e1 	beq.w	8002380 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f000 8083 	beq.w	80022cc <HAL_RCC_GetSysClockFreq+0x204>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	f200 80a1 	bhi.w	8002310 <HAL_RCC_GetSysClockFreq+0x248>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x114>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d056      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021da:	e099      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021dc:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02d      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021e8:	4b6c      	ldr	r3, [pc, #432]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	4a6b      	ldr	r2, [pc, #428]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002212:	4b62      	ldr	r3, [pc, #392]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002222:	ed97 6a02 	vldr	s12, [r7, #8]
 8002226:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80023ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800222a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002242:	e087      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002256:	4b51      	ldr	r3, [pc, #324]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002266:	ed97 6a02 	vldr	s12, [r7, #8]
 800226a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80023ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800226e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002286:	e065      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80023b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229a:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80023ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ca:	e043      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80023ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80022f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800230e:	e021      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800231e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002332:	ed97 6a02 	vldr	s12, [r7, #8]
 8002336:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80023ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800233a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800233e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002352:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	0a5b      	lsrs	r3, r3, #9
 800235a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800235e:	3301      	adds	r3, #1
 8002360:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800236c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002378:	ee17 3a90 	vmov	r3, s15
 800237c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800237e:	e005      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
      break;
 8002384:	e002      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002388:	61bb      	str	r3, [r7, #24]
      break;
 800238a:	bf00      	nop
  }

  return sysclockfreq;
 800238c:	69bb      	ldr	r3, [r7, #24]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	58024400 	.word	0x58024400
 80023a0:	03d09000 	.word	0x03d09000
 80023a4:	003d0900 	.word	0x003d0900
 80023a8:	007a1200 	.word	0x007a1200
 80023ac:	46000000 	.word	0x46000000
 80023b0:	4c742400 	.word	0x4c742400
 80023b4:	4a742400 	.word	0x4a742400
 80023b8:	4af42400 	.word	0x4af42400

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023c2:	f7ff fe81 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_RCC_GetHCLKFreq+0x50>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490f      	ldr	r1, [pc, #60]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x54>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_RCC_GetHCLKFreq+0x50>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	4a09      	ldr	r2, [pc, #36]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x54>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x58>)
 80023f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x58>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58024400 	.word	0x58024400
 8002410:	080052f4 	.word	0x080052f4
 8002414:	24000004 	.word	0x24000004
 8002418:	24000000 	.word	0x24000000

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002420:	f7ff ffcc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4904      	ldr	r1, [pc, #16]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	080052f4 	.word	0x080052f4

08002448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800244c:	f7ff ffb6 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4904      	ldr	r1, [pc, #16]	@ (8002470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	080052f4 	.word	0x080052f4

08002474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b0ca      	sub	sp, #296	@ 0x128
 800247a:	af00      	add	r7, sp, #0
 800247c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800248c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002498:	2500      	movs	r5, #0
 800249a:	ea54 0305 	orrs.w	r3, r4, r5
 800249e:	d049      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024aa:	d02f      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024b0:	d828      	bhi.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024b6:	d01a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024bc:	d822      	bhi.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024c6:	d007      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024c8:	e01c      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ca:	4bb8      	ldr	r3, [pc, #736]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	4ab7      	ldr	r2, [pc, #732]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024d6:	e01a      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024dc:	3308      	adds	r3, #8
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 fc8f 	bl	8003e04 <RCCEx_PLL2_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024ec:	e00f      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024f2:	3328      	adds	r3, #40	@ 0x28
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fd36 	bl	8003f68 <RCCEx_PLL3_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002502:	e004      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800250a:	e000      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800250c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800250e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002516:	4ba5      	ldr	r3, [pc, #660]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800251e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002524:	4aa1      	ldr	r2, [pc, #644]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002526:	430b      	orrs	r3, r1
 8002528:	6513      	str	r3, [r2, #80]	@ 0x50
 800252a:	e003      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002540:	f04f 0900 	mov.w	r9, #0
 8002544:	ea58 0309 	orrs.w	r3, r8, r9
 8002548:	d047      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800254a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	2b04      	cmp	r3, #4
 8002552:	d82a      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002554:	a201      	add	r2, pc, #4	@ (adr r2, 800255c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	08002571 	.word	0x08002571
 8002560:	0800257f 	.word	0x0800257f
 8002564:	08002595 	.word	0x08002595
 8002568:	080025b3 	.word	0x080025b3
 800256c:	080025b3 	.word	0x080025b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002570:	4b8e      	ldr	r3, [pc, #568]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	4a8d      	ldr	r2, [pc, #564]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800257c:	e01a      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800257e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002582:	3308      	adds	r3, #8
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fc3c 	bl	8003e04 <RCCEx_PLL2_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002592:	e00f      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002598:	3328      	adds	r3, #40	@ 0x28
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fce3 	bl	8003f68 <RCCEx_PLL3_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025a8:	e004      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025b0:	e000      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c0:	f023 0107 	bic.w	r1, r3, #7
 80025c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a78      	ldr	r2, [pc, #480]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80025d0:	e003      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80025ee:	d04c      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80025f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fa:	d030      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002600:	d829      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002602:	2bc0      	cmp	r3, #192	@ 0xc0
 8002604:	d02d      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002606:	2bc0      	cmp	r3, #192	@ 0xc0
 8002608:	d825      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800260a:	2b80      	cmp	r3, #128	@ 0x80
 800260c:	d018      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800260e:	2b80      	cmp	r3, #128	@ 0x80
 8002610:	d821      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002616:	2b40      	cmp	r3, #64	@ 0x40
 8002618:	d007      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800261a:	e01c      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800261c:	4b63      	ldr	r3, [pc, #396]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	4a62      	ldr	r2, [pc, #392]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002628:	e01c      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800262a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800262e:	3308      	adds	r3, #8
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fbe6 	bl	8003e04 <RCCEx_PLL2_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800263e:	e011      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002644:	3328      	adds	r3, #40	@ 0x28
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f001 fc8d 	bl	8003f68 <RCCEx_PLL3_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002654:	e006      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800265c:	e002      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800266c:	4b4f      	ldr	r3, [pc, #316]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800266e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002670:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	4a4c      	ldr	r2, [pc, #304]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267c:	430b      	orrs	r3, r1
 800267e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002680:	e003      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800268a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002696:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80026a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80026a4:	460b      	mov	r3, r1
 80026a6:	4313      	orrs	r3, r2
 80026a8:	d053      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026b6:	d035      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80026b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026bc:	d82e      	bhi.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026c2:	d031      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80026c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026c8:	d828      	bhi.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ce:	d01a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80026d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d4:	d822      	bhi.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80026da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026de:	d007      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80026e0:	e01c      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ee:	e01c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	3308      	adds	r3, #8
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 fb83 	bl	8003e04 <RCCEx_PLL2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002704:	e011      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	3328      	adds	r3, #40	@ 0x28
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fc2a 	bl	8003f68 <RCCEx_PLL3_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800271a:	e006      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002722:	e002      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800273a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800273e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002742:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002744:	430b      	orrs	r3, r1
 8002746:	6593      	str	r3, [r2, #88]	@ 0x58
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800274e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800275e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002768:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800276c:	460b      	mov	r3, r1
 800276e:	4313      	orrs	r3, r2
 8002770:	d056      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800277a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800277e:	d038      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002784:	d831      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002786:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800278a:	d034      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800278c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002790:	d82b      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002796:	d01d      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800279c:	d825      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80027a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027a8:	e01f      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b0:	4ba2      	ldr	r3, [pc, #648]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	4aa1      	ldr	r2, [pc, #644]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027bc:	e01c      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c2:	3308      	adds	r3, #8
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fb1c 	bl	8003e04 <RCCEx_PLL2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d8:	3328      	adds	r3, #40	@ 0x28
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fbc3 	bl	8003f68 <RCCEx_PLL3_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002800:	4b8e      	ldr	r3, [pc, #568]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800280c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002810:	4a8a      	ldr	r2, [pc, #552]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002812:	430b      	orrs	r3, r1
 8002814:	6593      	str	r3, [r2, #88]	@ 0x58
 8002816:	e003      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800281c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800282c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002836:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800283a:	460b      	mov	r3, r1
 800283c:	4313      	orrs	r3, r2
 800283e:	d03a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	2b30      	cmp	r3, #48	@ 0x30
 8002848:	d01f      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800284a:	2b30      	cmp	r3, #48	@ 0x30
 800284c:	d819      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d00c      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d815      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800285a:	2b10      	cmp	r3, #16
 800285c:	d111      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285e:	4b77      	ldr	r3, [pc, #476]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	4a76      	ldr	r2, [pc, #472]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800286a:	e011      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800286c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002870:	3308      	adds	r3, #8
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fac5 	bl	8003e04 <RCCEx_PLL2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002880:	e006      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002888:	e002      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800288e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002898:	4b68      	ldr	r3, [pc, #416]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	4a65      	ldr	r2, [pc, #404]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80028c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80028cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	d051      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80028d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028e0:	d035      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80028e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028e6:	d82e      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028ec:	d031      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80028ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028f2:	d828      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f8:	d01a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fe:	d822      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002908:	d007      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800290a:	e01c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002918:	e01c      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800291a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800291e:	3308      	adds	r3, #8
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fa6e 	bl	8003e04 <RCCEx_PLL2_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800292e:	e011      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002934:	3328      	adds	r3, #40	@ 0x28
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fb15 	bl	8003f68 <RCCEx_PLL3_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002944:	e006      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800294c:	e002      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800295c:	4b37      	ldr	r3, [pc, #220]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	4a34      	ldr	r2, [pc, #208]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800296c:	430b      	orrs	r3, r1
 800296e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002970:	e003      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800297a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002994:	460b      	mov	r3, r1
 8002996:	4313      	orrs	r3, r2
 8002998:	d056      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800299a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a4:	d033      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80029a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029aa:	d82c      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b0:	d02f      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80029b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b6:	d826      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029bc:	d02b      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80029be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c2:	d820      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029c8:	d012      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80029ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029ce:	d81a      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d022      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d115      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029de:	3308      	adds	r3, #8
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fa0e 	bl	8003e04 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029ee:	e015      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f4:	3328      	adds	r3, #40	@ 0x28
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fab5 	bl	8003f68 <RCCEx_PLL3_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a0e:	bf00      	nop
 8002a10:	e004      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a32:	4a02      	ldr	r2, [pc, #8]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a3a:	bf00      	nop
 8002a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	d055      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a74:	d033      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a7a:	d82c      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a80:	d02f      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a86:	d826      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a92:	d820      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a98:	d012      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9e:	d81a      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d022      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	3308      	adds	r3, #8
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f9a6 	bl	8003e04 <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002abe:	e015      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac4:	3328      	adds	r3, #40	@ 0x28
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 fa4d 	bl	8003f68 <RCCEx_PLL3_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ad4:	e00a      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002adc:	e006      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e004      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002af4:	4ba3      	ldr	r3, [pc, #652]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b04:	4a9f      	ldr	r2, [pc, #636]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d037      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b3e:	d00e      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b44:	d816      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b50:	4b8c      	ldr	r3, [pc, #560]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a8b      	ldr	r2, [pc, #556]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b5c:	e00f      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b62:	3308      	adds	r3, #8
 8002b64:	2101      	movs	r1, #1
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f94c 	bl	8003e04 <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b72:	e004      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b7a:	e000      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b86:	4b7f      	ldr	r3, [pc, #508]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b94:	4a7b      	ldr	r2, [pc, #492]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b9a:	e003      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002bba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	d039      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d81c      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002bce:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002c11 	.word	0x08002c11
 8002bd8:	08002be5 	.word	0x08002be5
 8002bdc:	08002bf3 	.word	0x08002bf3
 8002be0:	08002c11 	.word	0x08002c11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be4:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	4a66      	ldr	r2, [pc, #408]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bf0:	e00f      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 f902 	bl	8003e04 <RCCEx_PLL2_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c06:	e004      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c0e:	e000      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	f023 0103 	bic.w	r1, r3, #3
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c28:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2e:	e003      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c52:	460b      	mov	r3, r1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f000 809f 	beq.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c66:	f7fe f859 	bl	8000d1c <HAL_GetTick>
 8002c6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe f854 	bl	8000d1c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	@ 0x64
 8002c7e:	d903      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c88:	4b3f      	ldr	r3, [pc, #252]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ed      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d179      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c9c:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ca8:	4053      	eors	r3, r2
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb2:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cbe:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a30      	ldr	r2, [pc, #192]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cca:	4b2e      	ldr	r3, [pc, #184]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cea:	d118      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe f816 	bl	8000d1c <HAL_GetTick>
 8002cf0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf4:	e00d      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe f811 	bl	8000d1c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d903      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002d10:	e005      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d12:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0eb      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d129      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d36:	d10e      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d48:	091a      	lsrs	r2, r3, #4
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6113      	str	r3, [r2, #16]
 8002d54:	e005      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d60:	6113      	str	r3, [r2, #16]
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d72:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	e00e      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002d82:	e009      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002d84:	58024400 	.word	0x58024400
 8002d88:	58024800 	.word	0x58024800
 8002d8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f002 0301 	and.w	r3, r2, #1
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f000 8089 	beq.w	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc0:	2b28      	cmp	r3, #40	@ 0x28
 8002dc2:	d86b      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002ea5 	.word	0x08002ea5
 8002dd0:	08002e9d 	.word	0x08002e9d
 8002dd4:	08002e9d 	.word	0x08002e9d
 8002dd8:	08002e9d 	.word	0x08002e9d
 8002ddc:	08002e9d 	.word	0x08002e9d
 8002de0:	08002e9d 	.word	0x08002e9d
 8002de4:	08002e9d 	.word	0x08002e9d
 8002de8:	08002e9d 	.word	0x08002e9d
 8002dec:	08002e71 	.word	0x08002e71
 8002df0:	08002e9d 	.word	0x08002e9d
 8002df4:	08002e9d 	.word	0x08002e9d
 8002df8:	08002e9d 	.word	0x08002e9d
 8002dfc:	08002e9d 	.word	0x08002e9d
 8002e00:	08002e9d 	.word	0x08002e9d
 8002e04:	08002e9d 	.word	0x08002e9d
 8002e08:	08002e9d 	.word	0x08002e9d
 8002e0c:	08002e87 	.word	0x08002e87
 8002e10:	08002e9d 	.word	0x08002e9d
 8002e14:	08002e9d 	.word	0x08002e9d
 8002e18:	08002e9d 	.word	0x08002e9d
 8002e1c:	08002e9d 	.word	0x08002e9d
 8002e20:	08002e9d 	.word	0x08002e9d
 8002e24:	08002e9d 	.word	0x08002e9d
 8002e28:	08002e9d 	.word	0x08002e9d
 8002e2c:	08002ea5 	.word	0x08002ea5
 8002e30:	08002e9d 	.word	0x08002e9d
 8002e34:	08002e9d 	.word	0x08002e9d
 8002e38:	08002e9d 	.word	0x08002e9d
 8002e3c:	08002e9d 	.word	0x08002e9d
 8002e40:	08002e9d 	.word	0x08002e9d
 8002e44:	08002e9d 	.word	0x08002e9d
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002ea5 	.word	0x08002ea5
 8002e50:	08002e9d 	.word	0x08002e9d
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e9d 	.word	0x08002e9d
 8002e5c:	08002e9d 	.word	0x08002e9d
 8002e60:	08002e9d 	.word	0x08002e9d
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002ea5 	.word	0x08002ea5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e74:	3308      	adds	r3, #8
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ffc3 	bl	8003e04 <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e84:	e00f      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	3328      	adds	r3, #40	@ 0x28
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 f86a 	bl	8003f68 <RCCEx_PLL3_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002eae:	4bbf      	ldr	r3, [pc, #764]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ebc:	4abb      	ldr	r2, [pc, #748]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ec2:	e003      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f002 0302 	and.w	r3, r2, #2
 8002ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ee2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	d041      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d824      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f15 	.word	0x08002f15
 8002f04:	08002f2b 	.word	0x08002f2b
 8002f08:	08002f49 	.word	0x08002f49
 8002f0c:	08002f49 	.word	0x08002f49
 8002f10:	08002f49 	.word	0x08002f49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f18:	3308      	adds	r3, #8
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ff71 	bl	8003e04 <RCCEx_PLL2_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f28:	e00f      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2e:	3328      	adds	r3, #40	@ 0x28
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 f818 	bl	8003f68 <RCCEx_PLL3_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f3e:	e004      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f52:	4b96      	ldr	r3, [pc, #600]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	f023 0107 	bic.w	r1, r3, #7
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f60:	4a92      	ldr	r2, [pc, #584]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f66:	e003      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f002 0304 	and.w	r3, r2, #4
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	d044      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d825      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002ff1 	.word	0x08002ff1
 8002fa8:	08002fbd 	.word	0x08002fbd
 8002fac:	08002fd3 	.word	0x08002fd3
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff1 	.word	0x08002ff1
 8002fb8:	08002ff1 	.word	0x08002ff1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 ff1d 	bl	8003e04 <RCCEx_PLL2_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fd0:	e00f      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd6:	3328      	adds	r3, #40	@ 0x28
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 ffc4 	bl	8003f68 <RCCEx_PLL3_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f023 0107 	bic.w	r1, r3, #7
 8003002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300a:	4a68      	ldr	r2, [pc, #416]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800300c:	430b      	orrs	r3, r1
 800300e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f002 0320 	and.w	r3, r2, #32
 8003026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003034:	460b      	mov	r3, r1
 8003036:	4313      	orrs	r3, r2
 8003038:	d055      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003046:	d033      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304c:	d82c      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003052:	d02f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003058:	d826      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800305a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800305e:	d02b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003064:	d820      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800306a:	d012      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003070:	d81a      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d022      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800307a:	d115      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003080:	3308      	adds	r3, #8
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f000 febd 	bl	8003e04 <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003090:	e015      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003096:	3328      	adds	r3, #40	@ 0x28
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 ff64 	bl	8003f68 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030a6:	e00a      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ae:	e006      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030b0:	bf00      	nop
 80030b2:	e004      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4b39      	ldr	r3, [pc, #228]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d6:	4a35      	ldr	r2, [pc, #212]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030d8:	430b      	orrs	r3, r1
 80030da:	6553      	str	r3, [r2, #84]	@ 0x54
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80030f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003100:	460b      	mov	r3, r1
 8003102:	4313      	orrs	r3, r2
 8003104:	d058      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800310e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003112:	d033      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003114:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003118:	d82c      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311e:	d02f      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003124:	d826      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003126:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800312a:	d02b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800312c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003130:	d820      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003136:	d012      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313c:	d81a      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d022      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d115      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314c:	3308      	adds	r3, #8
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fe57 	bl	8003e04 <RCCEx_PLL2_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800315c:	e015      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	3328      	adds	r3, #40	@ 0x28
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fefe 	bl	8003f68 <RCCEx_PLL3_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003172:	e00a      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317a:	e006      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800317c:	bf00      	nop
 800317e:	e004      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003180:	bf00      	nop
 8003182:	e002      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031a2:	4a02      	ldr	r2, [pc, #8]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a8:	e006      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80031c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031d2:	460b      	mov	r3, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	d055      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031e4:	d033      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80031e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031ea:	d82c      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f0:	d02f      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f6:	d826      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031fc:	d02b      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80031fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003202:	d820      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003208:	d012      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800320a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320e:	d81a      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d022      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d115      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	3308      	adds	r3, #8
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fdee 	bl	8003e04 <RCCEx_PLL2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800322e:	e015      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	3328      	adds	r3, #40	@ 0x28
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fe95 	bl	8003f68 <RCCEx_PLL3_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003244:	e00a      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800324c:	e006      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800324e:	bf00      	nop
 8003250:	e004      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800325a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800325c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003264:	4ba1      	ldr	r3, [pc, #644]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003274:	4a9d      	ldr	r2, [pc, #628]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003276:	430b      	orrs	r3, r1
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
 800327a:	e003      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f002 0308 	and.w	r3, r2, #8
 8003290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800329a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800329e:	460b      	mov	r3, r1
 80032a0:	4313      	orrs	r3, r2
 80032a2:	d01e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	3328      	adds	r3, #40	@ 0x28
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fe54 	bl	8003f68 <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032cc:	4b87      	ldr	r3, [pc, #540]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032dc:	4a83      	ldr	r2, [pc, #524]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032de:	430b      	orrs	r3, r1
 80032e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f002 0310 	and.w	r3, r2, #16
 80032ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d01e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	d10c      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003314:	3328      	adds	r3, #40	@ 0x28
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fe25 	bl	8003f68 <RCCEx_PLL3_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800332a:	4b70      	ldr	r3, [pc, #448]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800333a:	4a6c      	ldr	r2, [pc, #432]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800333c:	430b      	orrs	r3, r1
 800333e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800334c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003356:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800335a:	460b      	mov	r3, r1
 800335c:	4313      	orrs	r3, r2
 800335e:	d03e      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800336c:	d022      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800336e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003372:	d81b      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d00b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800337e:	e015      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fd3b 	bl	8003e04 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003394:	e00f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	3328      	adds	r3, #40	@ 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fde2 	bl	8003f68 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033aa:	e004      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80033b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033be:	4b4b      	ldr	r3, [pc, #300]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033ce:	4a47      	ldr	r2, [pc, #284]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80033ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ec:	2300      	movs	r3, #0
 80033ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80033f4:	460b      	mov	r3, r1
 80033f6:	4313      	orrs	r3, r2
 80033f8:	d03b      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003406:	d01f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800340c:	d818      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003412:	d003      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003418:	d007      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800341a:	e011      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4b33      	ldr	r3, [pc, #204]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	4a32      	ldr	r2, [pc, #200]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342e:	3328      	adds	r3, #40	@ 0x28
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd98 	bl	8003f68 <RCCEx_PLL3_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6553      	str	r3, [r2, #84]	@ 0x54
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800347e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003480:	2300      	movs	r3, #0
 8003482:	677b      	str	r3, [r7, #116]	@ 0x74
 8003484:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003488:	460b      	mov	r3, r1
 800348a:	4313      	orrs	r3, r2
 800348c:	d034      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349c:	d007      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800349e:	e011      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a0:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	4a11      	ldr	r2, [pc, #68]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034ac:	e00e      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	3308      	adds	r3, #8
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fca4 	bl	8003e04 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034c2:	e003      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10d      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	4a02      	ldr	r2, [pc, #8]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003506:	2300      	movs	r3, #0
 8003508:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800350a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d00c      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	2102      	movs	r1, #2
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd23 	bl	8003f68 <RCCEx_PLL3_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800353a:	663b      	str	r3, [r7, #96]	@ 0x60
 800353c:	2300      	movs	r3, #0
 800353e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d038      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003556:	d018      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800355c:	d811      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800355e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003562:	d014      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003568:	d80b      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800356e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003572:	d106      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4bc3      	ldr	r3, [pc, #780]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4ac2      	ldr	r2, [pc, #776]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003580:	e008      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003588:	e004      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800359c:	4bb9      	ldr	r3, [pc, #740]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ac:	4ab5      	ldr	r2, [pc, #724]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035b2:	e003      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80035c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ca:	2300      	movs	r3, #0
 80035cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035d8:	4baa      	ldr	r3, [pc, #680]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	4aa7      	ldr	r2, [pc, #668]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80035f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035fa:	2300      	movs	r3, #0
 80035fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80035fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003608:	4b9e      	ldr	r3, [pc, #632]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003618:	4a9a      	ldr	r2, [pc, #616]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800361a:	430b      	orrs	r3, r1
 800361c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800362a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800363a:	4b92      	ldr	r3, [pc, #584]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003648:	4a8e      	ldr	r2, [pc, #568]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800365a:	643b      	str	r3, [r7, #64]	@ 0x40
 800365c:	2300      	movs	r3, #0
 800365e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003660:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003664:	460b      	mov	r3, r1
 8003666:	4313      	orrs	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800366a:	4b86      	ldr	r3, [pc, #536]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4a85      	ldr	r2, [pc, #532]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003674:	6113      	str	r3, [r2, #16]
 8003676:	4b83      	ldr	r3, [pc, #524]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003678:	6919      	ldr	r1, [r3, #16]
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003682:	4a80      	ldr	r2, [pc, #512]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003696:	2300      	movs	r3, #0
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036a4:	4b77      	ldr	r3, [pc, #476]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	4a74      	ldr	r2, [pc, #464]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80036c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e4:	4a67      	ldr	r2, [pc, #412]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	2100      	movs	r1, #0
 80036f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003700:	460b      	mov	r3, r1
 8003702:	4313      	orrs	r3, r2
 8003704:	d011      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	3308      	adds	r3, #8
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb78 	bl	8003e04 <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800371a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	2100      	movs	r1, #0
 8003734:	6239      	str	r1, [r7, #32]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
 800373c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003740:	460b      	mov	r3, r1
 8003742:	4313      	orrs	r3, r2
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	3308      	adds	r3, #8
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fb58 	bl	8003e04 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	2100      	movs	r1, #0
 8003774:	61b9      	str	r1, [r7, #24]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d011      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	3308      	adds	r3, #8
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb38 	bl	8003e04 <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	2100      	movs	r1, #0
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037c0:	460b      	mov	r3, r1
 80037c2:	4313      	orrs	r3, r2
 80037c4:	d011      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	3328      	adds	r3, #40	@ 0x28
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fbca 	bl	8003f68 <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	2100      	movs	r1, #0
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003800:	460b      	mov	r3, r1
 8003802:	4313      	orrs	r3, r2
 8003804:	d011      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fbaa 	bl	8003f68 <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800381a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	2100      	movs	r1, #0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d011      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	3328      	adds	r3, #40	@ 0x28
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fb8a 	bl	8003f68 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800386a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800387e:	46bd      	mov	sp, r7
 8003880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003884:	58024400 	.word	0x58024400

08003888 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800388c:	f7fe fd96 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	@ (80038b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	58024400 	.word	0x58024400
 80038b0:	080052f4 	.word	0x080052f4

080038b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	@ 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038bc:	4ba1      	ldr	r3, [pc, #644]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038c6:	4b9f      	ldr	r3, [pc, #636]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	0b1b      	lsrs	r3, r3, #12
 80038cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038de:	4b99      	ldr	r3, [pc, #612]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8111 	beq.w	8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f000 8083 	beq.w	8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b02      	cmp	r3, #2
 800390e:	f200 80a1 	bhi.w	8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d056      	beq.n	80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800391e:	e099      	b.n	8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003920:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02d      	beq.n	8003988 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800392c:	4b85      	ldr	r3, [pc, #532]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	4a84      	ldr	r2, [pc, #528]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
 800393c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003956:	4b7b      	ldr	r3, [pc, #492]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003966:	ed97 6a03 	vldr	s12, [r7, #12]
 800396a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800396e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800397a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003986:	e087      	b.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ca:	e065      	b.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039de:	4b59      	ldr	r3, [pc, #356]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80039f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a0e:	e043      	b.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a22:	4b48      	ldr	r3, [pc, #288]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a52:	e021      	b.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a66:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a98:	4b2a      	ldr	r3, [pc, #168]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	0a5b      	lsrs	r3, r3, #9
 8003a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003abe:	ee17 2a90 	vmov	r2, s15
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003adc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aec:	ee17 2a90 	vmov	r2, s15
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	0e1b      	lsrs	r3, r3, #24
 8003afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1a:	ee17 2a90 	vmov	r2, s15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b22:	e008      	b.n	8003b36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	3724      	adds	r7, #36	@ 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	03d09000 	.word	0x03d09000
 8003b4c:	46000000 	.word	0x46000000
 8003b50:	4c742400 	.word	0x4c742400
 8003b54:	4a742400 	.word	0x4a742400
 8003b58:	4af42400 	.word	0x4af42400

08003b5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b64:	4ba1      	ldr	r3, [pc, #644]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b6e:	4b9f      	ldr	r3, [pc, #636]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	0d1b      	lsrs	r3, r3, #20
 8003b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b86:	4b99      	ldr	r3, [pc, #612]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	08db      	lsrs	r3, r3, #3
 8003b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8111 	beq.w	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f000 8083 	beq.w	8003cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f200 80a1 	bhi.w	8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d056      	beq.n	8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bc6:	e099      	b.n	8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bc8:	4b88      	ldr	r3, [pc, #544]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02d      	beq.n	8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bd4:	4b85      	ldr	r3, [pc, #532]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	4a84      	ldr	r2, [pc, #528]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
 8003be4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c2e:	e087      	b.n	8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c42:	4b6a      	ldr	r3, [pc, #424]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c72:	e065      	b.n	8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c86:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cb6:	e043      	b.n	8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cca:	4b48      	ldr	r3, [pc, #288]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfa:	e021      	b.n	8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	4b37      	ldr	r3, [pc, #220]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d40:	4b2a      	ldr	r3, [pc, #168]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	0a5b      	lsrs	r3, r3, #9
 8003d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d66:	ee17 2a90 	vmov	r2, s15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d94:	ee17 2a90 	vmov	r2, s15
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	0e1b      	lsrs	r3, r3, #24
 8003da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dca:	e008      	b.n	8003dde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	bf00      	nop
 8003de0:	3724      	adds	r7, #36	@ 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
 8003df0:	03d09000 	.word	0x03d09000
 8003df4:	46000000 	.word	0x46000000
 8003df8:	4c742400 	.word	0x4c742400
 8003dfc:	4a742400 	.word	0x4a742400
 8003e00:	4af42400 	.word	0x4af42400

08003e04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d101      	bne.n	8003e22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e099      	b.n	8003f56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e22:	4b4f      	ldr	r3, [pc, #316]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4e      	ldr	r2, [pc, #312]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fc ff75 	bl	8000d1c <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e36:	f7fc ff71 	bl	8000d1c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e086      	b.n	8003f56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e48:	4b45      	ldr	r3, [pc, #276]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e54:	4b42      	ldr	r3, [pc, #264]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	031b      	lsls	r3, r3, #12
 8003e62:	493f      	ldr	r1, [pc, #252]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	025b      	lsls	r3, r3, #9
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e98:	4931      	ldr	r1, [pc, #196]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e9e:	4b30      	ldr	r3, [pc, #192]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	492d      	ldr	r1, [pc, #180]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	f023 0220 	bic.w	r2, r3, #32
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	4928      	ldr	r1, [pc, #160]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ec2:	4b27      	ldr	r3, [pc, #156]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	4a26      	ldr	r2, [pc, #152]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ece:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed2:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <RCCEx_PLL2_Config+0x160>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	69d2      	ldr	r2, [r2, #28]
 8003eda:	00d2      	lsls	r2, r2, #3
 8003edc:	4920      	ldr	r1, [pc, #128]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	f043 0310 	orr.w	r3, r3, #16
 8003eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	4a19      	ldr	r2, [pc, #100]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003efe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f00:	e00f      	b.n	8003f22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f14:	e005      	b.n	8003f22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	4a11      	ldr	r2, [pc, #68]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f22:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fc fef5 	bl	8000d1c <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f36:	f7fc fef1 	bl	8000d1c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	58024400 	.word	0x58024400
 8003f64:	ffff0007 	.word	0xffff0007

08003f68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f76:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d101      	bne.n	8003f86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e099      	b.n	80040ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f86:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fc fec3 	bl	8000d1c <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f98:	e008      	b.n	8003fac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f9a:	f7fc febf 	bl	8000d1c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e086      	b.n	80040ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fb8:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	493f      	ldr	r1, [pc, #252]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ffc:	4931      	ldr	r1, [pc, #196]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	492d      	ldr	r1, [pc, #180]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	4928      	ldr	r1, [pc, #160]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004026:	4b27      	ldr	r3, [pc, #156]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800402c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <RCCEx_PLL3_Config+0x160>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	69d2      	ldr	r2, [r2, #28]
 800403e:	00d2      	lsls	r2, r2, #3
 8004040:	4920      	ldr	r1, [pc, #128]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800405e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004064:	e00f      	b.n	8004086 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800406c:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004078:	e005      	b.n	8004086 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004086:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fc fe43 	bl	8000d1c <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004098:	e008      	b.n	80040ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800409a:	f7fc fe3f 	bl	8000d1c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e006      	b.n	80040ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	ffff0007 	.word	0xffff0007

080040cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e042      	b.n	8004164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fc fcc9 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2224      	movs	r2, #36	@ 0x24
 80040fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fd90 	bl	8004c3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f825 	bl	800416c <UART_SetConfig>
 8004122:	4603      	mov	r3, r0
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e01b      	b.n	8004164 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800413a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800414a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fe0f 	bl	8004d80 <UART_CheckIdleState>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b092      	sub	sp, #72	@ 0x48
 8004172:	af00      	add	r7, sp, #0
 8004174:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4bbe      	ldr	r3, [pc, #760]	@ (8004494 <UART_SetConfig+0x328>)
 800419c:	4013      	ands	r3, r2
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4ab3      	ldr	r2, [pc, #716]	@ (8004498 <UART_SetConfig+0x32c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d4:	4313      	orrs	r3, r2
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	4baf      	ldr	r3, [pc, #700]	@ (800449c <UART_SetConfig+0x330>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	f023 010f 	bic.w	r1, r3, #15
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4aa6      	ldr	r2, [pc, #664]	@ (80044a0 <UART_SetConfig+0x334>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d177      	bne.n	80042fc <UART_SetConfig+0x190>
 800420c:	4ba5      	ldr	r3, [pc, #660]	@ (80044a4 <UART_SetConfig+0x338>)
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004214:	2b28      	cmp	r3, #40	@ 0x28
 8004216:	d86d      	bhi.n	80042f4 <UART_SetConfig+0x188>
 8004218:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <UART_SetConfig+0xb4>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	080042c5 	.word	0x080042c5
 8004224:	080042f5 	.word	0x080042f5
 8004228:	080042f5 	.word	0x080042f5
 800422c:	080042f5 	.word	0x080042f5
 8004230:	080042f5 	.word	0x080042f5
 8004234:	080042f5 	.word	0x080042f5
 8004238:	080042f5 	.word	0x080042f5
 800423c:	080042f5 	.word	0x080042f5
 8004240:	080042cd 	.word	0x080042cd
 8004244:	080042f5 	.word	0x080042f5
 8004248:	080042f5 	.word	0x080042f5
 800424c:	080042f5 	.word	0x080042f5
 8004250:	080042f5 	.word	0x080042f5
 8004254:	080042f5 	.word	0x080042f5
 8004258:	080042f5 	.word	0x080042f5
 800425c:	080042f5 	.word	0x080042f5
 8004260:	080042d5 	.word	0x080042d5
 8004264:	080042f5 	.word	0x080042f5
 8004268:	080042f5 	.word	0x080042f5
 800426c:	080042f5 	.word	0x080042f5
 8004270:	080042f5 	.word	0x080042f5
 8004274:	080042f5 	.word	0x080042f5
 8004278:	080042f5 	.word	0x080042f5
 800427c:	080042f5 	.word	0x080042f5
 8004280:	080042dd 	.word	0x080042dd
 8004284:	080042f5 	.word	0x080042f5
 8004288:	080042f5 	.word	0x080042f5
 800428c:	080042f5 	.word	0x080042f5
 8004290:	080042f5 	.word	0x080042f5
 8004294:	080042f5 	.word	0x080042f5
 8004298:	080042f5 	.word	0x080042f5
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	080042e5 	.word	0x080042e5
 80042a4:	080042f5 	.word	0x080042f5
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042f5 	.word	0x080042f5
 80042b0:	080042f5 	.word	0x080042f5
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ca:	e222      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042d2:	e21e      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042da:	e21a      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042e2:	e216      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042e4:	2320      	movs	r3, #32
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ea:	e212      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042ec:	2340      	movs	r3, #64	@ 0x40
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f2:	e20e      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fa:	e20a      	b.n	8004712 <UART_SetConfig+0x5a6>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a69      	ldr	r2, [pc, #420]	@ (80044a8 <UART_SetConfig+0x33c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d130      	bne.n	8004368 <UART_SetConfig+0x1fc>
 8004306:	4b67      	ldr	r3, [pc, #412]	@ (80044a4 <UART_SetConfig+0x338>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	2b05      	cmp	r3, #5
 8004310:	d826      	bhi.n	8004360 <UART_SetConfig+0x1f4>
 8004312:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0x1ac>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004331 	.word	0x08004331
 800431c:	08004339 	.word	0x08004339
 8004320:	08004341 	.word	0x08004341
 8004324:	08004349 	.word	0x08004349
 8004328:	08004351 	.word	0x08004351
 800432c:	08004359 	.word	0x08004359
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004336:	e1ec      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800433e:	e1e8      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004346:	e1e4      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800434e:	e1e0      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004350:	2320      	movs	r3, #32
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004356:	e1dc      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004358:	2340      	movs	r3, #64	@ 0x40
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435e:	e1d8      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004366:	e1d4      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a4f      	ldr	r2, [pc, #316]	@ (80044ac <UART_SetConfig+0x340>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d130      	bne.n	80043d4 <UART_SetConfig+0x268>
 8004372:	4b4c      	ldr	r3, [pc, #304]	@ (80044a4 <UART_SetConfig+0x338>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b05      	cmp	r3, #5
 800437c:	d826      	bhi.n	80043cc <UART_SetConfig+0x260>
 800437e:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x218>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	0800439d 	.word	0x0800439d
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043ad 	.word	0x080043ad
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a2:	e1b6      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043aa:	e1b2      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b2:	e1ae      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ba:	e1aa      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043bc:	2320      	movs	r3, #32
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c2:	e1a6      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043c4:	2340      	movs	r3, #64	@ 0x40
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ca:	e1a2      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d2:	e19e      	b.n	8004712 <UART_SetConfig+0x5a6>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a35      	ldr	r2, [pc, #212]	@ (80044b0 <UART_SetConfig+0x344>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d130      	bne.n	8004440 <UART_SetConfig+0x2d4>
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <UART_SetConfig+0x338>)
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d826      	bhi.n	8004438 <UART_SetConfig+0x2cc>
 80043ea:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <UART_SetConfig+0x284>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004409 	.word	0x08004409
 80043f4:	08004411 	.word	0x08004411
 80043f8:	08004419 	.word	0x08004419
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004429 	.word	0x08004429
 8004404:	08004431 	.word	0x08004431
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e180      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004416:	e17c      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441e:	e178      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004426:	e174      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004428:	2320      	movs	r3, #32
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442e:	e170      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004430:	2340      	movs	r3, #64	@ 0x40
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004436:	e16c      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443e:	e168      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <UART_SetConfig+0x348>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d142      	bne.n	80044d0 <UART_SetConfig+0x364>
 800444a:	4b16      	ldr	r3, [pc, #88]	@ (80044a4 <UART_SetConfig+0x338>)
 800444c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	2b05      	cmp	r3, #5
 8004454:	d838      	bhi.n	80044c8 <UART_SetConfig+0x35c>
 8004456:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <UART_SetConfig+0x2f0>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	08004475 	.word	0x08004475
 8004460:	0800447d 	.word	0x0800447d
 8004464:	08004485 	.word	0x08004485
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044b9 	.word	0x080044b9
 8004470:	080044c1 	.word	0x080044c1
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447a:	e14a      	b.n	8004712 <UART_SetConfig+0x5a6>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004482:	e146      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448a:	e142      	b.n	8004712 <UART_SetConfig+0x5a6>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004492:	e13e      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004494:	cfff69f3 	.word	0xcfff69f3
 8004498:	58000c00 	.word	0x58000c00
 800449c:	11fff4ff 	.word	0x11fff4ff
 80044a0:	40011000 	.word	0x40011000
 80044a4:	58024400 	.word	0x58024400
 80044a8:	40004400 	.word	0x40004400
 80044ac:	40004800 	.word	0x40004800
 80044b0:	40004c00 	.word	0x40004c00
 80044b4:	40005000 	.word	0x40005000
 80044b8:	2320      	movs	r3, #32
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044be:	e128      	b.n	8004712 <UART_SetConfig+0x5a6>
 80044c0:	2340      	movs	r3, #64	@ 0x40
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c6:	e124      	b.n	8004712 <UART_SetConfig+0x5a6>
 80044c8:	2380      	movs	r3, #128	@ 0x80
 80044ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ce:	e120      	b.n	8004712 <UART_SetConfig+0x5a6>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4acb      	ldr	r2, [pc, #812]	@ (8004804 <UART_SetConfig+0x698>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d176      	bne.n	80045c8 <UART_SetConfig+0x45c>
 80044da:	4bcb      	ldr	r3, [pc, #812]	@ (8004808 <UART_SetConfig+0x69c>)
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e2:	2b28      	cmp	r3, #40	@ 0x28
 80044e4:	d86c      	bhi.n	80045c0 <UART_SetConfig+0x454>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <UART_SetConfig+0x380>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004591 	.word	0x08004591
 80044f0:	080045c1 	.word	0x080045c1
 80044f4:	080045c1 	.word	0x080045c1
 80044f8:	080045c1 	.word	0x080045c1
 80044fc:	080045c1 	.word	0x080045c1
 8004500:	080045c1 	.word	0x080045c1
 8004504:	080045c1 	.word	0x080045c1
 8004508:	080045c1 	.word	0x080045c1
 800450c:	08004599 	.word	0x08004599
 8004510:	080045c1 	.word	0x080045c1
 8004514:	080045c1 	.word	0x080045c1
 8004518:	080045c1 	.word	0x080045c1
 800451c:	080045c1 	.word	0x080045c1
 8004520:	080045c1 	.word	0x080045c1
 8004524:	080045c1 	.word	0x080045c1
 8004528:	080045c1 	.word	0x080045c1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045c1 	.word	0x080045c1
 8004534:	080045c1 	.word	0x080045c1
 8004538:	080045c1 	.word	0x080045c1
 800453c:	080045c1 	.word	0x080045c1
 8004540:	080045c1 	.word	0x080045c1
 8004544:	080045c1 	.word	0x080045c1
 8004548:	080045c1 	.word	0x080045c1
 800454c:	080045a9 	.word	0x080045a9
 8004550:	080045c1 	.word	0x080045c1
 8004554:	080045c1 	.word	0x080045c1
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	080045c1 	.word	0x080045c1
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045b1 	.word	0x080045b1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045c1 	.word	0x080045c1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045b9 	.word	0x080045b9
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004596:	e0bc      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459e:	e0b8      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a6:	e0b4      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ae:	e0b0      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045b0:	2320      	movs	r3, #32
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b6:	e0ac      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045b8:	2340      	movs	r3, #64	@ 0x40
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045be:	e0a8      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c6:	e0a4      	b.n	8004712 <UART_SetConfig+0x5a6>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a8f      	ldr	r2, [pc, #572]	@ (800480c <UART_SetConfig+0x6a0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d130      	bne.n	8004634 <UART_SetConfig+0x4c8>
 80045d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004808 <UART_SetConfig+0x69c>)
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d826      	bhi.n	800462c <UART_SetConfig+0x4c0>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0x478>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045fd 	.word	0x080045fd
 80045e8:	08004605 	.word	0x08004605
 80045ec:	0800460d 	.word	0x0800460d
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004602:	e086      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460a:	e082      	b.n	8004712 <UART_SetConfig+0x5a6>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004612:	e07e      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461a:	e07a      	b.n	8004712 <UART_SetConfig+0x5a6>
 800461c:	2320      	movs	r3, #32
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004622:	e076      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004624:	2340      	movs	r3, #64	@ 0x40
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462a:	e072      	b.n	8004712 <UART_SetConfig+0x5a6>
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004632:	e06e      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a75      	ldr	r2, [pc, #468]	@ (8004810 <UART_SetConfig+0x6a4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d130      	bne.n	80046a0 <UART_SetConfig+0x534>
 800463e:	4b72      	ldr	r3, [pc, #456]	@ (8004808 <UART_SetConfig+0x69c>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b05      	cmp	r3, #5
 8004648:	d826      	bhi.n	8004698 <UART_SetConfig+0x52c>
 800464a:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <UART_SetConfig+0x4e4>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004669 	.word	0x08004669
 8004654:	08004671 	.word	0x08004671
 8004658:	08004679 	.word	0x08004679
 800465c:	08004681 	.word	0x08004681
 8004660:	08004689 	.word	0x08004689
 8004664:	08004691 	.word	0x08004691
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466e:	e050      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004676:	e04c      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467e:	e048      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004686:	e044      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004688:	2320      	movs	r3, #32
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e040      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004690:	2340      	movs	r3, #64	@ 0x40
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e03c      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469e:	e038      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004814 <UART_SetConfig+0x6a8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d130      	bne.n	800470c <UART_SetConfig+0x5a0>
 80046aa:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <UART_SetConfig+0x69c>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d826      	bhi.n	8004704 <UART_SetConfig+0x598>
 80046b6:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <UART_SetConfig+0x550>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046d5 	.word	0x080046d5
 80046c0:	080046dd 	.word	0x080046dd
 80046c4:	080046e5 	.word	0x080046e5
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e01a      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e016      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e012      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e00e      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046f4:	2320      	movs	r3, #32
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e00a      	b.n	8004712 <UART_SetConfig+0x5a6>
 80046fc:	2340      	movs	r3, #64	@ 0x40
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e006      	b.n	8004712 <UART_SetConfig+0x5a6>
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470a:	e002      	b.n	8004712 <UART_SetConfig+0x5a6>
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3f      	ldr	r2, [pc, #252]	@ (8004814 <UART_SetConfig+0x6a8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	f040 80f8 	bne.w	800490e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800471e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004722:	2b20      	cmp	r3, #32
 8004724:	dc46      	bgt.n	80047b4 <UART_SetConfig+0x648>
 8004726:	2b02      	cmp	r3, #2
 8004728:	f2c0 8082 	blt.w	8004830 <UART_SetConfig+0x6c4>
 800472c:	3b02      	subs	r3, #2
 800472e:	2b1e      	cmp	r3, #30
 8004730:	d87e      	bhi.n	8004830 <UART_SetConfig+0x6c4>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x5cc>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	080047bb 	.word	0x080047bb
 800473c:	08004831 	.word	0x08004831
 8004740:	080047c3 	.word	0x080047c3
 8004744:	08004831 	.word	0x08004831
 8004748:	08004831 	.word	0x08004831
 800474c:	08004831 	.word	0x08004831
 8004750:	080047d3 	.word	0x080047d3
 8004754:	08004831 	.word	0x08004831
 8004758:	08004831 	.word	0x08004831
 800475c:	08004831 	.word	0x08004831
 8004760:	08004831 	.word	0x08004831
 8004764:	08004831 	.word	0x08004831
 8004768:	08004831 	.word	0x08004831
 800476c:	08004831 	.word	0x08004831
 8004770:	080047e3 	.word	0x080047e3
 8004774:	08004831 	.word	0x08004831
 8004778:	08004831 	.word	0x08004831
 800477c:	08004831 	.word	0x08004831
 8004780:	08004831 	.word	0x08004831
 8004784:	08004831 	.word	0x08004831
 8004788:	08004831 	.word	0x08004831
 800478c:	08004831 	.word	0x08004831
 8004790:	08004831 	.word	0x08004831
 8004794:	08004831 	.word	0x08004831
 8004798:	08004831 	.word	0x08004831
 800479c:	08004831 	.word	0x08004831
 80047a0:	08004831 	.word	0x08004831
 80047a4:	08004831 	.word	0x08004831
 80047a8:	08004831 	.word	0x08004831
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004823 	.word	0x08004823
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	d037      	beq.n	8004828 <UART_SetConfig+0x6bc>
 80047b8:	e03a      	b.n	8004830 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047ba:	f7ff f865 	bl	8003888 <HAL_RCCEx_GetD3PCLK1Freq>
 80047be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047c0:	e03c      	b.n	800483c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f874 	bl	80038b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047d0:	e034      	b.n	800483c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d2:	f107 0318 	add.w	r3, r7, #24
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff f9c0 	bl	8003b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047e0:	e02c      	b.n	800483c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <UART_SetConfig+0x69c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <UART_SetConfig+0x69c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	08db      	lsrs	r3, r3, #3
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	4a07      	ldr	r2, [pc, #28]	@ (8004818 <UART_SetConfig+0x6ac>)
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004800:	e01c      	b.n	800483c <UART_SetConfig+0x6d0>
 8004802:	bf00      	nop
 8004804:	40011400 	.word	0x40011400
 8004808:	58024400 	.word	0x58024400
 800480c:	40007800 	.word	0x40007800
 8004810:	40007c00 	.word	0x40007c00
 8004814:	58000c00 	.word	0x58000c00
 8004818:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800481c:	4b9d      	ldr	r3, [pc, #628]	@ (8004a94 <UART_SetConfig+0x928>)
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004820:	e00c      	b.n	800483c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004822:	4b9d      	ldr	r3, [pc, #628]	@ (8004a98 <UART_SetConfig+0x92c>)
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004826:	e009      	b.n	800483c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800482e:	e005      	b.n	800483c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800483a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 81de 	beq.w	8004c00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	4a94      	ldr	r2, [pc, #592]	@ (8004a9c <UART_SetConfig+0x930>)
 800484a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800484e:	461a      	mov	r2, r3
 8004850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004852:	fbb3 f3f2 	udiv	r3, r3, r2
 8004856:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004864:	429a      	cmp	r2, r3
 8004866:	d305      	bcc.n	8004874 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800486e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004870:	429a      	cmp	r2, r3
 8004872:	d903      	bls.n	800487c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800487a:	e1c1      	b.n	8004c00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	2200      	movs	r2, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	60fa      	str	r2, [r7, #12]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	4a84      	ldr	r2, [pc, #528]	@ (8004a9c <UART_SetConfig+0x930>)
 800488a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488e:	b29b      	uxth	r3, r3
 8004890:	2200      	movs	r2, #0
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800489e:	f7fb fd1b 	bl	80002d8 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	020b      	lsls	r3, r1, #8
 80048b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048b8:	0202      	lsls	r2, r0, #8
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	6849      	ldr	r1, [r1, #4]
 80048be:	0849      	lsrs	r1, r1, #1
 80048c0:	2000      	movs	r0, #0
 80048c2:	460c      	mov	r4, r1
 80048c4:	4605      	mov	r5, r0
 80048c6:	eb12 0804 	adds.w	r8, r2, r4
 80048ca:	eb43 0905 	adc.w	r9, r3, r5
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	469a      	mov	sl, r3
 80048d6:	4693      	mov	fp, r2
 80048d8:	4652      	mov	r2, sl
 80048da:	465b      	mov	r3, fp
 80048dc:	4640      	mov	r0, r8
 80048de:	4649      	mov	r1, r9
 80048e0:	f7fb fcfa 	bl	80002d8 <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4613      	mov	r3, r2
 80048ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048f2:	d308      	bcc.n	8004906 <UART_SetConfig+0x79a>
 80048f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fa:	d204      	bcs.n	8004906 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	e17c      	b.n	8004c00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800490c:	e178      	b.n	8004c00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004916:	f040 80c5 	bne.w	8004aa4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800491a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800491e:	2b20      	cmp	r3, #32
 8004920:	dc48      	bgt.n	80049b4 <UART_SetConfig+0x848>
 8004922:	2b00      	cmp	r3, #0
 8004924:	db7b      	blt.n	8004a1e <UART_SetConfig+0x8b2>
 8004926:	2b20      	cmp	r3, #32
 8004928:	d879      	bhi.n	8004a1e <UART_SetConfig+0x8b2>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x7c4>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	080049bb 	.word	0x080049bb
 8004934:	080049c3 	.word	0x080049c3
 8004938:	08004a1f 	.word	0x08004a1f
 800493c:	08004a1f 	.word	0x08004a1f
 8004940:	080049cb 	.word	0x080049cb
 8004944:	08004a1f 	.word	0x08004a1f
 8004948:	08004a1f 	.word	0x08004a1f
 800494c:	08004a1f 	.word	0x08004a1f
 8004950:	080049db 	.word	0x080049db
 8004954:	08004a1f 	.word	0x08004a1f
 8004958:	08004a1f 	.word	0x08004a1f
 800495c:	08004a1f 	.word	0x08004a1f
 8004960:	08004a1f 	.word	0x08004a1f
 8004964:	08004a1f 	.word	0x08004a1f
 8004968:	08004a1f 	.word	0x08004a1f
 800496c:	08004a1f 	.word	0x08004a1f
 8004970:	080049eb 	.word	0x080049eb
 8004974:	08004a1f 	.word	0x08004a1f
 8004978:	08004a1f 	.word	0x08004a1f
 800497c:	08004a1f 	.word	0x08004a1f
 8004980:	08004a1f 	.word	0x08004a1f
 8004984:	08004a1f 	.word	0x08004a1f
 8004988:	08004a1f 	.word	0x08004a1f
 800498c:	08004a1f 	.word	0x08004a1f
 8004990:	08004a1f 	.word	0x08004a1f
 8004994:	08004a1f 	.word	0x08004a1f
 8004998:	08004a1f 	.word	0x08004a1f
 800499c:	08004a1f 	.word	0x08004a1f
 80049a0:	08004a1f 	.word	0x08004a1f
 80049a4:	08004a1f 	.word	0x08004a1f
 80049a8:	08004a1f 	.word	0x08004a1f
 80049ac:	08004a1f 	.word	0x08004a1f
 80049b0:	08004a11 	.word	0x08004a11
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d02e      	beq.n	8004a16 <UART_SetConfig+0x8aa>
 80049b8:	e031      	b.n	8004a1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7fd fd2f 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 80049be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049c0:	e033      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c2:	f7fd fd41 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 80049c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049c8:	e02f      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe ff70 	bl	80038b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049d8:	e027      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049da:	f107 0318 	add.w	r3, r7, #24
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff f8bc 	bl	8003b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049e8:	e01f      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <UART_SetConfig+0x934>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049f6:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <UART_SetConfig+0x934>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	08db      	lsrs	r3, r3, #3
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	4a24      	ldr	r2, [pc, #144]	@ (8004a94 <UART_SetConfig+0x928>)
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a08:	e00f      	b.n	8004a2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a0a:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <UART_SetConfig+0x928>)
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a0e:	e00c      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <UART_SetConfig+0x92c>)
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a1c:	e005      	b.n	8004a2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80e7 	beq.w	8004c00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <UART_SetConfig+0x930>)
 8004a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a44:	005a      	lsls	r2, r3, #1
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	441a      	add	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	2b0f      	cmp	r3, #15
 8004a5c:	d916      	bls.n	8004a8c <UART_SetConfig+0x920>
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a64:	d212      	bcs.n	8004a8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f023 030f 	bic.w	r3, r3, #15
 8004a6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	e0b9      	b.n	8004c00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a92:	e0b5      	b.n	8004c00 <UART_SetConfig+0xa94>
 8004a94:	03d09000 	.word	0x03d09000
 8004a98:	003d0900 	.word	0x003d0900
 8004a9c:	08005304 	.word	0x08005304
 8004aa0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	dc49      	bgt.n	8004b40 <UART_SetConfig+0x9d4>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db7c      	blt.n	8004baa <UART_SetConfig+0xa3e>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d87a      	bhi.n	8004baa <UART_SetConfig+0xa3e>
 8004ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0x950>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004b47 	.word	0x08004b47
 8004ac0:	08004b4f 	.word	0x08004b4f
 8004ac4:	08004bab 	.word	0x08004bab
 8004ac8:	08004bab 	.word	0x08004bab
 8004acc:	08004b57 	.word	0x08004b57
 8004ad0:	08004bab 	.word	0x08004bab
 8004ad4:	08004bab 	.word	0x08004bab
 8004ad8:	08004bab 	.word	0x08004bab
 8004adc:	08004b67 	.word	0x08004b67
 8004ae0:	08004bab 	.word	0x08004bab
 8004ae4:	08004bab 	.word	0x08004bab
 8004ae8:	08004bab 	.word	0x08004bab
 8004aec:	08004bab 	.word	0x08004bab
 8004af0:	08004bab 	.word	0x08004bab
 8004af4:	08004bab 	.word	0x08004bab
 8004af8:	08004bab 	.word	0x08004bab
 8004afc:	08004b77 	.word	0x08004b77
 8004b00:	08004bab 	.word	0x08004bab
 8004b04:	08004bab 	.word	0x08004bab
 8004b08:	08004bab 	.word	0x08004bab
 8004b0c:	08004bab 	.word	0x08004bab
 8004b10:	08004bab 	.word	0x08004bab
 8004b14:	08004bab 	.word	0x08004bab
 8004b18:	08004bab 	.word	0x08004bab
 8004b1c:	08004bab 	.word	0x08004bab
 8004b20:	08004bab 	.word	0x08004bab
 8004b24:	08004bab 	.word	0x08004bab
 8004b28:	08004bab 	.word	0x08004bab
 8004b2c:	08004bab 	.word	0x08004bab
 8004b30:	08004bab 	.word	0x08004bab
 8004b34:	08004bab 	.word	0x08004bab
 8004b38:	08004bab 	.word	0x08004bab
 8004b3c:	08004b9d 	.word	0x08004b9d
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	d02e      	beq.n	8004ba2 <UART_SetConfig+0xa36>
 8004b44:	e031      	b.n	8004baa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7fd fc69 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8004b4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b4c:	e033      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4e:	f7fd fc7b 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 8004b52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b54:	e02f      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe feaa 	bl	80038b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b64:	e027      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b66:	f107 0318 	add.w	r3, r7, #24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fff6 	bl	8003b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b74:	e01f      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b76:	4b2d      	ldr	r3, [pc, #180]	@ (8004c2c <UART_SetConfig+0xac0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b82:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <UART_SetConfig+0xac0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	4a28      	ldr	r2, [pc, #160]	@ (8004c30 <UART_SetConfig+0xac4>)
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b94:	e00f      	b.n	8004bb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004b96:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <UART_SetConfig+0xac4>)
 8004b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b9a:	e00c      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b9c:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <UART_SetConfig+0xac8>)
 8004b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d021      	beq.n	8004c00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <UART_SetConfig+0xacc>)
 8004bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	441a      	add	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	d909      	bls.n	8004bfa <UART_SetConfig+0xa8e>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d205      	bcs.n	8004bfa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e002      	b.n	8004c00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c1c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3748      	adds	r7, #72	@ 0x48
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	03d09000 	.word	0x03d09000
 8004c34:	003d0900 	.word	0x003d0900
 8004c38:	08005304 	.word	0x08005304

08004c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3a:	d10a      	bne.n	8004d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b098      	sub	sp, #96	@ 0x60
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fb ffc4 	bl	8000d1c <HAL_GetTick>
 8004d94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d12f      	bne.n	8004e04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f88e 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d022      	beq.n	8004e04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e063      	b.n	8004ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d149      	bne.n	8004ea6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f857 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d03c      	beq.n	8004ea6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	623b      	str	r3, [r7, #32]
   return(result);
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e6      	bne.n	8004e2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e7e:	61fa      	str	r2, [r7, #28]
 8004e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e012      	b.n	8004ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3758      	adds	r7, #88	@ 0x58
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee4:	e04f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d04b      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fb ff15 	bl	8000d1c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e04e      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d037      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d034      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d031      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d110      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2208      	movs	r2, #8
 8004f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f839 	bl	8004fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2208      	movs	r2, #8
 8004f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e029      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f60:	d111      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f81f 	bl	8004fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e00f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d0a0      	beq.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b095      	sub	sp, #84	@ 0x54
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e6      	bne.n	8004fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8005078 <UART_EndRxTransfer+0xc8>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800500a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d118      	bne.n	8005058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	60bb      	str	r3, [r7, #8]
   return(result);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 0310 	bic.w	r3, r3, #16
 800503a:	647b      	str	r3, [r7, #68]	@ 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	613b      	str	r3, [r7, #16]
   return(result);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e6      	bne.n	8005026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800506c:	bf00      	nop
 800506e:	3754      	adds	r7, #84	@ 0x54
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	effffffe 	.word	0xeffffffe

0800507c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_UARTEx_DisableFifoMode+0x16>
 800508e:	2302      	movs	r3, #2
 8005090:	e027      	b.n	80050e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2224      	movs	r2, #36	@ 0x24
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005102:	2302      	movs	r3, #2
 8005104:	e02d      	b.n	8005162 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2224      	movs	r2, #36	@ 0x24
 8005112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f850 	bl	80051e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800517e:	2302      	movs	r3, #2
 8005180:	e02d      	b.n	80051de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2224      	movs	r2, #36	@ 0x24
 800518e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f812 	bl	80051e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005208:	e031      	b.n	800526e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800520a:	2310      	movs	r3, #16
 800520c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800520e:	2310      	movs	r3, #16
 8005210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	0e5b      	lsrs	r3, r3, #25
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	0f5b      	lsrs	r3, r3, #29
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	7b3a      	ldrb	r2, [r7, #12]
 8005236:	4911      	ldr	r1, [pc, #68]	@ (800527c <UARTEx_SetNbDataToProcess+0x94>)
 8005238:	5c8a      	ldrb	r2, [r1, r2]
 800523a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800523e:	7b3a      	ldrb	r2, [r7, #12]
 8005240:	490f      	ldr	r1, [pc, #60]	@ (8005280 <UARTEx_SetNbDataToProcess+0x98>)
 8005242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005244:	fb93 f3f2 	sdiv	r3, r3, r2
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	7b7a      	ldrb	r2, [r7, #13]
 8005254:	4909      	ldr	r1, [pc, #36]	@ (800527c <UARTEx_SetNbDataToProcess+0x94>)
 8005256:	5c8a      	ldrb	r2, [r1, r2]
 8005258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800525c:	7b7a      	ldrb	r2, [r7, #13]
 800525e:	4908      	ldr	r1, [pc, #32]	@ (8005280 <UARTEx_SetNbDataToProcess+0x98>)
 8005260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005262:	fb93 f3f2 	sdiv	r3, r3, r2
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	0800531c 	.word	0x0800531c
 8005280:	08005324 	.word	0x08005324

08005284 <memset>:
 8005284:	4402      	add	r2, r0
 8005286:	4603      	mov	r3, r0
 8005288:	4293      	cmp	r3, r2
 800528a:	d100      	bne.n	800528e <memset+0xa>
 800528c:	4770      	bx	lr
 800528e:	f803 1b01 	strb.w	r1, [r3], #1
 8005292:	e7f9      	b.n	8005288 <memset+0x4>

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	@ (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	@ (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	@ (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	@ (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 f818 	bl	80052dc <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	08005334 	.word	0x08005334
 80052d0:	08005334 	.word	0x08005334
 80052d4:	08005334 	.word	0x08005334
 80052d8:	08005338 	.word	0x08005338

080052dc <_init>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr

080052e8 <_fini>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr
