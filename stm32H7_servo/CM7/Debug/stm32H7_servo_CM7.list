
stm32H7_servo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  080050c0  080050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c8  080050c8  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c8  080050c8  000060c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  080050d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2400002c  080050fc  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000144  080050fc  00007144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015346  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  0001c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d33  00000000  00000000  0001fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a998  00000000  00000000  000207eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001603a  00000000  00000000  0005b183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187182  00000000  00000000  000711bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f833f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  001f8384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fcb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005074 	.word	0x08005074

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08005074 	.word	0x08005074

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <main+0x10c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fa0f 	bl	8000b40 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fcad 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f871 	bl	800080c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b35      	ldr	r3, [pc, #212]	@ (8000800 <main+0x10c>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a33      	ldr	r2, [pc, #204]	@ (8000800 <main+0x10c>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <main+0x10c>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 f8b9 	bl	80018c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 f8cf 	bl	80018f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <main+0x10c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	60fa      	str	r2, [r7, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f9e1 	bl	8000b40 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f937 	bl	80009f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000782:	f000 f8bf 	bl	8000904 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000786:	2104      	movs	r1, #4
 8000788:	481e      	ldr	r0, [pc, #120]	@ (8000804 <main+0x110>)
 800078a:	f002 fc7d 	bl	8003088 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 faae 	bl	8000cf0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 faab 	bl	8000cf0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800079a:	2002      	movs	r0, #2
 800079c:	f000 faa8 	bl	8000cf0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007a0:	2101      	movs	r1, #1
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fb1a 	bl	8000ddc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <main+0x114>)
 80007aa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ae:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <main+0x114>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <main+0x114>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <main+0x114>)
 80007be:	2200      	movs	r2, #0
 80007c0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <main+0x114>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007c8:	490f      	ldr	r1, [pc, #60]	@ (8000808 <main+0x114>)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fb96 	bl	8000efc <BSP_COM_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <main+0xe6>
  {
    Error_Handler();
 80007d6:	f000 f9b3 	bl	8000b40 <Error_Handler>
//	HAL_Delay(1000);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
//	HAL_Delay(2000);

	int x;
	for(x=150; x<900; x=x+1)
 80007da:	2396      	movs	r3, #150	@ 0x96
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	e009      	b.n	80007f4 <main+0x100>
	{
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, x);
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <main+0x110>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(3);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 fcdb 	bl	80011a4 <HAL_Delay>
	for(x=150; x<900; x=x+1)
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80007fa:	dbf1      	blt.n	80007e0 <main+0xec>
  {
 80007fc:	e7ed      	b.n	80007da <main+0xe6>
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	24000058 	.word	0x24000058
 8000808:	24000048 	.word	0x24000048

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	@ 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	224c      	movs	r2, #76	@ 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fbfe 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fbf8 	bl	800501c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800082c:	2004      	movs	r0, #4
 800082e:	f001 f875 	bl	800191c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <SystemClock_Config+0xf0>)
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	4a30      	ldr	r2, [pc, #192]	@ (80008fc <SystemClock_Config+0xf0>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <SystemClock_Config+0xf0>)
 8000844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <SystemClock_Config+0xf4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000854:	4a2a      	ldr	r2, [pc, #168]	@ (8000900 <SystemClock_Config+0xf4>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemClock_Config+0xf4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000868:	bf00      	nop
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <SystemClock_Config+0xf4>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000876:	d1f8      	bne.n	800086a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	2302      	movs	r3, #2
 8000888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 800088e:	2390      	movs	r3, #144	@ 0x90
 8000890:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000896:	2305      	movs	r3, #5
 8000898:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800089e:	2304      	movs	r3, #4
 80008a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 f88e 	bl	80019d0 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008ba:	f000 f941 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	233f      	movs	r3, #63	@ 0x3f
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2303      	movs	r3, #3
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80008c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d4:	2340      	movs	r3, #64	@ 0x40
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2101      	movs	r1, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fccd 	bl	8002284 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008f0:	f000 f926 	bl	8000b40 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3770      	adds	r7, #112	@ 0x70
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58000400 	.word	0x58000400
 8000900:	58024800 	.word	0x58024800

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	@ 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <MX_TIM2_Init+0xe8>)
 8000938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <MX_TIM2_Init+0xe8>)
 8000940:	2247      	movs	r2, #71	@ 0x47
 8000942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <MX_TIM2_Init+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800094a:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <MX_TIM2_Init+0xe8>)
 800094c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_TIM2_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_TIM2_Init+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800095e:	4823      	ldr	r0, [pc, #140]	@ (80009ec <MX_TIM2_Init+0xe8>)
 8000960:	f002 fada 	bl	8002f18 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f8e9 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	@ (80009ec <MX_TIM2_Init+0xe8>)
 800097c:	f002 fda6 	bl	80034cc <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000986:	f000 f8db 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800098a:	4818      	ldr	r0, [pc, #96]	@ (80009ec <MX_TIM2_Init+0xe8>)
 800098c:	f002 fb1b 	bl	8002fc6 <HAL_TIM_PWM_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000996:	f000 f8d3 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4810      	ldr	r0, [pc, #64]	@ (80009ec <MX_TIM2_Init+0xe8>)
 80009aa:	f003 fac7 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009b4:	f000 f8c4 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b8:	2360      	movs	r3, #96	@ 0x60
 80009ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	2204      	movs	r2, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_TIM2_Init+0xe8>)
 80009d0:	f002 fc68 	bl	80032a4 <HAL_TIM_PWM_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009da:	f000 f8b1 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009de:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM2_Init+0xe8>)
 80009e0:	f000 f8ee 	bl	8000bc0 <HAL_TIM_MspPostInit>

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	@ 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	24000058 	.word	0x24000058

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b49      	ldr	r3, [pc, #292]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	4a47      	ldr	r2, [pc, #284]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a16:	4b45      	ldr	r3, [pc, #276]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a34:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b3a      	ldr	r3, [pc, #232]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	4a38      	ldr	r2, [pc, #224]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a70:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0x13c>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7e:	2332      	movs	r3, #50	@ 0x32
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <MX_GPIO_Init+0x140>)
 8000a9a:	f000 fd47 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9e:	2386      	movs	r3, #134	@ 0x86
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <MX_GPIO_Init+0x144>)
 8000aba:	f000 fd37 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000abe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4817      	ldr	r0, [pc, #92]	@ (8000b38 <MX_GPIO_Init+0x148>)
 8000adc:	f000 fd26 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ae0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000af2:	230a      	movs	r3, #10
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_GPIO_Init+0x144>)
 8000afe:	f000 fd15 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <MX_GPIO_Init+0x14c>)
 8000b20:	f000 fd04 	bl	800152c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	@ 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58020800 	.word	0x58020800
 8000b34:	58020000 	.word	0x58020000
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	58021800 	.word	0x58021800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	58024400 	.word	0x58024400

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b90:	d10e      	bne.n	8000bb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be0:	d11e      	bne.n	8000c20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c00:	2308      	movs	r3, #8
 8000c02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	f000 fc86 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 fa6d 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f914 	bl	8000ec0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fc92 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f004 f9af 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fd11 	bl	80006f4 <main>
  bx  lr
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cdc:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000ce0:	080050d0 	.word	0x080050d0
  ldr r2, =_sbss
 8000ce4:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000ce8:	24000144 	.word	0x24000144

08000cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC3_IRQHandler>
	...

08000cf0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <BSP_LED_Init+0x28>
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d006      	beq.n	8000d18 <BSP_LED_Init+0x28>
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d003      	beq.n	8000d18 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d10:	f06f 0301 	mvn.w	r3, #1
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d16:	e055      	b.n	8000dc4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10f      	bne.n	8000d3e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	e021      	b.n	8000d82 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d10f      	bne.n	8000d64 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	e00e      	b.n	8000d82 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a19      	ldr	r2, [pc, #100]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <BSP_LED_Init+0xe0>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <BSP_LED_Init+0xe4>)
 8000d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <BSP_LED_Init+0xe8>)
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	f107 0218 	add.w	r2, r7, #24
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fbc0 	bl	800152c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <BSP_LED_Init+0xe8>)
 8000db0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <BSP_LED_Init+0xe4>)
 8000db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f000 fd64 	bl	800188c <HAL_GPIO_WritePin>
  }

  return ret;
 8000dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	0800509c 	.word	0x0800509c
 8000dd8:	2400000c 	.word	0x2400000c

08000ddc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <BSP_PB_Init+0xcc>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ea8 <BSP_PB_Init+0xcc>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <BSP_PB_Init+0xcc>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <BSP_PB_Init+0xd0>)
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	f107 020c 	add.w	r2, r7, #12
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fb7b 	bl	800152c <HAL_GPIO_Init>
 8000e36:	e031      	b.n	8000e9c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e3c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <BSP_PB_Init+0xd0>)
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	f107 020c 	add.w	r2, r7, #12
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fb6d 	bl	800152c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <BSP_PB_Init+0xd4>)
 8000e58:	441a      	add	r2, r3
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4915      	ldr	r1, [pc, #84]	@ (8000eb4 <BSP_PB_Init+0xd8>)
 8000e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4610      	mov	r0, r2
 8000e66:	f000 fb10 	bl	800148a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <BSP_PB_Init+0xd4>)
 8000e70:	1898      	adds	r0, r3, r2
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <BSP_PB_Init+0xdc>)
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f000 fae5 	bl	800144c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e82:	2028      	movs	r0, #40	@ 0x28
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <BSP_PB_Init+0xe0>)
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f000 fa93 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e94:	2328      	movs	r3, #40	@ 0x28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 faa9 	bl	80013ee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	24000018 	.word	0x24000018
 8000eb0:	240000a4 	.word	0x240000a4
 8000eb4:	080050a4 	.word	0x080050a4
 8000eb8:	2400001c 	.word	0x2400001c
 8000ebc:	24000020 	.word	0x24000020

08000ec0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <BSP_PB_IRQHandler+0x20>)
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 faee 	bl	80014b4 <HAL_EXTI_IRQHandler>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	240000a4 	.word	0x240000a4

08000ee4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f12:	f06f 0301 	mvn.w	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e018      	b.n	8000f4c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2294      	movs	r2, #148	@ 0x94
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <BSP_COM_Init+0x5c>)
 8000f24:	4413      	add	r3, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f852 	bl	8000fd0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2294      	movs	r2, #148	@ 0x94
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <BSP_COM_Init+0x5c>)
 8000f36:	4413      	add	r3, r2
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f80e 	bl	8000f5c <MX_USART3_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f46:	f06f 0303 	mvn.w	r3, #3
 8000f4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	240000ac 	.word	0x240000ac

08000f5c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_USART3_Init+0x60>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	220c      	movs	r2, #12
 8000f7a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	895b      	ldrh	r3, [r3, #10]
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	891b      	ldrh	r3, [r3, #8]
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	899b      	ldrh	r3, [r3, #12]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fa8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f003 f854 	bl	8004058 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000008 	.word	0x24000008

08000fc0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ff8d 	bl	8000ee4 <BSP_PB_Callback>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <COM1_MspInit+0xa8>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	4a26      	ldr	r2, [pc, #152]	@ (8001078 <COM1_MspInit+0xa8>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe8:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <COM1_MspInit+0xa8>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000ff6:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <COM1_MspInit+0xa8>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <COM1_MspInit+0xa8>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <COM1_MspInit+0xa8>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <COM1_MspInit+0xa8>)
 8001016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <COM1_MspInit+0xa8>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <COM1_MspInit+0xa8>)
 8001026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800102a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001036:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001044:	2307      	movs	r3, #7
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <COM1_MspInit+0xac>)
 8001050:	f000 fa6c 	bl	800152c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001058:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800105e:	2307      	movs	r3, #7
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <COM1_MspInit+0xac>)
 800106a:	f000 fa5f 	bl	800152c <HAL_GPIO_Init>
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	58024400 	.word	0x58024400
 800107c:	58020c00 	.word	0x58020c00

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f98c 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800108c:	f001 fab0 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_Init+0x68>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	4913      	ldr	r1, [pc, #76]	@ (80010ec <HAL_Init+0x6c>)
 800109e:	5ccb      	ldrb	r3, [r1, r3]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_Init+0x68>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_Init+0x6c>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <HAL_Init+0x70>)
 80010c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_Init+0x74>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f814 	bl	80010f8 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e002      	b.n	80010e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fd37 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58024400 	.word	0x58024400
 80010ec:	0800508c 	.word	0x0800508c
 80010f0:	24000004 	.word	0x24000004
 80010f4:	24000000 	.word	0x24000000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e021      	b.n	8001150 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_InitTick+0x64>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_InitTick+0x60>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f971 	bl	800140a <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f93b 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x68>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	24000028 	.word	0x24000028
 800115c:	24000000 	.word	0x24000000
 8001160:	24000024 	.word	0x24000024

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	24000028 	.word	0x24000028
 8001188:	24000140 	.word	0x24000140

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	24000140 	.word	0x24000140

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24000028 	.word	0x24000028

080011ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetREVID+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0c1b      	lsrs	r3, r3, #16
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	5c001000 	.word	0x5c001000

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	4313      	orrs	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	05fa0000 	.word	0x05fa0000

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff40 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff90 	bl	80012f8 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5f 	bl	80012a4 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa4 	bl	8001360 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_GetCurrentCPUID+0x24>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	2b07      	cmp	r3, #7
 8001434:	d101      	bne.n	800143a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001436:	2303      	movs	r3, #3
 8001438:	e000      	b.n	800143c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800143a:	2301      	movs	r3, #1
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	460b      	mov	r3, r1
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e00a      	b.n	800147e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	605a      	str	r2, [r3, #4]
      break;
 8001474:	e002      	b.n	800147c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
      break;
 800147a:	bf00      	nop
  }

  return status;
 800147c:	7dfb      	ldrb	r3, [r7, #23]
}
 800147e:	4618      	mov	r0, r3
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e003      	b.n	80014a6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	2201      	movs	r2, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80014d8:	f7ff ffa4 	bl	8001424 <HAL_GetCurrentCPUID>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d105      	bne.n	80014ee <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	011a      	lsls	r2, r3, #4
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_EXTI_IRQHandler+0x70>)
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e004      	b.n	80014f8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	011a      	lsls	r2, r3, #4
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_EXTI_IRQHandler+0x74>)
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4798      	blx	r3
    }
  }
}
 800151c:	bf00      	nop
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	58000088 	.word	0x58000088
 8001528:	580000c8 	.word	0x580000c8

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800153a:	4b89      	ldr	r3, [pc, #548]	@ (8001760 <HAL_GPIO_Init+0x234>)
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800153e:	e194      	b.n	800186a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8186 	beq.w	8001864 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x44>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	69b9      	ldr	r1, [r7, #24]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80e0 	beq.w	8001864 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <HAL_GPIO_Init+0x238>)
 80016a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001764 <HAL_GPIO_Init+0x238>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <HAL_GPIO_Init+0x238>)
 80016b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c2:	4a29      	ldr	r2, [pc, #164]	@ (8001768 <HAL_GPIO_Init+0x23c>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a20      	ldr	r2, [pc, #128]	@ (800176c <HAL_GPIO_Init+0x240>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d052      	beq.n	8001794 <HAL_GPIO_Init+0x268>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <HAL_GPIO_Init+0x244>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d031      	beq.n	800175a <HAL_GPIO_Init+0x22e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001774 <HAL_GPIO_Init+0x248>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d02b      	beq.n	8001756 <HAL_GPIO_Init+0x22a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_GPIO_Init+0x24c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d025      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_GPIO_Init+0x250>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_GPIO_Init+0x254>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a1a      	ldr	r2, [pc, #104]	@ (8001784 <HAL_GPIO_Init+0x258>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x21a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_GPIO_Init+0x25c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x216>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a18      	ldr	r2, [pc, #96]	@ (800178c <HAL_GPIO_Init+0x260>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x212>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_GPIO_Init+0x264>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x20e>
 8001736:	2309      	movs	r3, #9
 8001738:	e02d      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800173a:	230a      	movs	r3, #10
 800173c:	e02b      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800173e:	2308      	movs	r3, #8
 8001740:	e029      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 8001742:	2307      	movs	r3, #7
 8001744:	e027      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 8001746:	2306      	movs	r3, #6
 8001748:	e025      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800174a:	2305      	movs	r3, #5
 800174c:	e023      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800174e:	2304      	movs	r3, #4
 8001750:	e021      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 8001752:	2303      	movs	r3, #3
 8001754:	e01f      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 8001756:	2302      	movs	r3, #2
 8001758:	e01d      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800175a:	2301      	movs	r3, #1
 800175c:	e01b      	b.n	8001796 <HAL_GPIO_Init+0x26a>
 800175e:	bf00      	nop
 8001760:	58000080 	.word	0x58000080
 8001764:	58024400 	.word	0x58024400
 8001768:	58000400 	.word	0x58000400
 800176c:	58020000 	.word	0x58020000
 8001770:	58020400 	.word	0x58020400
 8001774:	58020800 	.word	0x58020800
 8001778:	58020c00 	.word	0x58020c00
 800177c:	58021000 	.word	0x58021000
 8001780:	58021400 	.word	0x58021400
 8001784:	58021800 	.word	0x58021800
 8001788:	58021c00 	.word	0x58021c00
 800178c:	58022000 	.word	0x58022000
 8001790:	58022400 	.word	0x58022400
 8001794:	2300      	movs	r3, #0
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a6:	4938      	ldr	r1, [pc, #224]	@ (8001888 <HAL_GPIO_Init+0x35c>)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f ae63 	bne.w	8001540 <HAL_GPIO_Init+0x14>
  }
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3724      	adds	r7, #36	@ 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	58000400 	.word	0x58000400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_HSEM_FastTake+0x2c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3320      	adds	r3, #32
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_HSEM_FastTake+0x30>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	58026400 	.word	0x58026400
 80018f0:	80000300 	.word	0x80000300

080018f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018fe:	4906      	ldr	r1, [pc, #24]	@ (8001918 <HAL_HSEM_Release+0x24>)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	58026400 	.word	0x58026400

0800191c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	2b06      	cmp	r3, #6
 800192e:	d00a      	beq.n	8001946 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001930:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e040      	b.n	80019c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e03e      	b.n	80019c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800194e:	491f      	ldr	r1, [pc, #124]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001956:	f7ff fc19 	bl	800118c <HAL_GetTick>
 800195a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800195c:	e009      	b.n	8001972 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800195e:	f7ff fc15 	bl	800118c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800196c:	d901      	bls.n	8001972 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e028      	b.n	80019c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001972:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800197e:	d1ee      	bne.n	800195e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b1e      	cmp	r3, #30
 8001984:	d008      	beq.n	8001998 <HAL_PWREx_ConfigSupply+0x7c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b2e      	cmp	r3, #46	@ 0x2e
 800198a:	d005      	beq.n	8001998 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b1d      	cmp	r3, #29
 8001990:	d002      	beq.n	8001998 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b2d      	cmp	r3, #45	@ 0x2d
 8001996:	d114      	bne.n	80019c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001998:	f7ff fbf8 	bl	800118c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800199e:	e009      	b.n	80019b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019a0:	f7ff fbf4 	bl	800118c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ae:	d901      	bls.n	80019b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e007      	b.n	80019c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_PWREx_ConfigSupply+0xb0>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c0:	d1ee      	bne.n	80019a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024800 	.word	0x58024800

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	f000 bc48 	b.w	8002274 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8088 	beq.w	8001b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	4b99      	ldr	r3, [pc, #612]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019fc:	4b96      	ldr	r3, [pc, #600]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a04:	2b10      	cmp	r3, #16
 8001a06:	d007      	beq.n	8001a18 <HAL_RCC_OscConfig+0x48>
 8001a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0a:	2b18      	cmp	r3, #24
 8001a0c:	d111      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
 8001a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4b8f      	ldr	r3, [pc, #572]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d06d      	beq.n	8001b00 <HAL_RCC_OscConfig+0x130>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d169      	bne.n	8001b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f000 bc21 	b.w	8002274 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x7a>
 8001a3c:	4b86      	ldr	r3, [pc, #536]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a85      	ldr	r2, [pc, #532]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x9c>
 8001a52:	4b81      	ldr	r3, [pc, #516]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a80      	ldr	r2, [pc, #512]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7d      	ldr	r2, [pc, #500]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xc0>
 8001a76:	4b78      	ldr	r3, [pc, #480]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a77      	ldr	r2, [pc, #476]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a74      	ldr	r2, [pc, #464]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a90:	4b71      	ldr	r3, [pc, #452]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a70      	ldr	r2, [pc, #448]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6d      	ldr	r2, [pc, #436]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb6c 	bl	800118c <HAL_GetTick>
 8001ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb68 	bl	800118c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e3d4      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb58 	bl	800118c <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fb54 	bl	800118c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e3c0      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001af2:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x110>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80ca 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b10:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_RCC_OscConfig+0x166>
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	2b18      	cmp	r3, #24
 8001b2a:	d156      	bne.n	8001bda <HAL_RCC_OscConfig+0x20a>
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d151      	bne.n	8001bda <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b36:	4b48      	ldr	r3, [pc, #288]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x17e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e392      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0219 	bic.w	r2, r3, #25
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	493f      	ldr	r1, [pc, #252]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb14 	bl	800118c <HAL_GetTick>
 8001b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fb10 	bl	800118c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e37c      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	f7ff fb31 	bl	80011ec <HAL_GetREVID>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d817      	bhi.n	8001bc4 <HAL_RCC_OscConfig+0x1f4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b40      	cmp	r3, #64	@ 0x40
 8001b9a:	d108      	bne.n	8001bae <HAL_RCC_OscConfig+0x1de>
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001baa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bac:	e07a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	031b      	lsls	r3, r3, #12
 8001bbc:	4926      	ldr	r1, [pc, #152]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc2:	e06f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	4921      	ldr	r1, [pc, #132]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd8:	e064      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d047      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0219 	bic.w	r2, r3, #25
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	491a      	ldr	r1, [pc, #104]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff faca 	bl	800118c <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fac6 	bl	800118c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e332      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	f7ff fae7 	bl	80011ec <HAL_GetREVID>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d819      	bhi.n	8001c5c <HAL_RCC_OscConfig+0x28c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b40      	cmp	r3, #64	@ 0x40
 8001c2e:	d108      	bne.n	8001c42 <HAL_RCC_OscConfig+0x272>
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c38:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3e:	6053      	str	r3, [r2, #4]
 8001c40:	e030      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	031b      	lsls	r3, r3, #12
 8001c50:	4901      	ldr	r1, [pc, #4]	@ (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
 8001c56:	e025      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	4997      	ldr	r1, [pc, #604]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e018      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b95      	ldr	r3, [pc, #596]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a94      	ldr	r2, [pc, #592]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa85 	bl	800118c <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff fa81 	bl	800118c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2ed      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c98:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a9 	beq.w	8001e04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b85      	ldr	r3, [pc, #532]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cbc:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d007      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x308>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b18      	cmp	r3, #24
 8001ccc:	d13a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x374>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d135      	bne.n	8001d44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x320>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b80      	cmp	r3, #128	@ 0x80
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e2c1      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf0:	f7ff fa7c 	bl	80011ec <HAL_GetREVID>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d817      	bhi.n	8001d2e <HAL_RCC_OscConfig+0x35e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x348>
 8001d06:	4b70      	ldr	r3, [pc, #448]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d16:	e075      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d18:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	4968      	ldr	r1, [pc, #416]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d2c:	e06a      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d2e:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	4962      	ldr	r1, [pc, #392]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d42:	e05f      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d042      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa18 	bl	800118c <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa14 	bl	800118c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e280      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d72:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7e:	f7ff fa35 	bl	80011ec <HAL_GetREVID>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d817      	bhi.n	8001dbc <HAL_RCC_OscConfig+0x3ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d108      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3d6>
 8001d94:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
 8001da6:	4b48      	ldr	r3, [pc, #288]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	4944      	ldr	r1, [pc, #272]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e023      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
 8001dbc:	4b42      	ldr	r3, [pc, #264]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	493f      	ldr	r1, [pc, #252]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e018      	b.n	8001e04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f9d5 	bl	800118c <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001de6:	f7ff f9d1 	bl	800118c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e23d      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001df8:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f9b2 	bl	800118c <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f9ae 	bl	800118c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e21a      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x45c>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f998 	bl	800118c <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f994 	bl	800118c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e200      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d039      	beq.n	8001efe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f975 	bl	800118c <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7ff f971 	bl	800118c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1dd      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4d6>
 8001ec4:	e01b      	b.n	8001efe <HAL_RCC_OscConfig+0x52e>
 8001ec6:	bf00      	nop
 8001ec8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a9a      	ldr	r2, [pc, #616]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f958 	bl	800118c <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee0:	f7ff f954 	bl	800118c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1c0      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ef2:	4b92      	ldr	r3, [pc, #584]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8081 	beq.w	800200e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002140 <HAL_RCC_OscConfig+0x770>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a8b      	ldr	r2, [pc, #556]	@ (8002140 <HAL_RCC_OscConfig+0x770>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f18:	f7ff f938 	bl	800118c <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7ff f934 	bl	800118c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1a0      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f32:	4b83      	ldr	r3, [pc, #524]	@ (8002140 <HAL_RCC_OscConfig+0x770>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x584>
 8001f46:	4b7d      	ldr	r3, [pc, #500]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	e02d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5e0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5a6>
 8001f5c:	4b77      	ldr	r3, [pc, #476]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a76      	ldr	r2, [pc, #472]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b74      	ldr	r3, [pc, #464]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a73      	ldr	r2, [pc, #460]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5e0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c8>
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	4a6e      	ldr	r2, [pc, #440]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5e0>
 8001f98:	4b68      	ldr	r3, [pc, #416]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9c:	4a67      	ldr	r2, [pc, #412]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa4:	4b65      	ldr	r3, [pc, #404]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a64      	ldr	r2, [pc, #400]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f8e8 	bl	800118c <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f8e4 	bl	800118c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e14e      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd6:	4b59      	ldr	r3, [pc, #356]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ee      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x5f0>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f8d2 	bl	800118c <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7ff f8ce 	bl	800118c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e138      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002002:	4b4e      	ldr	r3, [pc, #312]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ee      	bne.n	8001fec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 812d 	beq.w	8002272 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002018:	4b48      	ldr	r3, [pc, #288]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002020:	2b18      	cmp	r3, #24
 8002022:	f000 80bd 	beq.w	80021a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	2b02      	cmp	r3, #2
 800202c:	f040 809e 	bne.w	800216c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b42      	ldr	r3, [pc, #264]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff f8a6 	bl	800118c <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff f8a2 	bl	800118c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e10e      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002056:	4b39      	ldr	r3, [pc, #228]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002062:	4b36      	ldr	r3, [pc, #216]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002066:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <HAL_RCC_OscConfig+0x774>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	430a      	orrs	r2, r1
 8002076:	4931      	ldr	r1, [pc, #196]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	628b      	str	r3, [r1, #40]	@ 0x28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	3b01      	subs	r3, #1
 8002082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	3b01      	subs	r3, #1
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	b29b      	uxth	r3, r3
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a4:	3b01      	subs	r3, #1
 80020a6:	061b      	lsls	r3, r3, #24
 80020a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020ac:	4923      	ldr	r1, [pc, #140]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020b2:	4b22      	ldr	r3, [pc, #136]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_RCC_OscConfig+0x778>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ca:	00d2      	lsls	r2, r2, #3
 80020cc:	491b      	ldr	r1, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	f023 020c 	bic.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4917      	ldr	r1, [pc, #92]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	f023 0202 	bic.w	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	4912      	ldr	r1, [pc, #72]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800211a:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_RCC_OscConfig+0x76c>)
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f82b 	bl	800118c <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002138:	e011      	b.n	800215e <HAL_RCC_OscConfig+0x78e>
 800213a:	bf00      	nop
 800213c:	58024400 	.word	0x58024400
 8002140:	58024800 	.word	0x58024800
 8002144:	fffffc0c 	.word	0xfffffc0c
 8002148:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f81e 	bl	800118c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e08a      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x77c>
 800216a:	e082      	b.n	8002272 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b43      	ldr	r3, [pc, #268]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f808 	bl	800118c <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f804 	bl	800118c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e070      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002192:	4b3a      	ldr	r3, [pc, #232]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x7b0>
 800219e:	e068      	b.n	8002272 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d031      	beq.n	8002218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d12a      	bne.n	8002218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d122      	bne.n	8002218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0a5b      	lsrs	r3, r3, #9
 80021e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e02b      	b.n	8002274 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002226:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	429a      	cmp	r2, r3
 8002230:	d01f      	beq.n	8002272 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223e:	f7fe ffa5 	bl	800118c <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002244:	bf00      	nop
 8002246:	f7fe ffa1 	bl	800118c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	4293      	cmp	r3, r2
 8002250:	d0f9      	beq.n	8002246 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_RCC_OscConfig+0x8b0>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800225e:	00d2      	lsls	r2, r2, #3
 8002260:	4906      	ldr	r1, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002262:	4313      	orrs	r3, r2
 8002264:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_RCC_OscConfig+0x8ac>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3730      	adds	r7, #48	@ 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	58024400 	.word	0x58024400
 8002280:	ffff0007 	.word	0xffff0007

08002284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e19c      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b8a      	ldr	r3, [pc, #552]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d910      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 020f 	bic.w	r2, r3, #15
 80022ae:	4985      	ldr	r1, [pc, #532]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e184      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	4b7b      	ldr	r3, [pc, #492]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d908      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022e4:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4975      	ldr	r1, [pc, #468]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800230e:	429a      	cmp	r2, r3
 8002310:	d908      	bls.n	8002324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002312:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	496a      	ldr	r1, [pc, #424]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800233c:	429a      	cmp	r2, r3
 800233e:	d908      	bls.n	8002352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002340:	4b61      	ldr	r3, [pc, #388]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	495e      	ldr	r1, [pc, #376]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800234e:	4313      	orrs	r3, r2
 8002350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800236a:	429a      	cmp	r2, r3
 800236c:	d908      	bls.n	8002380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800236e:	4b56      	ldr	r3, [pc, #344]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4953      	ldr	r1, [pc, #332]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800237c:	4313      	orrs	r3, r2
 800237e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f023 020f 	bic.w	r2, r3, #15
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4947      	ldr	r1, [pc, #284]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d055      	beq.n	8002466 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4940      	ldr	r1, [pc, #256]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d4:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d121      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0f6      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d115      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0ea      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002404:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0de      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	4b2c      	ldr	r3, [pc, #176]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0d6      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4925      	ldr	r1, [pc, #148]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002432:	4313      	orrs	r3, r2
 8002434:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002436:	f7fe fea9 	bl	800118c <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243c:	e00a      	b.n	8002454 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243e:	f7fe fea5 	bl	800118c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0be      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	429a      	cmp	r2, r3
 8002464:	d1eb      	bne.n	800243e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	429a      	cmp	r2, r3
 8002480:	d208      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f023 020f 	bic.w	r2, r3, #15
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	490e      	ldr	r1, [pc, #56]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d214      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e086      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
 80024c4:	52002000 	.word	0x52002000
 80024c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d208      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024e8:	4b3c      	ldr	r3, [pc, #240]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4939      	ldr	r1, [pc, #228]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002512:	429a      	cmp	r2, r3
 8002514:	d208      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	492e      	ldr	r1, [pc, #184]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002524:	4313      	orrs	r3, r2
 8002526:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002540:	429a      	cmp	r2, r3
 8002542:	d208      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4922      	ldr	r1, [pc, #136]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002552:	4313      	orrs	r3, r2
 8002554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800256e:	429a      	cmp	r2, r3
 8002570:	d208      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002572:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4917      	ldr	r1, [pc, #92]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002584:	f000 f834 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	4912      	ldr	r1, [pc, #72]	@ (80025e0 <HAL_RCC_ClockConfig+0x35c>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <HAL_RCC_ClockConfig+0x35c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <HAL_RCC_ClockConfig+0x360>)
 80025ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025bc:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <HAL_RCC_ClockConfig+0x364>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_RCC_ClockConfig+0x368>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd96 	bl	80010f8 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	58024400 	.word	0x58024400
 80025e0:	0800508c 	.word	0x0800508c
 80025e4:	24000004 	.word	0x24000004
 80025e8:	24000000 	.word	0x24000000
 80025ec:	24000024 	.word	0x24000024

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f6:	4bb3      	ldr	r3, [pc, #716]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025fe:	2b18      	cmp	r3, #24
 8002600:	f200 8155 	bhi.w	80028ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002604:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002671 	.word	0x08002671
 8002610:	080028af 	.word	0x080028af
 8002614:	080028af 	.word	0x080028af
 8002618:	080028af 	.word	0x080028af
 800261c:	080028af 	.word	0x080028af
 8002620:	080028af 	.word	0x080028af
 8002624:	080028af 	.word	0x080028af
 8002628:	080028af 	.word	0x080028af
 800262c:	08002697 	.word	0x08002697
 8002630:	080028af 	.word	0x080028af
 8002634:	080028af 	.word	0x080028af
 8002638:	080028af 	.word	0x080028af
 800263c:	080028af 	.word	0x080028af
 8002640:	080028af 	.word	0x080028af
 8002644:	080028af 	.word	0x080028af
 8002648:	080028af 	.word	0x080028af
 800264c:	0800269d 	.word	0x0800269d
 8002650:	080028af 	.word	0x080028af
 8002654:	080028af 	.word	0x080028af
 8002658:	080028af 	.word	0x080028af
 800265c:	080028af 	.word	0x080028af
 8002660:	080028af 	.word	0x080028af
 8002664:	080028af 	.word	0x080028af
 8002668:	080028af 	.word	0x080028af
 800266c:	080026a3 	.word	0x080026a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002670:	4b94      	ldr	r3, [pc, #592]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800267c:	4b91      	ldr	r3, [pc, #580]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	4a90      	ldr	r2, [pc, #576]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800268e:	e111      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002690:	4b8d      	ldr	r3, [pc, #564]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002692:	61bb      	str	r3, [r7, #24]
      break;
 8002694:	e10e      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002696:	4b8d      	ldr	r3, [pc, #564]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002698:	61bb      	str	r3, [r7, #24]
      break;
 800269a:	e10b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800269c:	4b8c      	ldr	r3, [pc, #560]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800269e:	61bb      	str	r3, [r7, #24]
      break;
 80026a0:	e108      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026ac:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026b8:	4b82      	ldr	r3, [pc, #520]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026c2:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	08db      	lsrs	r3, r3, #3
 80026c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80e1 	beq.w	80028a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f000 8083 	beq.w	80027f4 <HAL_RCC_GetSysClockFreq+0x204>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f200 80a1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x248>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x114>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d056      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002702:	e099      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002704:	4b6f      	ldr	r3, [pc, #444]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02d      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002710:	4b6c      	ldr	r3, [pc, #432]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	4a6b      	ldr	r2, [pc, #428]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800273a:	4b62      	ldr	r3, [pc, #392]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800274a:	ed97 6a02 	vldr	s12, [r7, #8]
 800274e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800275a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800275e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800276a:	e087      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002776:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80028d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800277a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800278e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002792:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800279a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800279e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ae:	e065      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80027be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c2:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027f2:	e043      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002816:	ed97 6a02 	vldr	s12, [r7, #8]
 800281a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800281e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800282a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002836:	e021      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800285a:	ed97 6a02 	vldr	s12, [r7, #8]
 800285e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800286e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800287a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002886:	3301      	adds	r3, #1
 8002888:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002894:	edd7 6a07 	vldr	s13, [r7, #28]
 8002898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a0:	ee17 3a90 	vmov	r3, s15
 80028a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028b0:	61bb      	str	r3, [r7, #24]
      break;
 80028b2:	bf00      	nop
  }

  return sysclockfreq;
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	58024400 	.word	0x58024400
 80028c8:	03d09000 	.word	0x03d09000
 80028cc:	003d0900 	.word	0x003d0900
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	46000000 	.word	0x46000000
 80028d8:	4c742400 	.word	0x4c742400
 80028dc:	4a742400 	.word	0x4a742400
 80028e0:	4af42400 	.word	0x4af42400

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028ea:	f7ff fe81 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <HAL_RCC_GetHCLKFreq+0x50>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490f      	ldr	r1, [pc, #60]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x54>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002908:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <HAL_RCC_GetHCLKFreq+0x50>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x54>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_RCC_GetHCLKFreq+0x58>)
 8002920:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002922:	4a07      	ldr	r2, [pc, #28]	@ (8002940 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <HAL_RCC_GetHCLKFreq+0x58>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	58024400 	.word	0x58024400
 8002938:	0800508c 	.word	0x0800508c
 800293c:	24000004 	.word	0x24000004
 8002940:	24000000 	.word	0x24000000

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002948:	f7ff ffcc 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4904      	ldr	r1, [pc, #16]	@ (800296c <HAL_RCC_GetPCLK1Freq+0x28>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	58024400 	.word	0x58024400
 800296c:	0800508c 	.word	0x0800508c

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002974:	f7ff ffb6 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024400 	.word	0x58024400
 8002998:	0800508c 	.word	0x0800508c

0800299c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80029a0:	f7ff ffa0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400
 80029c4:	0800508c 	.word	0x0800508c

080029c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029d0:	4ba1      	ldr	r3, [pc, #644]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80029da:	4b9f      	ldr	r3, [pc, #636]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	0b1b      	lsrs	r3, r3, #12
 80029e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80029e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80029f2:	4b99      	ldr	r3, [pc, #612]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8111 	beq.w	8002c38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f000 8083 	beq.w	8002b24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	f200 80a1 	bhi.w	8002b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d056      	beq.n	8002ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002a32:	e099      	b.n	8002b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a34:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02d      	beq.n	8002a9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a40:	4b85      	ldr	r3, [pc, #532]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	4a84      	ldr	r2, [pc, #528]	@ (8002c5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a9a:	e087      	b.n	8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002c64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ac2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ade:	e065      	b.n	8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af2:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b22:	e043      	b.n	8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b36:	4b48      	ldr	r3, [pc, #288]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b66:	e021      	b.n	8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7a:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002baa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	0a5b      	lsrs	r3, r3, #9
 8002bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	ee17 2a90 	vmov	r2, s15
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002bda:	4b1f      	ldr	r3, [pc, #124]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c00:	ee17 2a90 	vmov	r2, s15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 2a90 	vmov	r2, s15
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002c36:	e008      	b.n	8002c4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	03d09000 	.word	0x03d09000
 8002c60:	46000000 	.word	0x46000000
 8002c64:	4c742400 	.word	0x4c742400
 8002c68:	4a742400 	.word	0x4a742400
 8002c6c:	4af42400 	.word	0x4af42400

08002c70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c78:	4ba1      	ldr	r3, [pc, #644]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002c82:	4b9f      	ldr	r3, [pc, #636]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	0d1b      	lsrs	r3, r3, #20
 8002c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002c9a:	4b99      	ldr	r3, [pc, #612]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8111 	beq.w	8002ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	f000 8083 	beq.w	8002dcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	f200 80a1 	bhi.w	8002e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d056      	beq.n	8002d88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002cda:	e099      	b.n	8002e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cdc:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02d      	beq.n	8002d44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ce8:	4b85      	ldr	r3, [pc, #532]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	4a84      	ldr	r2, [pc, #528]	@ (8002f04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d12:	4b7b      	ldr	r3, [pc, #492]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002d42:	e087      	b.n	8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002f0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d56:	4b6a      	ldr	r3, [pc, #424]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d86:	e065      	b.n	8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9a:	4b59      	ldr	r3, [pc, #356]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dca:	e043      	b.n	8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dde:	4b48      	ldr	r3, [pc, #288]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8002df2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e0e:	e021      	b.n	8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002e54:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	0a5b      	lsrs	r3, r3, #9
 8002e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7a:	ee17 2a90 	vmov	r2, s15
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002e82:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea8:	ee17 2a90 	vmov	r2, s15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed6:	ee17 2a90 	vmov	r2, s15
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002ede:	e008      	b.n	8002ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	bf00      	nop
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	58024400 	.word	0x58024400
 8002f04:	03d09000 	.word	0x03d09000
 8002f08:	46000000 	.word	0x46000000
 8002f0c:	4c742400 	.word	0x4c742400
 8002f10:	4a742400 	.word	0x4a742400
 8002f14:	4af42400 	.word	0x4af42400

08002f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e049      	b.n	8002fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fe1e 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 fbb0 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e049      	b.n	800306c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f841 	bl	8003074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fb59 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x24>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e03c      	b.n	8003126 <HAL_TIM_PWM_Start+0x9e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d109      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x3e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e02f      	b.n	8003126 <HAL_TIM_PWM_Start+0x9e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d109      	bne.n	80030e0 <HAL_TIM_PWM_Start+0x58>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e022      	b.n	8003126 <HAL_TIM_PWM_Start+0x9e>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d109      	bne.n	80030fa <HAL_TIM_PWM_Start+0x72>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e015      	b.n	8003126 <HAL_TIM_PWM_Start+0x9e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_PWM_Start+0x8c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e008      	b.n	8003126 <HAL_TIM_PWM_Start+0x9e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0a1      	b.n	8003272 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start+0xb6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800313c:	e023      	b.n	8003186 <HAL_TIM_PWM_Start+0xfe>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0xc6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800314c:	e01b      	b.n	8003186 <HAL_TIM_PWM_Start+0xfe>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0xd6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800315c:	e013      	b.n	8003186 <HAL_TIM_PWM_Start+0xfe>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xe6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800316c:	e00b      	b.n	8003186 <HAL_TIM_PWM_Start+0xfe>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b10      	cmp	r3, #16
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xf6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800317c:	e003      	b.n	8003186 <HAL_TIM_PWM_Start+0xfe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 feae 	bl	8003ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a38      	ldr	r2, [pc, #224]	@ (800327c <HAL_TIM_PWM_Start+0x1f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x13e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a37      	ldr	r2, [pc, #220]	@ (8003280 <HAL_TIM_PWM_Start+0x1f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x13e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a35      	ldr	r2, [pc, #212]	@ (8003284 <HAL_TIM_PWM_Start+0x1fc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x13e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <HAL_TIM_PWM_Start+0x200>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x13e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a32      	ldr	r2, [pc, #200]	@ (800328c <HAL_TIM_PWM_Start+0x204>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PWM_Start+0x142>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_TIM_PWM_Start+0x144>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a25      	ldr	r2, [pc, #148]	@ (800327c <HAL_TIM_PWM_Start+0x1f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d01d      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	@ (8003290 <HAL_TIM_PWM_Start+0x208>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a24      	ldr	r2, [pc, #144]	@ (8003294 <HAL_TIM_PWM_Start+0x20c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <HAL_TIM_PWM_Start+0x210>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <HAL_TIM_PWM_Start+0x1f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_TIM_PWM_Start+0x214>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1a8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <HAL_TIM_PWM_Start+0x1fc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d115      	bne.n	800325c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <HAL_TIM_PWM_Start+0x218>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d015      	beq.n	800326e <HAL_TIM_PWM_Start+0x1e6>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d011      	beq.n	800326e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e008      	b.n	800326e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e000      	b.n	8003270 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40010400 	.word	0x40010400
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40001800 	.word	0x40001800
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0ff      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b14      	cmp	r3, #20
 80032ce:	f200 80f0 	bhi.w	80034b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032d2:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	080034b3 	.word	0x080034b3
 80032e0:	080034b3 	.word	0x080034b3
 80032e4:	080034b3 	.word	0x080034b3
 80032e8:	0800336d 	.word	0x0800336d
 80032ec:	080034b3 	.word	0x080034b3
 80032f0:	080034b3 	.word	0x080034b3
 80032f4:	080034b3 	.word	0x080034b3
 80032f8:	080033af 	.word	0x080033af
 80032fc:	080034b3 	.word	0x080034b3
 8003300:	080034b3 	.word	0x080034b3
 8003304:	080034b3 	.word	0x080034b3
 8003308:	080033ef 	.word	0x080033ef
 800330c:	080034b3 	.word	0x080034b3
 8003310:	080034b3 	.word	0x080034b3
 8003314:	080034b3 	.word	0x080034b3
 8003318:	08003431 	.word	0x08003431
 800331c:	080034b3 	.word	0x080034b3
 8003320:	080034b3 	.word	0x080034b3
 8003324:	080034b3 	.word	0x080034b3
 8003328:	08003471 	.word	0x08003471
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa68 	bl	8003808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0208 	orr.w	r2, r2, #8
 8003346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	619a      	str	r2, [r3, #24]
      break;
 800336a:	e0a5      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fad8 	bl	8003928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	619a      	str	r2, [r3, #24]
      break;
 80033ac:	e084      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fb41 	bl	8003a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0208 	orr.w	r2, r2, #8
 80033c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0204 	bic.w	r2, r2, #4
 80033d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
      break;
 80033ec:	e064      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fba9 	bl	8003b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	61da      	str	r2, [r3, #28]
      break;
 800342e:	e043      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fbf2 	bl	8003c20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0208 	orr.w	r2, r2, #8
 800344a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800346e:	e023      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fc36 	bl	8003ce8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
      break;
 80034b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop

080034cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e0dc      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x1d6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800350e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a64      	ldr	r2, [pc, #400]	@ (80036b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f000 80a9 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 8003524:	4a62      	ldr	r2, [pc, #392]	@ (80036b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f200 80ae 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800352c:	4a61      	ldr	r2, [pc, #388]	@ (80036b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	f000 80a1 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 8003534:	4a5f      	ldr	r2, [pc, #380]	@ (80036b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	f200 80a6 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800353c:	4a5e      	ldr	r2, [pc, #376]	@ (80036b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f000 8099 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 8003544:	4a5c      	ldr	r2, [pc, #368]	@ (80036b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f200 809e 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800354c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003550:	f000 8091 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 8003554:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003558:	f200 8096 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003560:	f000 8089 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 8003564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003568:	f200 808e 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003570:	d03e      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x124>
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003576:	f200 8087 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357e:	f000 8086 	beq.w	800368e <HAL_TIM_ConfigClockSource+0x1c2>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	d87f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 8003588:	2b70      	cmp	r3, #112	@ 0x70
 800358a:	d01a      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0xf6>
 800358c:	2b70      	cmp	r3, #112	@ 0x70
 800358e:	d87b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 8003590:	2b60      	cmp	r3, #96	@ 0x60
 8003592:	d050      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x16a>
 8003594:	2b60      	cmp	r3, #96	@ 0x60
 8003596:	d877      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d03c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x14a>
 800359c:	2b50      	cmp	r3, #80	@ 0x50
 800359e:	d873      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	d058      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x18a>
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d86f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 80035a8:	2b30      	cmp	r3, #48	@ 0x30
 80035aa:	d064      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 80035ac:	2b30      	cmp	r3, #48	@ 0x30
 80035ae:	d86b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d060      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d867      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d05c      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d05a      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x1aa>
 80035c0:	e062      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035d2:	f000 fc6d 	bl	8003eb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]
      break;
 80035ee:	e04f      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003600:	f000 fc56 	bl	8003eb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e03c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	461a      	mov	r2, r3
 8003624:	f000 fbc6 	bl	8003db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2150      	movs	r1, #80	@ 0x50
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fc20 	bl	8003e74 <TIM_ITRx_SetConfig>
      break;
 8003634:	e02c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fbe5 	bl	8003e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2160      	movs	r1, #96	@ 0x60
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fc10 	bl	8003e74 <TIM_ITRx_SetConfig>
      break;
 8003654:	e01c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fba6 	bl	8003db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2140      	movs	r1, #64	@ 0x40
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fc00 	bl	8003e74 <TIM_ITRx_SetConfig>
      break;
 8003674:	e00c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fbf7 	bl	8003e74 <TIM_ITRx_SetConfig>
      break;
 8003686:	e003      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e000      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800368e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	ffceff88 	.word	0xffceff88
 80036b0:	00100040 	.word	0x00100040
 80036b4:	00100030 	.word	0x00100030
 80036b8:	00100020 	.word	0x00100020

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a46      	ldr	r2, [pc, #280]	@ (80037e8 <TIM_Base_SetConfig+0x12c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036da:	d00f      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a43      	ldr	r2, [pc, #268]	@ (80037ec <TIM_Base_SetConfig+0x130>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a42      	ldr	r2, [pc, #264]	@ (80037f0 <TIM_Base_SetConfig+0x134>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a41      	ldr	r2, [pc, #260]	@ (80037f4 <TIM_Base_SetConfig+0x138>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a40      	ldr	r2, [pc, #256]	@ (80037f8 <TIM_Base_SetConfig+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a35      	ldr	r2, [pc, #212]	@ (80037e8 <TIM_Base_SetConfig+0x12c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01f      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371c:	d01b      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a32      	ldr	r2, [pc, #200]	@ (80037ec <TIM_Base_SetConfig+0x130>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d017      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a31      	ldr	r2, [pc, #196]	@ (80037f0 <TIM_Base_SetConfig+0x134>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a30      	ldr	r2, [pc, #192]	@ (80037f4 <TIM_Base_SetConfig+0x138>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <TIM_Base_SetConfig+0x13c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <TIM_Base_SetConfig+0x140>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2d      	ldr	r2, [pc, #180]	@ (8003800 <TIM_Base_SetConfig+0x144>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x9a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2c      	ldr	r2, [pc, #176]	@ (8003804 <TIM_Base_SetConfig+0x148>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a16      	ldr	r2, [pc, #88]	@ (80037e8 <TIM_Base_SetConfig+0x12c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0xf8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <TIM_Base_SetConfig+0x13c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0xf8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <TIM_Base_SetConfig+0x140>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0xf8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a16      	ldr	r2, [pc, #88]	@ (8003800 <TIM_Base_SetConfig+0x144>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0xf8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <TIM_Base_SetConfig+0x148>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 0201 	bic.w	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <TIM_OC1_SetConfig+0x108>)
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2d      	ldr	r2, [pc, #180]	@ (8003914 <TIM_OC1_SetConfig+0x10c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00f      	beq.n	8003884 <TIM_OC1_SetConfig+0x7c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <TIM_OC1_SetConfig+0x110>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_OC1_SetConfig+0x7c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2b      	ldr	r2, [pc, #172]	@ (800391c <TIM_OC1_SetConfig+0x114>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_OC1_SetConfig+0x7c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2a      	ldr	r2, [pc, #168]	@ (8003920 <TIM_OC1_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC1_SetConfig+0x7c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a29      	ldr	r2, [pc, #164]	@ (8003924 <TIM_OC1_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <TIM_OC1_SetConfig+0x10c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_OC1_SetConfig+0xbe>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <TIM_OC1_SetConfig+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_OC1_SetConfig+0xbe>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1a      	ldr	r2, [pc, #104]	@ (800391c <TIM_OC1_SetConfig+0x114>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_OC1_SetConfig+0xbe>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a19      	ldr	r2, [pc, #100]	@ (8003920 <TIM_OC1_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC1_SetConfig+0xbe>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <TIM_OC1_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d111      	bne.n	80038ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	fffeff8f 	.word	0xfffeff8f
 8003914:	40010000 	.word	0x40010000
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 0210 	bic.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4b34      	ldr	r3, [pc, #208]	@ (8003a24 <TIM_OC2_SetConfig+0xfc>)
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0320 	bic.w	r3, r3, #32
 8003972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <TIM_OC2_SetConfig+0x100>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC2_SetConfig+0x68>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a28      	ldr	r2, [pc, #160]	@ (8003a2c <TIM_OC2_SetConfig+0x104>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003a28 <TIM_OC2_SetConfig+0x100>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00f      	beq.n	80039d4 <TIM_OC2_SetConfig+0xac>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a2c <TIM_OC2_SetConfig+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_OC2_SetConfig+0xac>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <TIM_OC2_SetConfig+0x108>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC2_SetConfig+0xac>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <TIM_OC2_SetConfig+0x10c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0xac>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <TIM_OC2_SetConfig+0x110>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	feff8fff 	.word	0xfeff8fff
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <TIM_OC3_SetConfig+0xf8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0303 	bic.w	r3, r3, #3
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a28      	ldr	r2, [pc, #160]	@ (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC3_SetConfig+0x66>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10d      	bne.n	8003abe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <TIM_OC3_SetConfig+0x104>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b44 <TIM_OC3_SetConfig+0x108>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	@ (8003b48 <TIM_OC3_SetConfig+0x10c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	fffeff8f 	.word	0xfffeff8f
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40010400 	.word	0x40010400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <TIM_OC4_SetConfig+0xbc>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	@ (8003c0c <TIM_OC4_SetConfig+0xc0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_OC4_SetConfig+0x80>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <TIM_OC4_SetConfig+0xc4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_OC4_SetConfig+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <TIM_OC4_SetConfig+0xc8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_OC4_SetConfig+0x80>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <TIM_OC4_SetConfig+0xcc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC4_SetConfig+0x80>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <TIM_OC4_SetConfig+0xd0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d109      	bne.n	8003be0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	feff8fff 	.word	0xfeff8fff
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40010400 	.word	0x40010400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4b21      	ldr	r3, [pc, #132]	@ (8003cd0 <TIM_OC5_SetConfig+0xb0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	@ (8003cd4 <TIM_OC5_SetConfig+0xb4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_OC5_SetConfig+0x76>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a17      	ldr	r2, [pc, #92]	@ (8003cd8 <TIM_OC5_SetConfig+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_OC5_SetConfig+0x76>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a16      	ldr	r2, [pc, #88]	@ (8003cdc <TIM_OC5_SetConfig+0xbc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_OC5_SetConfig+0x76>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <TIM_OC5_SetConfig+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC5_SetConfig+0x76>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <TIM_OC5_SetConfig+0xc4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d109      	bne.n	8003caa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	fffeff8f 	.word	0xfffeff8f
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40010400 	.word	0x40010400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <TIM_OC6_SetConfig+0xb4>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	051b      	lsls	r3, r3, #20
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	@ (8003da0 <TIM_OC6_SetConfig+0xb8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_OC6_SetConfig+0x78>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <TIM_OC6_SetConfig+0xbc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_OC6_SetConfig+0x78>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <TIM_OC6_SetConfig+0xc0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_OC6_SetConfig+0x78>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <TIM_OC6_SetConfig+0xc4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC6_SetConfig+0x78>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <TIM_OC6_SetConfig+0xc8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d109      	bne.n	8003d74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	feff8fff 	.word	0xfeff8fff
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800

08003db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f023 030a 	bic.w	r3, r3, #10
 8003df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f023 0210 	bic.w	r2, r3, #16
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	031b      	lsls	r3, r3, #12
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <TIM_ITRx_SetConfig+0x38>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f043 0307 	orr.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	ffcfff8f 	.word	0xffcfff8f

08003eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	609a      	str	r2, [r3, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2201      	movs	r2, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e06d      	b.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a30      	ldr	r2, [pc, #192]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d01d      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10c      	bne.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	4313      	orrs	r3, r2
 8004014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40010000 	.word	0x40010000
 8004040:	40010400 	.word	0x40010400
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40001800 	.word	0x40001800
 8004054:	40014000 	.word	0x40014000

08004058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e042      	b.n	80040f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f83b 	bl	80040f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	@ 0x24
 8004086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fd9a 	bl	8004bdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f82f 	bl	800410c <UART_SetConfig>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e01b      	b.n	80040f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fe19 	bl	8004d20 <UART_CheckIdleState>
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004110:	b092      	sub	sp, #72	@ 0x48
 8004112:	af00      	add	r7, sp, #0
 8004114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4bbe      	ldr	r3, [pc, #760]	@ (8004434 <UART_SetConfig+0x328>)
 800413c:	4013      	ands	r3, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004144:	430b      	orrs	r3, r1
 8004146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4ab3      	ldr	r2, [pc, #716]	@ (8004438 <UART_SetConfig+0x32c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004174:	4313      	orrs	r3, r2
 8004176:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4baf      	ldr	r3, [pc, #700]	@ (800443c <UART_SetConfig+0x330>)
 8004180:	4013      	ands	r3, r2
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004188:	430b      	orrs	r3, r1
 800418a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	f023 010f 	bic.w	r1, r3, #15
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4aa6      	ldr	r2, [pc, #664]	@ (8004440 <UART_SetConfig+0x334>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d177      	bne.n	800429c <UART_SetConfig+0x190>
 80041ac:	4ba5      	ldr	r3, [pc, #660]	@ (8004444 <UART_SetConfig+0x338>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041b4:	2b28      	cmp	r3, #40	@ 0x28
 80041b6:	d86d      	bhi.n	8004294 <UART_SetConfig+0x188>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0xb4>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	08004265 	.word	0x08004265
 80041c4:	08004295 	.word	0x08004295
 80041c8:	08004295 	.word	0x08004295
 80041cc:	08004295 	.word	0x08004295
 80041d0:	08004295 	.word	0x08004295
 80041d4:	08004295 	.word	0x08004295
 80041d8:	08004295 	.word	0x08004295
 80041dc:	08004295 	.word	0x08004295
 80041e0:	0800426d 	.word	0x0800426d
 80041e4:	08004295 	.word	0x08004295
 80041e8:	08004295 	.word	0x08004295
 80041ec:	08004295 	.word	0x08004295
 80041f0:	08004295 	.word	0x08004295
 80041f4:	08004295 	.word	0x08004295
 80041f8:	08004295 	.word	0x08004295
 80041fc:	08004295 	.word	0x08004295
 8004200:	08004275 	.word	0x08004275
 8004204:	08004295 	.word	0x08004295
 8004208:	08004295 	.word	0x08004295
 800420c:	08004295 	.word	0x08004295
 8004210:	08004295 	.word	0x08004295
 8004214:	08004295 	.word	0x08004295
 8004218:	08004295 	.word	0x08004295
 800421c:	08004295 	.word	0x08004295
 8004220:	0800427d 	.word	0x0800427d
 8004224:	08004295 	.word	0x08004295
 8004228:	08004295 	.word	0x08004295
 800422c:	08004295 	.word	0x08004295
 8004230:	08004295 	.word	0x08004295
 8004234:	08004295 	.word	0x08004295
 8004238:	08004295 	.word	0x08004295
 800423c:	08004295 	.word	0x08004295
 8004240:	08004285 	.word	0x08004285
 8004244:	08004295 	.word	0x08004295
 8004248:	08004295 	.word	0x08004295
 800424c:	08004295 	.word	0x08004295
 8004250:	08004295 	.word	0x08004295
 8004254:	08004295 	.word	0x08004295
 8004258:	08004295 	.word	0x08004295
 800425c:	08004295 	.word	0x08004295
 8004260:	0800428d 	.word	0x0800428d
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800426a:	e222      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004272:	e21e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800427a:	e21a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004282:	e216      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004284:	2320      	movs	r3, #32
 8004286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800428a:	e212      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800428c:	2340      	movs	r3, #64	@ 0x40
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004292:	e20e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800429a:	e20a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a69      	ldr	r2, [pc, #420]	@ (8004448 <UART_SetConfig+0x33c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d130      	bne.n	8004308 <UART_SetConfig+0x1fc>
 80042a6:	4b67      	ldr	r3, [pc, #412]	@ (8004444 <UART_SetConfig+0x338>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d826      	bhi.n	8004300 <UART_SetConfig+0x1f4>
 80042b2:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <UART_SetConfig+0x1ac>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042d1 	.word	0x080042d1
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	080042e1 	.word	0x080042e1
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042d6:	e1ec      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042de:	e1e8      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042e6:	e1e4      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ee:	e1e0      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80042f0:	2320      	movs	r3, #32
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f6:	e1dc      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80042f8:	2340      	movs	r3, #64	@ 0x40
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fe:	e1d8      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004306:	e1d4      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4f      	ldr	r2, [pc, #316]	@ (800444c <UART_SetConfig+0x340>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d130      	bne.n	8004374 <UART_SetConfig+0x268>
 8004312:	4b4c      	ldr	r3, [pc, #304]	@ (8004444 <UART_SetConfig+0x338>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	2b05      	cmp	r3, #5
 800431c:	d826      	bhi.n	800436c <UART_SetConfig+0x260>
 800431e:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x218>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	0800433d 	.word	0x0800433d
 8004328:	08004345 	.word	0x08004345
 800432c:	0800434d 	.word	0x0800434d
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004342:	e1b6      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800434a:	e1b2      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004352:	e1ae      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435a:	e1aa      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e1a6      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004364:	2340      	movs	r3, #64	@ 0x40
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436a:	e1a2      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800436c:	2380      	movs	r3, #128	@ 0x80
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004372:	e19e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a35      	ldr	r2, [pc, #212]	@ (8004450 <UART_SetConfig+0x344>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x2d4>
 800437e:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <UART_SetConfig+0x338>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x2cc>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0x284>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ae:	e180      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b6:	e17c      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043be:	e178      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e174      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e170      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043d0:	2340      	movs	r3, #64	@ 0x40
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e16c      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e168      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004454 <UART_SetConfig+0x348>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d142      	bne.n	8004470 <UART_SetConfig+0x364>
 80043ea:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <UART_SetConfig+0x338>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d838      	bhi.n	8004468 <UART_SetConfig+0x35c>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <UART_SetConfig+0x2f0>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004459 	.word	0x08004459
 8004410:	08004461 	.word	0x08004461
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e14a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004422:	e146      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442a:	e142      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e13e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004434:	cfff69f3 	.word	0xcfff69f3
 8004438:	58000c00 	.word	0x58000c00
 800443c:	11fff4ff 	.word	0x11fff4ff
 8004440:	40011000 	.word	0x40011000
 8004444:	58024400 	.word	0x58024400
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	2320      	movs	r3, #32
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445e:	e128      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004460:	2340      	movs	r3, #64	@ 0x40
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004466:	e124      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446e:	e120      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4acb      	ldr	r2, [pc, #812]	@ (80047a4 <UART_SetConfig+0x698>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d176      	bne.n	8004568 <UART_SetConfig+0x45c>
 800447a:	4bcb      	ldr	r3, [pc, #812]	@ (80047a8 <UART_SetConfig+0x69c>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004482:	2b28      	cmp	r3, #40	@ 0x28
 8004484:	d86c      	bhi.n	8004560 <UART_SetConfig+0x454>
 8004486:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <UART_SetConfig+0x380>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	08004531 	.word	0x08004531
 8004490:	08004561 	.word	0x08004561
 8004494:	08004561 	.word	0x08004561
 8004498:	08004561 	.word	0x08004561
 800449c:	08004561 	.word	0x08004561
 80044a0:	08004561 	.word	0x08004561
 80044a4:	08004561 	.word	0x08004561
 80044a8:	08004561 	.word	0x08004561
 80044ac:	08004539 	.word	0x08004539
 80044b0:	08004561 	.word	0x08004561
 80044b4:	08004561 	.word	0x08004561
 80044b8:	08004561 	.word	0x08004561
 80044bc:	08004561 	.word	0x08004561
 80044c0:	08004561 	.word	0x08004561
 80044c4:	08004561 	.word	0x08004561
 80044c8:	08004561 	.word	0x08004561
 80044cc:	08004541 	.word	0x08004541
 80044d0:	08004561 	.word	0x08004561
 80044d4:	08004561 	.word	0x08004561
 80044d8:	08004561 	.word	0x08004561
 80044dc:	08004561 	.word	0x08004561
 80044e0:	08004561 	.word	0x08004561
 80044e4:	08004561 	.word	0x08004561
 80044e8:	08004561 	.word	0x08004561
 80044ec:	08004549 	.word	0x08004549
 80044f0:	08004561 	.word	0x08004561
 80044f4:	08004561 	.word	0x08004561
 80044f8:	08004561 	.word	0x08004561
 80044fc:	08004561 	.word	0x08004561
 8004500:	08004561 	.word	0x08004561
 8004504:	08004561 	.word	0x08004561
 8004508:	08004561 	.word	0x08004561
 800450c:	08004551 	.word	0x08004551
 8004510:	08004561 	.word	0x08004561
 8004514:	08004561 	.word	0x08004561
 8004518:	08004561 	.word	0x08004561
 800451c:	08004561 	.word	0x08004561
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
 8004528:	08004561 	.word	0x08004561
 800452c:	08004559 	.word	0x08004559
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e0bc      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e0b8      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004546:	e0b4      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454e:	e0b0      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004550:	2320      	movs	r3, #32
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004556:	e0ac      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004558:	2340      	movs	r3, #64	@ 0x40
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	e0a8      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004566:	e0a4      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a8f      	ldr	r2, [pc, #572]	@ (80047ac <UART_SetConfig+0x6a0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d130      	bne.n	80045d4 <UART_SetConfig+0x4c8>
 8004572:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <UART_SetConfig+0x69c>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b05      	cmp	r3, #5
 800457c:	d826      	bhi.n	80045cc <UART_SetConfig+0x4c0>
 800457e:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0x478>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	0800459d 	.word	0x0800459d
 8004588:	080045a5 	.word	0x080045a5
 800458c:	080045ad 	.word	0x080045ad
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	2300      	movs	r3, #0
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e086      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e082      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b2:	e07e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e07a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045bc:	2320      	movs	r3, #32
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e076      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045c4:	2340      	movs	r3, #64	@ 0x40
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e072      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e06e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a75      	ldr	r2, [pc, #468]	@ (80047b0 <UART_SetConfig+0x6a4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d130      	bne.n	8004640 <UART_SetConfig+0x534>
 80045de:	4b72      	ldr	r3, [pc, #456]	@ (80047a8 <UART_SetConfig+0x69c>)
 80045e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d826      	bhi.n	8004638 <UART_SetConfig+0x52c>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <UART_SetConfig+0x4e4>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004609 	.word	0x08004609
 80045f4:	08004611 	.word	0x08004611
 80045f8:	08004619 	.word	0x08004619
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e050      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e04c      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461e:	e048      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e044      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004628:	2320      	movs	r3, #32
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e040      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004630:	2340      	movs	r3, #64	@ 0x40
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e03c      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e038      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5b      	ldr	r2, [pc, #364]	@ (80047b4 <UART_SetConfig+0x6a8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d130      	bne.n	80046ac <UART_SetConfig+0x5a0>
 800464a:	4b57      	ldr	r3, [pc, #348]	@ (80047a8 <UART_SetConfig+0x69c>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b05      	cmp	r3, #5
 8004654:	d826      	bhi.n	80046a4 <UART_SetConfig+0x598>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <UART_SetConfig+0x550>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004675 	.word	0x08004675
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004685 	.word	0x08004685
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	2302      	movs	r3, #2
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e01a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e016      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e012      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e00e      	b.n	80046b2 <UART_SetConfig+0x5a6>
 8004694:	2320      	movs	r3, #32
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e00a      	b.n	80046b2 <UART_SetConfig+0x5a6>
 800469c:	2340      	movs	r3, #64	@ 0x40
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e006      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e002      	b.n	80046b2 <UART_SetConfig+0x5a6>
 80046ac:	2380      	movs	r3, #128	@ 0x80
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a3f      	ldr	r2, [pc, #252]	@ (80047b4 <UART_SetConfig+0x6a8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	f040 80f8 	bne.w	80048ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	dc46      	bgt.n	8004754 <UART_SetConfig+0x648>
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	f2c0 8082 	blt.w	80047d0 <UART_SetConfig+0x6c4>
 80046cc:	3b02      	subs	r3, #2
 80046ce:	2b1e      	cmp	r3, #30
 80046d0:	d87e      	bhi.n	80047d0 <UART_SetConfig+0x6c4>
 80046d2:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <UART_SetConfig+0x5cc>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800475b 	.word	0x0800475b
 80046dc:	080047d1 	.word	0x080047d1
 80046e0:	08004763 	.word	0x08004763
 80046e4:	080047d1 	.word	0x080047d1
 80046e8:	080047d1 	.word	0x080047d1
 80046ec:	080047d1 	.word	0x080047d1
 80046f0:	08004773 	.word	0x08004773
 80046f4:	080047d1 	.word	0x080047d1
 80046f8:	080047d1 	.word	0x080047d1
 80046fc:	080047d1 	.word	0x080047d1
 8004700:	080047d1 	.word	0x080047d1
 8004704:	080047d1 	.word	0x080047d1
 8004708:	080047d1 	.word	0x080047d1
 800470c:	080047d1 	.word	0x080047d1
 8004710:	08004783 	.word	0x08004783
 8004714:	080047d1 	.word	0x080047d1
 8004718:	080047d1 	.word	0x080047d1
 800471c:	080047d1 	.word	0x080047d1
 8004720:	080047d1 	.word	0x080047d1
 8004724:	080047d1 	.word	0x080047d1
 8004728:	080047d1 	.word	0x080047d1
 800472c:	080047d1 	.word	0x080047d1
 8004730:	080047d1 	.word	0x080047d1
 8004734:	080047d1 	.word	0x080047d1
 8004738:	080047d1 	.word	0x080047d1
 800473c:	080047d1 	.word	0x080047d1
 8004740:	080047d1 	.word	0x080047d1
 8004744:	080047d1 	.word	0x080047d1
 8004748:	080047d1 	.word	0x080047d1
 800474c:	080047d1 	.word	0x080047d1
 8004750:	080047c3 	.word	0x080047c3
 8004754:	2b40      	cmp	r3, #64	@ 0x40
 8004756:	d037      	beq.n	80047c8 <UART_SetConfig+0x6bc>
 8004758:	e03a      	b.n	80047d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800475a:	f7fe f91f 	bl	800299c <HAL_RCCEx_GetD3PCLK1Freq>
 800475e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004760:	e03c      	b.n	80047dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe f92e 	bl	80029c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004770:	e034      	b.n	80047dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004772:	f107 0318 	add.w	r3, r7, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fa7a 	bl	8002c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004780:	e02c      	b.n	80047dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <UART_SetConfig+0x69c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <UART_SetConfig+0x69c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	08db      	lsrs	r3, r3, #3
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	4a07      	ldr	r2, [pc, #28]	@ (80047b8 <UART_SetConfig+0x6ac>)
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047a0:	e01c      	b.n	80047dc <UART_SetConfig+0x6d0>
 80047a2:	bf00      	nop
 80047a4:	40011400 	.word	0x40011400
 80047a8:	58024400 	.word	0x58024400
 80047ac:	40007800 	.word	0x40007800
 80047b0:	40007c00 	.word	0x40007c00
 80047b4:	58000c00 	.word	0x58000c00
 80047b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004a34 <UART_SetConfig+0x928>)
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047c0:	e00c      	b.n	80047dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047c2:	4b9d      	ldr	r3, [pc, #628]	@ (8004a38 <UART_SetConfig+0x92c>)
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047c6:	e009      	b.n	80047dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047ce:	e005      	b.n	80047dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80047da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 81de 	beq.w	8004ba0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	4a94      	ldr	r2, [pc, #592]	@ (8004a3c <UART_SetConfig+0x930>)
 80047ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004804:	429a      	cmp	r2, r3
 8004806:	d305      	bcc.n	8004814 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004810:	429a      	cmp	r2, r3
 8004812:	d903      	bls.n	800481c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800481a:	e1c1      	b.n	8004ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800481c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481e:	2200      	movs	r2, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	60fa      	str	r2, [r7, #12]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	4a84      	ldr	r2, [pc, #528]	@ (8004a3c <UART_SetConfig+0x930>)
 800482a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2200      	movs	r2, #0
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800483a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483e:	f7fb fd4b 	bl	80002d8 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	020b      	lsls	r3, r1, #8
 8004854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004858:	0202      	lsls	r2, r0, #8
 800485a:	6979      	ldr	r1, [r7, #20]
 800485c:	6849      	ldr	r1, [r1, #4]
 800485e:	0849      	lsrs	r1, r1, #1
 8004860:	2000      	movs	r0, #0
 8004862:	460c      	mov	r4, r1
 8004864:	4605      	mov	r5, r0
 8004866:	eb12 0804 	adds.w	r8, r2, r4
 800486a:	eb43 0905 	adc.w	r9, r3, r5
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	469a      	mov	sl, r3
 8004876:	4693      	mov	fp, r2
 8004878:	4652      	mov	r2, sl
 800487a:	465b      	mov	r3, fp
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fb fd2a 	bl	80002d8 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4613      	mov	r3, r2
 800488a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004892:	d308      	bcc.n	80048a6 <UART_SetConfig+0x79a>
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489a:	d204      	bcs.n	80048a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048a2:	60da      	str	r2, [r3, #12]
 80048a4:	e17c      	b.n	8004ba0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048ac:	e178      	b.n	8004ba0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b6:	f040 80c5 	bne.w	8004a44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80048ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048be:	2b20      	cmp	r3, #32
 80048c0:	dc48      	bgt.n	8004954 <UART_SetConfig+0x848>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	db7b      	blt.n	80049be <UART_SetConfig+0x8b2>
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d879      	bhi.n	80049be <UART_SetConfig+0x8b2>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0x7c4>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	0800495b 	.word	0x0800495b
 80048d4:	08004963 	.word	0x08004963
 80048d8:	080049bf 	.word	0x080049bf
 80048dc:	080049bf 	.word	0x080049bf
 80048e0:	0800496b 	.word	0x0800496b
 80048e4:	080049bf 	.word	0x080049bf
 80048e8:	080049bf 	.word	0x080049bf
 80048ec:	080049bf 	.word	0x080049bf
 80048f0:	0800497b 	.word	0x0800497b
 80048f4:	080049bf 	.word	0x080049bf
 80048f8:	080049bf 	.word	0x080049bf
 80048fc:	080049bf 	.word	0x080049bf
 8004900:	080049bf 	.word	0x080049bf
 8004904:	080049bf 	.word	0x080049bf
 8004908:	080049bf 	.word	0x080049bf
 800490c:	080049bf 	.word	0x080049bf
 8004910:	0800498b 	.word	0x0800498b
 8004914:	080049bf 	.word	0x080049bf
 8004918:	080049bf 	.word	0x080049bf
 800491c:	080049bf 	.word	0x080049bf
 8004920:	080049bf 	.word	0x080049bf
 8004924:	080049bf 	.word	0x080049bf
 8004928:	080049bf 	.word	0x080049bf
 800492c:	080049bf 	.word	0x080049bf
 8004930:	080049bf 	.word	0x080049bf
 8004934:	080049bf 	.word	0x080049bf
 8004938:	080049bf 	.word	0x080049bf
 800493c:	080049bf 	.word	0x080049bf
 8004940:	080049bf 	.word	0x080049bf
 8004944:	080049bf 	.word	0x080049bf
 8004948:	080049bf 	.word	0x080049bf
 800494c:	080049bf 	.word	0x080049bf
 8004950:	080049b1 	.word	0x080049b1
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	d02e      	beq.n	80049b6 <UART_SetConfig+0x8aa>
 8004958:	e031      	b.n	80049be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495a:	f7fd fff3 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 800495e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004960:	e033      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004962:	f7fe f805 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8004966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004968:	e02f      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe f82a 	bl	80029c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004978:	e027      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497a:	f107 0318 	add.w	r3, r7, #24
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe f976 	bl	8002c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004988:	e01f      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a40 <UART_SetConfig+0x934>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004996:	4b2a      	ldr	r3, [pc, #168]	@ (8004a40 <UART_SetConfig+0x934>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	4a24      	ldr	r2, [pc, #144]	@ (8004a34 <UART_SetConfig+0x928>)
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049a8:	e00f      	b.n	80049ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80049aa:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <UART_SetConfig+0x928>)
 80049ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049ae:	e00c      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049b0:	4b21      	ldr	r3, [pc, #132]	@ (8004a38 <UART_SetConfig+0x92c>)
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80049c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80e7 	beq.w	8004ba0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	4a19      	ldr	r2, [pc, #100]	@ (8004a3c <UART_SetConfig+0x930>)
 80049d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049dc:	461a      	mov	r2, r3
 80049de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e4:	005a      	lsls	r2, r3, #1
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	441a      	add	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d916      	bls.n	8004a2c <UART_SetConfig+0x920>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d212      	bcs.n	8004a2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f023 030f 	bic.w	r3, r3, #15
 8004a0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e0b9      	b.n	8004ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a32:	e0b5      	b.n	8004ba0 <UART_SetConfig+0xa94>
 8004a34:	03d09000 	.word	0x03d09000
 8004a38:	003d0900 	.word	0x003d0900
 8004a3c:	080050a8 	.word	0x080050a8
 8004a40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	dc49      	bgt.n	8004ae0 <UART_SetConfig+0x9d4>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db7c      	blt.n	8004b4a <UART_SetConfig+0xa3e>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d87a      	bhi.n	8004b4a <UART_SetConfig+0xa3e>
 8004a54:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <UART_SetConfig+0x950>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004ae7 	.word	0x08004ae7
 8004a60:	08004aef 	.word	0x08004aef
 8004a64:	08004b4b 	.word	0x08004b4b
 8004a68:	08004b4b 	.word	0x08004b4b
 8004a6c:	08004af7 	.word	0x08004af7
 8004a70:	08004b4b 	.word	0x08004b4b
 8004a74:	08004b4b 	.word	0x08004b4b
 8004a78:	08004b4b 	.word	0x08004b4b
 8004a7c:	08004b07 	.word	0x08004b07
 8004a80:	08004b4b 	.word	0x08004b4b
 8004a84:	08004b4b 	.word	0x08004b4b
 8004a88:	08004b4b 	.word	0x08004b4b
 8004a8c:	08004b4b 	.word	0x08004b4b
 8004a90:	08004b4b 	.word	0x08004b4b
 8004a94:	08004b4b 	.word	0x08004b4b
 8004a98:	08004b4b 	.word	0x08004b4b
 8004a9c:	08004b17 	.word	0x08004b17
 8004aa0:	08004b4b 	.word	0x08004b4b
 8004aa4:	08004b4b 	.word	0x08004b4b
 8004aa8:	08004b4b 	.word	0x08004b4b
 8004aac:	08004b4b 	.word	0x08004b4b
 8004ab0:	08004b4b 	.word	0x08004b4b
 8004ab4:	08004b4b 	.word	0x08004b4b
 8004ab8:	08004b4b 	.word	0x08004b4b
 8004abc:	08004b4b 	.word	0x08004b4b
 8004ac0:	08004b4b 	.word	0x08004b4b
 8004ac4:	08004b4b 	.word	0x08004b4b
 8004ac8:	08004b4b 	.word	0x08004b4b
 8004acc:	08004b4b 	.word	0x08004b4b
 8004ad0:	08004b4b 	.word	0x08004b4b
 8004ad4:	08004b4b 	.word	0x08004b4b
 8004ad8:	08004b4b 	.word	0x08004b4b
 8004adc:	08004b3d 	.word	0x08004b3d
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d02e      	beq.n	8004b42 <UART_SetConfig+0xa36>
 8004ae4:	e031      	b.n	8004b4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7fd ff2d 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 8004aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004aec:	e033      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aee:	f7fd ff3f 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8004af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004af4:	e02f      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd ff64 	bl	80029c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b04:	e027      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b06:	f107 0318 	add.w	r3, r7, #24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe f8b0 	bl	8002c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b14:	e01f      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b16:	4b2d      	ldr	r3, [pc, #180]	@ (8004bcc <UART_SetConfig+0xac0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b22:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <UART_SetConfig+0xac0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	4a28      	ldr	r2, [pc, #160]	@ (8004bd0 <UART_SetConfig+0xac4>)
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b34:	e00f      	b.n	8004b56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004b36:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <UART_SetConfig+0xac4>)
 8004b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b3a:	e00c      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <UART_SetConfig+0xac8>)
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b40:	e009      	b.n	8004b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b48:	e005      	b.n	8004b56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b54:	bf00      	nop
    }

    if (pclk != 0U)
 8004b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d021      	beq.n	8004ba0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <UART_SetConfig+0xacc>)
 8004b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d909      	bls.n	8004b9a <UART_SetConfig+0xa8e>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d205      	bcs.n	8004b9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
 8004b98:	e002      	b.n	8004ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bbc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3748      	adds	r7, #72	@ 0x48
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	03d09000 	.word	0x03d09000
 8004bd4:	003d0900 	.word	0x003d0900
 8004bd8:	080050a8 	.word	0x080050a8

08004bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cda:	d10a      	bne.n	8004cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b098      	sub	sp, #96	@ 0x60
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d30:	f7fc fa2c 	bl	800118c <HAL_GetTick>
 8004d34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d12f      	bne.n	8004da4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f88e 	bl	8004e74 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d022      	beq.n	8004da4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e6      	bne.n	8004d5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e063      	b.n	8004e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d149      	bne.n	8004e46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f857 	bl	8004e74 <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e6      	bne.n	8004dcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1e:	61fa      	str	r2, [r7, #28]
 8004e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e012      	b.n	8004e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3758      	adds	r7, #88	@ 0x58
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e84:	e04f      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d04b      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fc f97d 	bl	800118c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e04e      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d037      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b80      	cmp	r3, #128	@ 0x80
 8004eba:	d034      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d031      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d110      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f839 	bl	8004f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e029      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f00:	d111      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f81f 	bl	8004f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00f      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d0a0      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b095      	sub	sp, #84	@ 0x54
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <UART_EndRxTransfer+0xc8>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d118      	bne.n	8004ff8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0310 	bic.w	r3, r3, #16
 8004fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800500c:	bf00      	nop
 800500e:	3754      	adds	r7, #84	@ 0x54
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	effffffe 	.word	0xeffffffe

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4d0d      	ldr	r5, [pc, #52]	@ (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	@ (8005068 <__libc_init_array+0x3c>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2600      	movs	r6, #0
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4d0b      	ldr	r5, [pc, #44]	@ (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	@ (8005070 <__libc_init_array+0x44>)
 8005040:	f000 f818 	bl	8005074 <_init>
 8005044:	1b64      	subs	r4, r4, r5
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2600      	movs	r6, #0
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	080050c8 	.word	0x080050c8
 8005068:	080050c8 	.word	0x080050c8
 800506c:	080050c8 	.word	0x080050c8
 8005070:	080050cc 	.word	0x080050cc

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
