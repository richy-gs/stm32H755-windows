
stm32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d0  080063d0  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d8  080063d8  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000073d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080063e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  080063f0  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  080063f0  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013121  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217c  00000000  00000000  0001b15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  0001e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a06f  00000000  00000000  0001edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001368a  00000000  00000000  00058e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185b6a  00000000  00000000  0006c4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f205c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  001f20a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f613c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006380 	.word	0x08006380

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006380 	.word	0x08006380

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <Motor_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Motor_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <Motor_Init+0x24>)
 80006fc:	f003 ff74 	bl	80045e8 <HAL_TIM_PWM_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <Motor_Init+0x16>
	  {
	  	  Error_Handler();
 8000706:	f000 fb11 	bl	8000d2c <Error_Handler>
	  }
	  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 1500);
 800070a:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <Motor_Init+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000078 	.word	0x24000078

0800071c <Servo_Init>:
{
   Motor_SetSpeed2(0,1000);
}

void Servo_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <Servo_Init+0x24>)
 8000724:	f003 ff60 	bl	80045e8 <HAL_TIM_PWM_Start>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <Servo_Init+0x16>
	  {
		  Error_Handler();
 800072e:	f000 fafd 	bl	8000d2c <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, 1500);
 8000732:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <Servo_Init+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2400002c 	.word	0x2400002c

08000744 <Servo_SetAngle>:

// Function to set the servo position (angle)
void Servo_SetAngle(int angle)		// Angle betweeen
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	const uint32_t change = 10;
 800074c:	230a      	movs	r3, #10
 800074e:	613b      	str	r3, [r7, #16]
	uint32_t delay = 10;
 8000750:	230a      	movs	r3, #10
 8000752:	60fb      	str	r3, [r7, #12]
	uint32_t x = TIM13->CCR1;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <Servo_SetAngle+0x88>)
 8000756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000758:	617b      	str	r3, [r7, #20]


	if(angle > 60) angle = 60;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b3c      	cmp	r3, #60	@ 0x3c
 800075e:	dd02      	ble.n	8000766 <Servo_SetAngle+0x22>
 8000760:	233c      	movs	r3, #60	@ 0x3c
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	e006      	b.n	8000774 <Servo_SetAngle+0x30>
	else if (angle < -50) angle = -50;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 800076c:	da02      	bge.n	8000774 <Servo_SetAngle+0x30>
 800076e:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8000772:	607b      	str	r3, [r7, #4]

	int newAngle = 1500 + (angle*9);
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000780:	60bb      	str	r3, [r7, #8]

	while(abs(newAngle - x) > 10)
 8000782:	e016      	b.n	80007b2 <Servo_SetAngle+0x6e>
	{
		if (newAngle > x) x = x + change;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	429a      	cmp	r2, r3
 800078a:	d204      	bcs.n	8000796 <Servo_SetAngle+0x52>
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4413      	add	r3, r2
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e007      	b.n	80007a6 <Servo_SetAngle+0x62>
		else if (newAngle < x) x = x - change;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	429a      	cmp	r2, r3
 800079c:	d903      	bls.n	80007a6 <Servo_SetAngle+0x62>
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]

		TIM13->CCR1 = (uint32_t) x;
 80007a6:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <Servo_SetAngle+0x88>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(delay);
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f000 fcd1 	bl	8001154 <HAL_Delay>
	while(abs(newAngle - x) > 10)
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bfb8      	it	lt
 80007bc:	425b      	neglt	r3, r3
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	dce0      	bgt.n	8000784 <Servo_SetAngle+0x40>
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40001c00 	.word	0x40001c00

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007da:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007dc:	bf00      	nop
 80007de:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <main+0xdc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <main+0x24>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dcf4      	bgt.n	80007de <main+0xe>
  if ( timeout < 0 )
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <main+0x2e>
  {
  Error_Handler();
 80007fa:	f000 fa97 	bl	8000d2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fc17 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f857 	bl	80008b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0xdc>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	4a27      	ldr	r2, [pc, #156]	@ (80008ac <main+0xdc>)
 800080e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <main+0xdc>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ff8d 	bl	8001744 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f000 ffa3 	bl	8001778 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000836:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000838:	bf00      	nop
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <main+0xdc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <main+0x80>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dcf4      	bgt.n	800083a <main+0x6a>
if ( timeout < 0 )
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da01      	bge.n	800085a <main+0x8a>
{
Error_Handler();
 8000856:	f000 fa69 	bl	8000d2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f98d 	bl	8000b78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800085e:	f000 f93f 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000862:	f000 f8ef 	bl	8000a44 <MX_TIM14_Init>
  MX_TIM13_Init();
 8000866:	f000 f89f 	bl	80009a8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 800086a:	f7ff ff57 	bl	800071c <Servo_Init>
  Motor_Init();
 800086e:	f7ff ff41 	bl	80006f4 <Motor_Init>
  HAL_Delay(1500);
 8000872:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000876:	f000 fc6d 	bl	8001154 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Servo_SetAngle(60);
 800087a:	203c      	movs	r0, #60	@ 0x3c
 800087c:	f7ff ff62 	bl	8000744 <Servo_SetAngle>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000880:	2101      	movs	r1, #1
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <main+0xe0>)
 8000884:	f000 ff43 	bl	800170e <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 8000888:	f241 3088 	movw	r0, #5000	@ 0x1388
 800088c:	f000 fc62 	bl	8001154 <HAL_Delay>
	  Servo_SetAngle(-50);
 8000890:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8000894:	f7ff ff56 	bl	8000744 <Servo_SetAngle>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000898:	2101      	movs	r1, #1
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <main+0xe0>)
 800089c:	f000 ff37 	bl	800170e <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 80008a0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008a4:	f000 fc56 	bl	8001154 <HAL_Delay>
	  Servo_SetAngle(60);
 80008a8:	bf00      	nop
 80008aa:	e7e6      	b.n	800087a <main+0xaa>
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020400 	.word	0x58020400

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	@ 0x70
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fd30 	bl	8006328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fd2a 	bl	8006328 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f000 ff63 	bl	80017a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <SystemClock_Config+0xec>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a2f      	ldr	r2, [pc, #188]	@ (80009a0 <SystemClock_Config+0xec>)
 80008e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <SystemClock_Config+0xec>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <SystemClock_Config+0xf0>)
 80008f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f8:	4a2a      	ldr	r2, [pc, #168]	@ (80009a4 <SystemClock_Config+0xf0>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000900:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <SystemClock_Config+0xf0>)
 8000902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <SystemClock_Config+0xec>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000932:	23f0      	movs	r3, #240	@ 0xf0
 8000934:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800093a:	2305      	movs	r3, #5
 800093c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000942:	2308      	movs	r3, #8
 8000944:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
 8000948:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ff7e 	bl	8001854 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095e:	f000 f9e5 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	233f      	movs	r3, #63	@ 0x3f
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2303      	movs	r3, #3
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800096e:	2308      	movs	r3, #8
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000972:	2340      	movs	r3, #64	@ 0x40
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000980:	2340      	movs	r3, #64	@ 0x40
 8000982:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2104      	movs	r1, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fbbd 	bl	8002108 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000994:	f000 f9ca 	bl	8000d2c <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3770      	adds	r7, #112	@ 0x70
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	58024800 	.word	0x58024800
 80009a4:	58000400 	.word	0x58000400

080009a8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]
 80009be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <MX_TIM13_Init+0x98>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009c8:	22ef      	movs	r2, #239	@ 0xef
 80009ca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009d8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009e6:	4815      	ldr	r0, [pc, #84]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009e8:	f003 fd46 	bl	8004478 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009f2:	f000 f99b 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009f6:	4811      	ldr	r0, [pc, #68]	@ (8000a3c <MX_TIM13_Init+0x94>)
 80009f8:	f003 fd95 	bl	8004526 <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 f993 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	@ 0x60
 8000a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a0a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM13_Init+0x94>)
 8000a20:	f003 fef0 	bl	8004804 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000a2a:	f000 f97f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM13_Init+0x94>)
 8000a30:	f000 f9d6 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2400002c 	.word	0x2400002c
 8000a40:	40001c00 	.word	0x40001c00

08000a44 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000adc <MX_TIM14_Init+0x98>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a64:	22ef      	movs	r2, #239	@ 0xef
 8000a66:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a70:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a74:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a82:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a84:	f003 fcf8 	bl	8004478 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a8e:	f000 f94d 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a92:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000a94:	f003 fd47 	bl	8004526 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a9e:	f000 f945 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2360      	movs	r3, #96	@ 0x60
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000aa6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000abc:	f003 fea2 	bl	8004804 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000ac6:	f000 f931 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <MX_TIM14_Init+0x94>)
 8000acc:	f000 f988 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000078 	.word	0x24000078
 8000adc:	40002000 	.word	0x40002000

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <MX_USART3_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000aec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b2a:	f004 fb20 	bl	800516e <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f8fa 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b3c:	f005 fb29 	bl	8006192 <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f000 f8f1 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f005 fb5e 	bl	800620e <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f000 f8e8 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f005 fadf 	bl	8006120 <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f8e0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240000c4 	.word	0x240000c4
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b62      	ldr	r3, [pc, #392]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a60      	ldr	r2, [pc, #384]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	4b5a      	ldr	r3, [pc, #360]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a59      	ldr	r2, [pc, #356]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b56      	ldr	r3, [pc, #344]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a51      	ldr	r2, [pc, #324]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b4f      	ldr	r3, [pc, #316]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a4a      	ldr	r2, [pc, #296]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b47      	ldr	r3, [pc, #284]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b44      	ldr	r3, [pc, #272]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	4a42      	ldr	r2, [pc, #264]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c16:	4b40      	ldr	r3, [pc, #256]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c24:	4b3c      	ldr	r3, [pc, #240]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <MX_GPIO_Init+0x1a0>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2101      	movs	r1, #1
 8000c46:	4835      	ldr	r0, [pc, #212]	@ (8000d1c <MX_GPIO_Init+0x1a4>)
 8000c48:	f000 fd48 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c4c:	2332      	movs	r3, #50	@ 0x32
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	482e      	ldr	r0, [pc, #184]	@ (8000d20 <MX_GPIO_Init+0x1a8>)
 8000c68:	f000 fb88 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c6c:	2386      	movs	r3, #134	@ 0x86
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4827      	ldr	r0, [pc, #156]	@ (8000d24 <MX_GPIO_Init+0x1ac>)
 8000c88:	f000 fb78 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481e      	ldr	r0, [pc, #120]	@ (8000d1c <MX_GPIO_Init+0x1a4>)
 8000ca4:	f000 fb6a 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4815      	ldr	r0, [pc, #84]	@ (8000d1c <MX_GPIO_Init+0x1a4>)
 8000cc6:	f000 fb59 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cca:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480f      	ldr	r0, [pc, #60]	@ (8000d24 <MX_GPIO_Init+0x1ac>)
 8000ce8:	f000 fb48 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfe:	230b      	movs	r3, #11
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_GPIO_Init+0x1b0>)
 8000d0a:	f000 fb37 	bl	800137c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3730      	adds	r7, #48	@ 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	58020800 	.word	0x58020800
 8000d24:	58020000 	.word	0x58020000
 8000d28:	58021800 	.word	0x58021800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_MspInit+0x30>)
 8000d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d44:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <HAL_MspInit+0x30>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	58024400 	.word	0x58024400

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a16      	ldr	r2, [pc, #88]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x68>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10f      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d9c:	e013      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <HAL_TIM_Base_MspInit+0x70>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d10e      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40001c00 	.word	0x40001c00
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	40002000 	.word	0x40002000

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a26      	ldr	r2, [pc, #152]	@ (8000e98 <HAL_TIM_MspPostInit+0xb8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d120      	bne.n	8000e44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a24      	ldr	r2, [pc, #144]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000e32:	2309      	movs	r3, #9
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <HAL_TIM_MspPostInit+0xc0>)
 8000e3e:	f000 fa9d 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000e42:	e024      	b.n	8000e8e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a16      	ldr	r2, [pc, #88]	@ (8000ea4 <HAL_TIM_MspPostInit+0xc4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d11f      	bne.n	8000e8e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e56:	f043 0320 	orr.w	r3, r3, #32
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_TIM_MspPostInit+0xbc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8000e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_TIM_MspPostInit+0xc0>)
 8000e8a:	f000 fa77 	bl	800137c <HAL_GPIO_Init>
}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001c00 	.word	0x40001c00
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	40002000 	.word	0x40002000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0ba      	sub	sp, #232	@ 0xe8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	22c0      	movs	r2, #192	@ 0xc0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fa2d 	bl	8006328 <memset>
  if(huart->Instance==USART3)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a27      	ldr	r2, [pc, #156]	@ (8000f70 <HAL_UART_MspInit+0xc8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d146      	bne.n	8000f66 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed8:	f04f 0202 	mov.w	r2, #2
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fc96 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000efa:	f7ff ff17 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f04:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RT_Pin|STLINK_TX_Pin;
 8000f3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f54:	2307      	movs	r3, #7
 8000f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_UART_MspInit+0xd0>)
 8000f62:	f000 fa0b 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f66:	bf00      	nop
 8000f68:	37e8      	adds	r7, #232	@ 0xe8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40004800 	.word	0x40004800
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020c00 	.word	0x58020c00

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <NMI_Handler+0x4>

08000f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 f89f 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001014 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff faf2 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f005 f995 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100e:	f7ff fbdf 	bl	80007d0 <main>
  bx  lr
 8001012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001018:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800101c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001020:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 8001024:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001028:	2400015c 	.word	0x2400015c

0800102c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC3_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f96e 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800103c:	f001 fa1a 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_Init+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	4913      	ldr	r1, [pc, #76]	@ (800109c <HAL_Init+0x6c>)
 800104e:	5ccb      	ldrb	r3, [r1, r3]
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_Init+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_Init+0x6c>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <HAL_Init+0x70>)
 8001072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <HAL_Init+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f814 	bl	80010a8 <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e002      	b.n	8001090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800108a:	f7ff fe55 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58024400 	.word	0x58024400
 800109c:	08006398 	.word	0x08006398
 80010a0:	24000004 	.word	0x24000004
 80010a4:	24000000 	.word	0x24000000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_InitTick+0x60>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e021      	b.n	8001100 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_InitTick+0x64>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f945 	bl	8001362 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f91d 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	@ (8001110 <HAL_InitTick+0x68>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2400000c 	.word	0x2400000c
 800110c:	24000000 	.word	0x24000000
 8001110:	24000008 	.word	0x24000008

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2400000c 	.word	0x2400000c
 8001138:	24000158 	.word	0x24000158

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	24000158 	.word	0x24000158

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2400000c 	.word	0x2400000c

0800119c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetREVID+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0c1b      	lsrs	r3, r3, #16
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	5c001000 	.word	0x5c001000

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	05fa0000 	.word	0x05fa0000

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff47 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff5e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffb2 	bl	80012d4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800138a:	4b89      	ldr	r3, [pc, #548]	@ (80015b0 <HAL_GPIO_Init+0x234>)
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800138e:	e194      	b.n	80016ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8186 	beq.w	80016b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x44>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 0201 	and.w	r2, r3, #1
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0203 	and.w	r2, r3, #3
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80e0 	beq.w	80016b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <HAL_GPIO_Init+0x238>)
 80014f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014fa:	4a2e      	ldr	r2, [pc, #184]	@ (80015b4 <HAL_GPIO_Init+0x238>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_GPIO_Init+0x238>)
 8001506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_GPIO_Init+0x23c>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <HAL_GPIO_Init+0x240>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d052      	beq.n	80015e4 <HAL_GPIO_Init+0x268>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_GPIO_Init+0x244>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d031      	beq.n	80015aa <HAL_GPIO_Init+0x22e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_GPIO_Init+0x248>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d02b      	beq.n	80015a6 <HAL_GPIO_Init+0x22a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_GPIO_Init+0x24c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_GPIO_Init+0x250>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x222>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x254>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x21e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1a      	ldr	r2, [pc, #104]	@ (80015d4 <HAL_GPIO_Init+0x258>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <HAL_GPIO_Init+0x25c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <HAL_GPIO_Init+0x260>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_GPIO_Init+0x264>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x20e>
 8001586:	2309      	movs	r3, #9
 8001588:	e02d      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 800158a:	230a      	movs	r3, #10
 800158c:	e02b      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 800158e:	2308      	movs	r3, #8
 8001590:	e029      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 8001592:	2307      	movs	r3, #7
 8001594:	e027      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 8001596:	2306      	movs	r3, #6
 8001598:	e025      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 800159a:	2305      	movs	r3, #5
 800159c:	e023      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 800159e:	2304      	movs	r3, #4
 80015a0:	e021      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e01f      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e01d      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e01b      	b.n	80015e6 <HAL_GPIO_Init+0x26a>
 80015ae:	bf00      	nop
 80015b0:	58000080 	.word	0x58000080
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58000400 	.word	0x58000400
 80015bc:	58020000 	.word	0x58020000
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58020800 	.word	0x58020800
 80015c8:	58020c00 	.word	0x58020c00
 80015cc:	58021000 	.word	0x58021000
 80015d0:	58021400 	.word	0x58021400
 80015d4:	58021800 	.word	0x58021800
 80015d8:	58021c00 	.word	0x58021c00
 80015dc:	58022000 	.word	0x58022000
 80015e0:	58022400 	.word	0x58022400
 80015e4:	2300      	movs	r3, #0
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f6:	4938      	ldr	r1, [pc, #224]	@ (80016d8 <HAL_GPIO_Init+0x35c>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	3301      	adds	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f47f ae63 	bne.w	8001390 <HAL_GPIO_Init+0x14>
  }
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	3724      	adds	r7, #36	@ 0x24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	58000400 	.word	0x58000400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	041a      	lsls	r2, r3, #16
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43d9      	mvns	r1, r3
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800174c:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_HSEM_FastTake+0x2c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3320      	adds	r3, #32
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_HSEM_FastTake+0x30>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	58026400 	.word	0x58026400
 8001774:	80000300 	.word	0x80000300

08001778 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001782:	4906      	ldr	r1, [pc, #24]	@ (800179c <HAL_HSEM_Release+0x24>)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	58026400 	.word	0x58026400

080017a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	d00a      	beq.n	80017ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e040      	b.n	8001848 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e03e      	b.n	8001848 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80017d2:	491f      	ldr	r1, [pc, #124]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017da:	f7ff fcaf 	bl	800113c <HAL_GetTick>
 80017de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017e0:	e009      	b.n	80017f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017e2:	f7ff fcab 	bl	800113c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017f0:	d901      	bls.n	80017f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e028      	b.n	8001848 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001802:	d1ee      	bne.n	80017e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b1e      	cmp	r3, #30
 8001808:	d008      	beq.n	800181c <HAL_PWREx_ConfigSupply+0x7c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b2e      	cmp	r3, #46	@ 0x2e
 800180e:	d005      	beq.n	800181c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b1d      	cmp	r3, #29
 8001814:	d002      	beq.n	800181c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b2d      	cmp	r3, #45	@ 0x2d
 800181a:	d114      	bne.n	8001846 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800181c:	f7ff fc8e 	bl	800113c <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001822:	e009      	b.n	8001838 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001824:	f7ff fc8a 	bl	800113c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001832:	d901      	bls.n	8001838 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e007      	b.n	8001848 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_PWREx_ConfigSupply+0xb0>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d1ee      	bne.n	8001824 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	58024800 	.word	0x58024800

08001854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	@ 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f000 bc48 	b.w	80020f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8088 	beq.w	8001986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001876:	4b99      	ldr	r3, [pc, #612]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001880:	4b96      	ldr	r3, [pc, #600]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001888:	2b10      	cmp	r3, #16
 800188a:	d007      	beq.n	800189c <HAL_RCC_OscConfig+0x48>
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	2b18      	cmp	r3, #24
 8001890:	d111      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62>
 8001892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b8f      	ldr	r3, [pc, #572]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d06d      	beq.n	8001984 <HAL_RCC_OscConfig+0x130>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d169      	bne.n	8001984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f000 bc21 	b.w	80020f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x7a>
 80018c0:	4b86      	ldr	r3, [pc, #536]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a85      	ldr	r2, [pc, #532]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x9c>
 80018d6:	4b81      	ldr	r3, [pc, #516]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a80      	ldr	r2, [pc, #512]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b7e      	ldr	r3, [pc, #504]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7d      	ldr	r2, [pc, #500]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xc0>
 80018fa:	4b78      	ldr	r3, [pc, #480]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a77      	ldr	r2, [pc, #476]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b75      	ldr	r3, [pc, #468]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a74      	ldr	r2, [pc, #464]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd8>
 8001914:	4b71      	ldr	r3, [pc, #452]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a70      	ldr	r2, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b6e      	ldr	r3, [pc, #440]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6d      	ldr	r2, [pc, #436]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fc02 	bl	800113c <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fbfe 	bl	800113c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e3d4      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800194e:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fbee 	bl	800113c <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fbea 	bl	800113c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e3c0      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001976:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x110>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80ca 	beq.w	8001b28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001994:	4b51      	ldr	r3, [pc, #324]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800199c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800199e:	4b4f      	ldr	r3, [pc, #316]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_RCC_OscConfig+0x166>
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2b18      	cmp	r3, #24
 80019ae:	d156      	bne.n	8001a5e <HAL_RCC_OscConfig+0x20a>
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d151      	bne.n	8001a5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ba:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e392      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019d2:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0219 	bic.w	r2, r3, #25
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	493f      	ldr	r1, [pc, #252]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fbaa 	bl	800113c <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fba6 	bl	800113c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e37c      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	f7ff fbc7 	bl	800119c <HAL_GetREVID>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d817      	bhi.n	8001a48 <HAL_RCC_OscConfig+0x1f4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b40      	cmp	r3, #64	@ 0x40
 8001a1e:	d108      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1de>
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a28:	4a2c      	ldr	r2, [pc, #176]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a30:	e07a      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	031b      	lsls	r3, r3, #12
 8001a40:	4926      	ldr	r1, [pc, #152]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a46:	e06f      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	4921      	ldr	r1, [pc, #132]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	e064      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d047      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0219 	bic.w	r2, r3, #25
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	491a      	ldr	r1, [pc, #104]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fb60 	bl	800113c <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fb5c 	bl	800113c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e332      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	f7ff fb7d 	bl	800119c <HAL_GetREVID>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d819      	bhi.n	8001ae0 <HAL_RCC_OscConfig+0x28c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b40      	cmp	r3, #64	@ 0x40
 8001ab2:	d108      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x272>
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac2:	6053      	str	r3, [r2, #4]
 8001ac4:	e030      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	4901      	ldr	r1, [pc, #4]	@ (8001adc <HAL_RCC_OscConfig+0x288>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	e025      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	4997      	ldr	r1, [pc, #604]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e018      	b.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b95      	ldr	r3, [pc, #596]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a94      	ldr	r2, [pc, #592]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb1b 	bl	800113c <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fb17 	bl	800113c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e2ed      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b1c:	4b8b      	ldr	r3, [pc, #556]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a9 	beq.w	8001c88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b36:	4b85      	ldr	r3, [pc, #532]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b40:	4b82      	ldr	r3, [pc, #520]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d007      	beq.n	8001b5c <HAL_RCC_OscConfig+0x308>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b18      	cmp	r3, #24
 8001b50:	d13a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x374>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d135      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x320>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b80      	cmp	r3, #128	@ 0x80
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e2c1      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b74:	f7ff fb12 	bl	800119c <HAL_GetREVID>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d817      	bhi.n	8001bb2 <HAL_RCC_OscConfig+0x35e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d108      	bne.n	8001b9c <HAL_RCC_OscConfig+0x348>
 8001b8a:	4b70      	ldr	r3, [pc, #448]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b92:	4a6e      	ldr	r2, [pc, #440]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b9a:	e075      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	069b      	lsls	r3, r3, #26
 8001baa:	4968      	ldr	r1, [pc, #416]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb0:	e06a      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb2:	4b66      	ldr	r3, [pc, #408]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	061b      	lsls	r3, r3, #24
 8001bc0:	4962      	ldr	r1, [pc, #392]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bc6:	e05f      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d042      	beq.n	8001c56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff faae 	bl	800113c <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001be4:	f7ff faaa 	bl	800113c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e280      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bf6:	4b55      	ldr	r3, [pc, #340]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c02:	f7ff facb 	bl	800119c <HAL_GetREVID>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d817      	bhi.n	8001c40 <HAL_RCC_OscConfig+0x3ec>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d108      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3d6>
 8001c18:	4b4c      	ldr	r3, [pc, #304]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c20:	4a4a      	ldr	r2, [pc, #296]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
 8001c2a:	4b48      	ldr	r3, [pc, #288]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	4944      	ldr	r1, [pc, #272]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e023      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
 8001c40:	4b42      	ldr	r3, [pc, #264]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	493f      	ldr	r1, [pc, #252]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e018      	b.n	8001c88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c56:	4b3d      	ldr	r3, [pc, #244]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fa6b 	bl	800113c <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fa67 	bl	800113c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e23d      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d036      	beq.n	8001d02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d019      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa48 	bl	800113c <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fa44 	bl	800113c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e21a      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
 8001cce:	e018      	b.n	8001d02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fa2e 	bl	800113c <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fa2a 	bl	800113c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e200      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d039      	beq.n	8001d82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa0b 	bl	800113c <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d2a:	f7ff fa07 	bl	800113c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1dd      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
 8001d48:	e01b      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d50:	4b9b      	ldr	r3, [pc, #620]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a9a      	ldr	r2, [pc, #616]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f9ee 	bl	800113c <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f9ea 	bl	800113c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1c0      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d76:	4b92      	ldr	r3, [pc, #584]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8081 	beq.w	8001e92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d90:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc4 <HAL_RCC_OscConfig+0x770>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8b      	ldr	r2, [pc, #556]	@ (8001fc4 <HAL_RCC_OscConfig+0x770>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff f9ce 	bl	800113c <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff f9ca 	bl	800113c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1a0      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db6:	4b83      	ldr	r3, [pc, #524]	@ (8001fc4 <HAL_RCC_OscConfig+0x770>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x584>
 8001dca:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd6:	e02d      	b.n	8001e34 <HAL_RCC_OscConfig+0x5e0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5a6>
 8001de0:	4b77      	ldr	r3, [pc, #476]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a76      	ldr	r2, [pc, #472]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dec:	4b74      	ldr	r3, [pc, #464]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a73      	ldr	r2, [pc, #460]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0x5e0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5c8>
 8001e02:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0x5e0>
 8001e1c:	4b68      	ldr	r3, [pc, #416]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e20:	4a67      	ldr	r2, [pc, #412]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e28:	4b65      	ldr	r3, [pc, #404]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2c:	4a64      	ldr	r2, [pc, #400]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d015      	beq.n	8001e68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f97e 	bl	800113c <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff f97a 	bl	800113c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e14e      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5a:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ee      	beq.n	8001e44 <HAL_RCC_OscConfig+0x5f0>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7ff f968 	bl	800113c <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff f964 	bl	800113c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e138      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e86:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ee      	bne.n	8001e70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 812d 	beq.w	80020f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e9c:	4b48      	ldr	r3, [pc, #288]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ea4:	2b18      	cmp	r3, #24
 8001ea6:	f000 80bd 	beq.w	8002024 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	f040 809e 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a41      	ldr	r2, [pc, #260]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f93c 	bl	800113c <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff f938 	bl	800113c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e10e      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eda:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee6:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_RCC_OscConfig+0x774>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	4931      	ldr	r1, [pc, #196]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	3b01      	subs	r3, #1
 8001f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	025b      	lsls	r3, r3, #9
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	061b      	lsls	r3, r3, #24
 8001f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f30:	4923      	ldr	r1, [pc, #140]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f36:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f42:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f46:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_RCC_OscConfig+0x778>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f4e:	00d2      	lsls	r2, r2, #3
 8001f50:	491b      	ldr	r1, [pc, #108]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f023 020c 	bic.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4917      	ldr	r1, [pc, #92]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f68:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	f023 0202 	bic.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	4912      	ldr	r1, [pc, #72]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f8c1 	bl	800113c <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fbc:	e011      	b.n	8001fe2 <HAL_RCC_OscConfig+0x78e>
 8001fbe:	bf00      	nop
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	58024800 	.word	0x58024800
 8001fc8:	fffffc0c 	.word	0xfffffc0c
 8001fcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f8b4 	bl	800113c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e08a      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x77c>
 8001fee:	e082      	b.n	80020f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 8001ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f89e 	bl	800113c <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f89a 	bl	800113c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e070      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x7b0>
 8002022:	e068      	b.n	80020f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800202a:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	2b01      	cmp	r3, #1
 8002036:	d031      	beq.n	800209c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d12a      	bne.n	800209c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d122      	bne.n	800209c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0a5b      	lsrs	r3, r3, #9
 800206a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002072:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0c1b      	lsrs	r3, r3, #16
 800207c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e02b      	b.n	80020f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d01f      	beq.n	80020f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020b6:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c2:	f7ff f83b 	bl	800113c <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020c8:	bf00      	nop
 80020ca:	f7ff f837 	bl	800113c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d0f9      	beq.n	80020ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_RCC_OscConfig+0x8b0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	4906      	ldr	r1, [pc, #24]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_RCC_OscConfig+0x8ac>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3730      	adds	r7, #48	@ 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	58024400 	.word	0x58024400
 8002104:	ffff0007 	.word	0xffff0007

08002108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e19c      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b8a      	ldr	r3, [pc, #552]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b87      	ldr	r3, [pc, #540]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 020f 	bic.w	r2, r3, #15
 8002132:	4985      	ldr	r1, [pc, #532]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b83      	ldr	r3, [pc, #524]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e184      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	4b7b      	ldr	r3, [pc, #492]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002168:	4b78      	ldr	r3, [pc, #480]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4975      	ldr	r1, [pc, #468]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	4b70      	ldr	r3, [pc, #448]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002192:	429a      	cmp	r2, r3
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002196:	4b6d      	ldr	r3, [pc, #436]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	496a      	ldr	r1, [pc, #424]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	4b64      	ldr	r3, [pc, #400]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021c4:	4b61      	ldr	r3, [pc, #388]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	495e      	ldr	r1, [pc, #376]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	4b59      	ldr	r3, [pc, #356]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021f2:	4b56      	ldr	r3, [pc, #344]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4953      	ldr	r1, [pc, #332]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	429a      	cmp	r2, r3
 800221e:	d908      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b4a      	ldr	r3, [pc, #296]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f023 020f 	bic.w	r2, r3, #15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4947      	ldr	r1, [pc, #284]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d055      	beq.n	80022ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800223e:	4b43      	ldr	r3, [pc, #268]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4940      	ldr	r1, [pc, #256]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800224c:	4313      	orrs	r3, r2
 800224e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002258:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0f6      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002270:	4b36      	ldr	r3, [pc, #216]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0ea      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0de      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002298:	4b2c      	ldr	r3, [pc, #176]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0d6      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b28      	ldr	r3, [pc, #160]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f023 0207 	bic.w	r2, r3, #7
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4925      	ldr	r1, [pc, #148]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ba:	f7fe ff3f 	bl	800113c <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c2:	f7fe ff3b 	bl	800113c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0be      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d8:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d1eb      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	429a      	cmp	r2, r3
 8002304:	d208      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f023 020f 	bic.w	r2, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	490e      	ldr	r1, [pc, #56]	@ (800234c <HAL_RCC_ClockConfig+0x244>)
 8002314:	4313      	orrs	r3, r2
 8002316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d214      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4906      	ldr	r1, [pc, #24]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e086      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
 8002348:	52002000 	.word	0x52002000
 800234c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002368:	429a      	cmp	r2, r3
 800236a:	d208      	bcs.n	800237e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800236c:	4b3c      	ldr	r3, [pc, #240]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4939      	ldr	r1, [pc, #228]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 800237a:	4313      	orrs	r3, r2
 800237c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002396:	429a      	cmp	r2, r3
 8002398:	d208      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800239a:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	492e      	ldr	r1, [pc, #184]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4922      	ldr	r1, [pc, #136]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d208      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4917      	ldr	r1, [pc, #92]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002404:	4313      	orrs	r3, r2
 8002406:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002408:	f000 f834 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	4912      	ldr	r1, [pc, #72]	@ (8002464 <HAL_RCC_ClockConfig+0x35c>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <HAL_RCC_ClockConfig+0x35c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x360>)
 800243e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002440:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <HAL_RCC_ClockConfig+0x364>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RCC_ClockConfig+0x368>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fe2c 	bl	80010a8 <HAL_InitTick>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
 8002464:	08006398 	.word	0x08006398
 8002468:	24000004 	.word	0x24000004
 800246c:	24000000 	.word	0x24000000
 8002470:	24000008 	.word	0x24000008

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247a:	4bb3      	ldr	r3, [pc, #716]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002482:	2b18      	cmp	r3, #24
 8002484:	f200 8155 	bhi.w	8002732 <HAL_RCC_GetSysClockFreq+0x2be>
 8002488:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024f5 	.word	0x080024f5
 8002494:	08002733 	.word	0x08002733
 8002498:	08002733 	.word	0x08002733
 800249c:	08002733 	.word	0x08002733
 80024a0:	08002733 	.word	0x08002733
 80024a4:	08002733 	.word	0x08002733
 80024a8:	08002733 	.word	0x08002733
 80024ac:	08002733 	.word	0x08002733
 80024b0:	0800251b 	.word	0x0800251b
 80024b4:	08002733 	.word	0x08002733
 80024b8:	08002733 	.word	0x08002733
 80024bc:	08002733 	.word	0x08002733
 80024c0:	08002733 	.word	0x08002733
 80024c4:	08002733 	.word	0x08002733
 80024c8:	08002733 	.word	0x08002733
 80024cc:	08002733 	.word	0x08002733
 80024d0:	08002521 	.word	0x08002521
 80024d4:	08002733 	.word	0x08002733
 80024d8:	08002733 	.word	0x08002733
 80024dc:	08002733 	.word	0x08002733
 80024e0:	08002733 	.word	0x08002733
 80024e4:	08002733 	.word	0x08002733
 80024e8:	08002733 	.word	0x08002733
 80024ec:	08002733 	.word	0x08002733
 80024f0:	08002527 	.word	0x08002527
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f4:	4b94      	ldr	r3, [pc, #592]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002500:	4b91      	ldr	r3, [pc, #580]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	4a90      	ldr	r2, [pc, #576]	@ (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002512:	e111      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002514:	4b8d      	ldr	r3, [pc, #564]	@ (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e10e      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800251a:	4b8d      	ldr	r3, [pc, #564]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800251c:	61bb      	str	r3, [r7, #24]
      break;
 800251e:	e10b      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002522:	61bb      	str	r3, [r7, #24]
      break;
 8002524:	e108      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002530:	4b85      	ldr	r3, [pc, #532]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800253a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800253c:	4b82      	ldr	r3, [pc, #520]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002546:	4b80      	ldr	r3, [pc, #512]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80e1 	beq.w	800272c <HAL_RCC_GetSysClockFreq+0x2b8>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f000 8083 	beq.w	8002678 <HAL_RCC_GetSysClockFreq+0x204>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f200 80a1 	bhi.w	80026bc <HAL_RCC_GetSysClockFreq+0x248>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x114>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d056      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002586:	e099      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002588:	4b6f      	ldr	r3, [pc, #444]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002594:	4b6c      	ldr	r3, [pc, #432]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	4a6b      	ldr	r2, [pc, #428]	@ (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025be:	4b62      	ldr	r3, [pc, #392]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025ee:	e087      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800275c <HAL_RCC_GetSysClockFreq+0x2e8>
 80025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002612:	ed97 6a02 	vldr	s12, [r7, #8]
 8002616:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002632:	e065      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	4b40      	ldr	r3, [pc, #256]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002656:	ed97 6a02 	vldr	s12, [r7, #8]
 800265a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002676:	e043      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800269a:	ed97 6a02 	vldr	s12, [r7, #8]
 800269e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026ba:	e021      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026de:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800270a:	3301      	adds	r3, #1
 800270c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002718:	edd7 6a07 	vldr	s13, [r7, #28]
 800271c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
      break;
 8002730:	e002      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002734:	61bb      	str	r3, [r7, #24]
      break;
 8002736:	bf00      	nop
  }

  return sysclockfreq;
 8002738:	69bb      	ldr	r3, [r7, #24]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400
 800274c:	03d09000 	.word	0x03d09000
 8002750:	003d0900 	.word	0x003d0900
 8002754:	007a1200 	.word	0x007a1200
 8002758:	46000000 	.word	0x46000000
 800275c:	4c742400 	.word	0x4c742400
 8002760:	4a742400 	.word	0x4a742400
 8002764:	4af42400 	.word	0x4af42400

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800276e:	f7ff fe81 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490f      	ldr	r1, [pc, #60]	@ (80027bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	58024400 	.word	0x58024400
 80027bc:	08006398 	.word	0x08006398
 80027c0:	24000004 	.word	0x24000004
 80027c4:	24000000 	.word	0x24000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027cc:	f7ff ffcc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	58024400 	.word	0x58024400
 80027f0:	08006398 	.word	0x08006398

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027f8:	f7ff ffb6 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	58024400 	.word	0x58024400
 800281c:	08006398 	.word	0x08006398

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002824:	b0ca      	sub	sp, #296	@ 0x128
 8002826:	af00      	add	r7, sp, #0
 8002828:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002844:	2500      	movs	r5, #0
 8002846:	ea54 0305 	orrs.w	r3, r4, r5
 800284a:	d049      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800284c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002856:	d02f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800285c:	d828      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800285e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002862:	d01a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002868:	d822      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800286e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002872:	d007      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002874:	e01c      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002876:	4bb8      	ldr	r3, [pc, #736]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	4ab7      	ldr	r2, [pc, #732]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002882:	e01a      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002888:	3308      	adds	r3, #8
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fc8f 	bl	80041b0 <RCCEx_PLL2_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002898:	e00f      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289e:	3328      	adds	r3, #40	@ 0x28
 80028a0:	2102      	movs	r1, #2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fd36 	bl	8004314 <RCCEx_PLL3_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ae:	e004      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028c2:	4ba5      	ldr	r3, [pc, #660]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d2:	430b      	orrs	r3, r1
 80028d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80028d6:	e003      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028ec:	f04f 0900 	mov.w	r9, #0
 80028f0:	ea58 0309 	orrs.w	r3, r8, r9
 80028f4:	d047      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d82a      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800291d 	.word	0x0800291d
 800290c:	0800292b 	.word	0x0800292b
 8002910:	08002941 	.word	0x08002941
 8002914:	0800295f 	.word	0x0800295f
 8002918:	0800295f 	.word	0x0800295f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4a8d      	ldr	r2, [pc, #564]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002928:	e01a      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800292a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292e:	3308      	adds	r3, #8
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fc3c 	bl	80041b0 <RCCEx_PLL2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800293e:	e00f      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002944:	3328      	adds	r3, #40	@ 0x28
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f001 fce3 	bl	8004314 <RCCEx_PLL3_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002954:	e004      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800295c:	e000      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800295e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	f023 0107 	bic.w	r1, r3, #7
 8002970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	4a78      	ldr	r2, [pc, #480]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002978:	430b      	orrs	r3, r1
 800297a:	6513      	str	r3, [r2, #80]	@ 0x50
 800297c:	e003      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002992:	f04f 0b00 	mov.w	fp, #0
 8002996:	ea5a 030b 	orrs.w	r3, sl, fp
 800299a:	d04c      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a6:	d030      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ac:	d829      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80029b0:	d02d      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80029b4:	d825      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029b6:	2b80      	cmp	r3, #128	@ 0x80
 80029b8:	d018      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029ba:	2b80      	cmp	r3, #128	@ 0x80
 80029bc:	d821      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029c2:	2b40      	cmp	r3, #64	@ 0x40
 80029c4:	d007      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029c6:	e01c      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c8:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	4a62      	ldr	r2, [pc, #392]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029d4:	e01c      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029da:	3308      	adds	r3, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fbe6 	bl	80041b0 <RCCEx_PLL2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029ea:	e011      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f0:	3328      	adds	r3, #40	@ 0x28
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fc8d 	bl	8004314 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a18:	4b4f      	ldr	r3, [pc, #316]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	4a4c      	ldr	r2, [pc, #304]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a2c:	e003      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a50:	460b      	mov	r3, r1
 8002a52:	4313      	orrs	r3, r2
 8002a54:	d053      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a62:	d035      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a68:	d82e      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a6e:	d031      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a74:	d828      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d01a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a80:	d822      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8e:	4b32      	ldr	r3, [pc, #200]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fb83 	bl	80041b0 <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab6:	3328      	adds	r3, #40	@ 0x28
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fc2a 	bl	8004314 <RCCEx_PLL3_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac6:	e006      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aee:	4a1a      	ldr	r2, [pc, #104]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	e003      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	d056      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b2a:	d038      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b30:	d831      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b36:	d034      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b3c:	d82b      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b42:	d01d      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b48:	d825      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b54:	e01f      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4aa1      	ldr	r2, [pc, #644]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6e:	3308      	adds	r3, #8
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fb1c 	bl	80041b0 <RCCEx_PLL2_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b7e:	e011      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b84:	3328      	adds	r3, #40	@ 0x28
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fbc3 	bl	8004314 <RCCEx_PLL3_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b94:	e006      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bac:	4b8e      	ldr	r3, [pc, #568]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bbc:	4a8a      	ldr	r2, [pc, #552]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002be2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002be6:	460b      	mov	r3, r1
 8002be8:	4313      	orrs	r3, r2
 8002bea:	d03a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	2b30      	cmp	r3, #48	@ 0x30
 8002bf4:	d01f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bf6:	2b30      	cmp	r3, #48	@ 0x30
 8002bf8:	d819      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d815      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d019      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d111      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0a:	4b77      	ldr	r3, [pc, #476]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	4a76      	ldr	r2, [pc, #472]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c16:	e011      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fac5 	bl	80041b0 <RCCEx_PLL2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	4a65      	ldr	r2, [pc, #404]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c54:	430b      	orrs	r3, r1
 8002c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c58:	e003      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	d051      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c8c:	d035      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c92:	d82e      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c98:	d031      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c9e:	d828      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca4:	d01a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002caa:	d822      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb4:	d007      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cb6:	e01c      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cca:	3308      	adds	r3, #8
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fa6e 	bl	80041b0 <RCCEx_PLL2_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cda:	e011      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce0:	3328      	adds	r3, #40	@ 0x28
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fb15 	bl	8004314 <RCCEx_PLL3_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cf0:	e006      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d08:	4b37      	ldr	r3, [pc, #220]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	4a34      	ldr	r2, [pc, #208]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d1c:	e003      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d40:	460b      	mov	r3, r1
 8002d42:	4313      	orrs	r3, r2
 8002d44:	d056      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d50:	d033      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d56:	d82c      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d5c:	d02f      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d62:	d826      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d68:	d02b      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d6e:	d820      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d74:	d012      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d7a:	d81a      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d84:	d115      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fa0e 	bl	80041b0 <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d9a:	e015      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	3328      	adds	r3, #40	@ 0x28
 8002da2:	2101      	movs	r1, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 fab5 	bl	8004314 <RCCEx_PLL3_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db8:	e006      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dde:	4a02      	ldr	r2, [pc, #8]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4313      	orrs	r3, r2
 8002e12:	d055      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d033      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e26:	d82c      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2c:	d02f      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d826      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e38:	d02b      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e3e:	d820      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e44:	d012      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e4a:	d81a      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d022      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e54:	d115      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f9a6 	bl	80041b0 <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e6a:	e015      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	3328      	adds	r3, #40	@ 0x28
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fa4d 	bl	8004314 <RCCEx_PLL3_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e80:	e00a      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e88:	e006      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e8a:	bf00      	nop
 8002e8c:	e004      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ea0:	4ba3      	ldr	r3, [pc, #652]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d037      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eea:	d00e      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef0:	d816      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d018      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002efa:	d111      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002efc:	4b8c      	ldr	r3, [pc, #560]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	4a8b      	ldr	r2, [pc, #556]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f08:	e00f      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0e:	3308      	adds	r3, #8
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 f94c 	bl	80041b0 <RCCEx_PLL2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f1e:	e004      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f32:	4b7f      	ldr	r3, [pc, #508]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4a7b      	ldr	r2, [pc, #492]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	d039      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d81c      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002fbd 	.word	0x08002fbd
 8002f84:	08002f91 	.word	0x08002f91
 8002f88:	08002f9f 	.word	0x08002f9f
 8002f8c:	08002fbd 	.word	0x08002fbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4b67      	ldr	r3, [pc, #412]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f9c:	e00f      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 f902 	bl	80041b0 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fb2:	e004      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fba:	e000      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	f023 0103 	bic.w	r1, r3, #3
 8002fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd4:	4a56      	ldr	r2, [pc, #344]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fda:	e003      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ffe:	460b      	mov	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	f000 809f 	beq.w	8003144 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003006:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4a      	ldr	r2, [pc, #296]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003012:	f7fe f893 	bl	800113c <HAL_GetTick>
 8003016:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	e00b      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe f88e 	bl	800113c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	@ 0x64
 800302a:	d903      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003034:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ed      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003044:	2b00      	cmp	r3, #0
 8003046:	d179      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003048:	4b39      	ldr	r3, [pc, #228]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800304a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003054:	4053      	eors	r3, r2
 8003056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305e:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003066:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800306a:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a30      	ldr	r2, [pc, #192]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003076:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003082:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003088:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800308a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003096:	d118      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f850 	bl	800113c <HAL_GetTick>
 800309c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a0:	e00d      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f84b 	bl	800113c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030ac:	1ad2      	subs	r2, r2, r3
 80030ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d903      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030bc:	e005      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0eb      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d129      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e2:	d10e      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80030e4:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030f4:	091a      	lsrs	r2, r3, #4
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6113      	str	r3, [r2, #16]
 8003100:	e005      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003102:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800310c:	6113      	str	r3, [r2, #16]
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003110:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003120:	430b      	orrs	r3, r1
 8003122:	6713      	str	r3, [r2, #112]	@ 0x70
 8003124:	e00e      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003130:	58024400 	.word	0x58024400
 8003134:	58024800 	.word	0x58024800
 8003138:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f002 0301 	and.w	r3, r2, #1
 8003150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800315a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800315e:	460b      	mov	r3, r1
 8003160:	4313      	orrs	r3, r2
 8003162:	f000 8089 	beq.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800316c:	2b28      	cmp	r3, #40	@ 0x28
 800316e:	d86b      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003170:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003251 	.word	0x08003251
 800317c:	08003249 	.word	0x08003249
 8003180:	08003249 	.word	0x08003249
 8003184:	08003249 	.word	0x08003249
 8003188:	08003249 	.word	0x08003249
 800318c:	08003249 	.word	0x08003249
 8003190:	08003249 	.word	0x08003249
 8003194:	08003249 	.word	0x08003249
 8003198:	0800321d 	.word	0x0800321d
 800319c:	08003249 	.word	0x08003249
 80031a0:	08003249 	.word	0x08003249
 80031a4:	08003249 	.word	0x08003249
 80031a8:	08003249 	.word	0x08003249
 80031ac:	08003249 	.word	0x08003249
 80031b0:	08003249 	.word	0x08003249
 80031b4:	08003249 	.word	0x08003249
 80031b8:	08003233 	.word	0x08003233
 80031bc:	08003249 	.word	0x08003249
 80031c0:	08003249 	.word	0x08003249
 80031c4:	08003249 	.word	0x08003249
 80031c8:	08003249 	.word	0x08003249
 80031cc:	08003249 	.word	0x08003249
 80031d0:	08003249 	.word	0x08003249
 80031d4:	08003249 	.word	0x08003249
 80031d8:	08003251 	.word	0x08003251
 80031dc:	08003249 	.word	0x08003249
 80031e0:	08003249 	.word	0x08003249
 80031e4:	08003249 	.word	0x08003249
 80031e8:	08003249 	.word	0x08003249
 80031ec:	08003249 	.word	0x08003249
 80031f0:	08003249 	.word	0x08003249
 80031f4:	08003249 	.word	0x08003249
 80031f8:	08003251 	.word	0x08003251
 80031fc:	08003249 	.word	0x08003249
 8003200:	08003249 	.word	0x08003249
 8003204:	08003249 	.word	0x08003249
 8003208:	08003249 	.word	0x08003249
 800320c:	08003249 	.word	0x08003249
 8003210:	08003249 	.word	0x08003249
 8003214:	08003249 	.word	0x08003249
 8003218:	08003251 	.word	0x08003251
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	3308      	adds	r3, #8
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 ffc3 	bl	80041b0 <RCCEx_PLL2_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003230:	e00f      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	3328      	adds	r3, #40	@ 0x28
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f86a 	bl	8004314 <RCCEx_PLL3_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800325a:	4bbf      	ldr	r3, [pc, #764]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003268:	4abb      	ldr	r2, [pc, #748]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800326a:	430b      	orrs	r3, r1
 800326c:	6553      	str	r3, [r2, #84]	@ 0x54
 800326e:	e003      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f002 0302 	and.w	r3, r2, #2
 8003284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800328e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003292:	460b      	mov	r3, r1
 8003294:	4313      	orrs	r3, r2
 8003296:	d041      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d824      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80032a2:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032d7 	.word	0x080032d7
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	3308      	adds	r3, #8
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 ff71 	bl	80041b0 <RCCEx_PLL2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032d4:	e00f      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032da:	3328      	adds	r3, #40	@ 0x28
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f818 	bl	8004314 <RCCEx_PLL3_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032fe:	4b96      	ldr	r3, [pc, #600]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f023 0107 	bic.w	r1, r3, #7
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800330c:	4a92      	ldr	r2, [pc, #584]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800330e:	430b      	orrs	r3, r1
 8003310:	6553      	str	r3, [r2, #84]	@ 0x54
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f002 0304 	and.w	r3, r2, #4
 8003328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003332:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d044      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003344:	2b05      	cmp	r3, #5
 8003346:	d825      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	0800339d 	.word	0x0800339d
 8003354:	08003369 	.word	0x08003369
 8003358:	0800337f 	.word	0x0800337f
 800335c:	0800339d 	.word	0x0800339d
 8003360:	0800339d 	.word	0x0800339d
 8003364:	0800339d 	.word	0x0800339d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336c:	3308      	adds	r3, #8
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff1d 	bl	80041b0 <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	3328      	adds	r3, #40	@ 0x28
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ffc4 	bl	8004314 <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f023 0107 	bic.w	r1, r3, #7
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b6:	4a68      	ldr	r2, [pc, #416]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f002 0320 	and.w	r3, r2, #32
 80033d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	d055      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f2:	d033      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f8:	d82c      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fe:	d02f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003404:	d826      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800340a:	d02b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800340c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003410:	d820      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003416:	d012      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800341c:	d81a      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d022      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003426:	d115      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	3308      	adds	r3, #8
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 febd 	bl	80041b0 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800343c:	e015      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3328      	adds	r3, #40	@ 0x28
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 ff64 	bl	8004314 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003452:	e00a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345a:	e006      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800345c:	bf00      	nop
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003460:	bf00      	nop
 8003462:	e002      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003472:	4b39      	ldr	r3, [pc, #228]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6553      	str	r3, [r2, #84]	@ 0x54
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800349e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d058      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034be:	d033      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034c4:	d82c      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ca:	d02f      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d0:	d826      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034d6:	d02b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034dc:	d820      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e2:	d012      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e8:	d81a      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d022      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f2:	d115      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	3308      	adds	r3, #8
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe57 	bl	80041b0 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fefe 	bl	8004314 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003526:	e006      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003528:	bf00      	nop
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800352c:	bf00      	nop
 800352e:	e002      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800354e:	4a02      	ldr	r2, [pc, #8]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6593      	str	r3, [r2, #88]	@ 0x58
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800357a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d055      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800358c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003590:	d033      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003592:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003596:	d82c      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359c:	d02f      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a2:	d826      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035a8:	d02b      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80035aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035ae:	d820      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b4:	d012      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80035b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ba:	d81a      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d022      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c4:	d115      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	3308      	adds	r3, #8
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fdee 	bl	80041b0 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035da:	e015      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e0:	3328      	adds	r3, #40	@ 0x28
 80035e2:	2102      	movs	r1, #2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fe95 	bl	8004314 <RCCEx_PLL3_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035f0:	e00a      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003610:	4ba1      	ldr	r3, [pc, #644]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003620:	4a9d      	ldr	r2, [pc, #628]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003622:	430b      	orrs	r3, r1
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f002 0308 	and.w	r3, r2, #8
 800363c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	d01e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	3328      	adds	r3, #40	@ 0x28
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fe54 	bl	8004314 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003678:	4b87      	ldr	r3, [pc, #540]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003688:	4a83      	ldr	r2, [pc, #524]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f002 0310 	and.w	r3, r2, #16
 800369a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d01e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	3328      	adds	r3, #40	@ 0x28
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fe25 	bl	8004314 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d6:	4b70      	ldr	r3, [pc, #448]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003702:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d03e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003718:	d022      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800371a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371e:	d81b      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d00b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800372a:	e015      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	3308      	adds	r3, #8
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fd3b 	bl	80041b0 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003740:	e00f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003746:	3328      	adds	r3, #40	@ 0x28
 8003748:	2102      	movs	r1, #2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fde2 	bl	8004314 <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376a:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800377a:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800377c:	430b      	orrs	r3, r1
 800377e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003798:	2300      	movs	r3, #0
 800379a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800379c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037b2:	d01f      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80037b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037b8:	d818      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037be:	d003      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c4:	d007      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	4a32      	ldr	r2, [pc, #200]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037d4:	e00f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	3328      	adds	r3, #40	@ 0x28
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd98 	bl	8004314 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fe:	4b26      	ldr	r3, [pc, #152]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	4a22      	ldr	r2, [pc, #136]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6553      	str	r3, [r2, #84]	@ 0x54
 8003814:	e003      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800381a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800382a:	673b      	str	r3, [r7, #112]	@ 0x70
 800382c:	2300      	movs	r3, #0
 800382e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d034      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003848:	d007      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800384a:	e011      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003858:	e00e      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	3308      	adds	r3, #8
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fca4 	bl	80041b0 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003884:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388e:	4a02      	ldr	r2, [pc, #8]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003890:	430b      	orrs	r3, r1
 8003892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003894:	e006      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b2:	2300      	movs	r3, #0
 80038b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d00c      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	3328      	adds	r3, #40	@ 0x28
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd23 	bl	8004314 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80038e8:	2300      	movs	r3, #0
 80038ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80038ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d038      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003902:	d018      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003908:	d811      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800390a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390e:	d014      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003914:	d80b      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800391a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391e:	d106      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4bc3      	ldr	r3, [pc, #780]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	4ac2      	ldr	r2, [pc, #776]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003948:	4bb9      	ldr	r3, [pc, #740]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003958:	4ab5      	ldr	r2, [pc, #724]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6553      	str	r3, [r2, #84]	@ 0x54
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003976:	2300      	movs	r3, #0
 8003978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800397a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003984:	4baa      	ldr	r3, [pc, #680]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003988:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003992:	4aa7      	ldr	r2, [pc, #668]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80039a6:	2300      	movs	r3, #0
 80039a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80039aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039c4:	4a9a      	ldr	r2, [pc, #616]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d8:	2300      	movs	r3, #0
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039e6:	4b92      	ldr	r3, [pc, #584]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a08:	2300      	movs	r3, #0
 8003a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a10:	460b      	mov	r3, r1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a16:	4b86      	ldr	r3, [pc, #536]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4a85      	ldr	r2, [pc, #532]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a20:	6113      	str	r3, [r2, #16]
 8003a22:	4b83      	ldr	r3, [pc, #524]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a24:	6919      	ldr	r1, [r3, #16]
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a2e:	4a80      	ldr	r2, [pc, #512]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a42:	2300      	movs	r3, #0
 8003a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a50:	4b77      	ldr	r3, [pc, #476]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	4a74      	ldr	r2, [pc, #464]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a72:	2300      	movs	r3, #0
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a80:	4b6b      	ldr	r3, [pc, #428]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a90:	4a67      	ldr	r2, [pc, #412]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a92:	430b      	orrs	r3, r1
 8003a94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d011      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb78 	bl	80041b0 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6239      	str	r1, [r7, #32]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d011      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	3308      	adds	r3, #8
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fb58 	bl	80041b0 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	61b9      	str	r1, [r7, #24]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d011      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	3308      	adds	r3, #8
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb38 	bl	80041b0 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	2100      	movs	r1, #0
 8003b60:	6139      	str	r1, [r7, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	d011      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	3328      	adds	r3, #40	@ 0x28
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fbca 	bl	8004314 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d011      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	3328      	adds	r3, #40	@ 0x28
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fbaa 	bl	8004314 <RCCEx_PLL3_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	2100      	movs	r1, #0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3328      	adds	r3, #40	@ 0x28
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb8a 	bl	8004314 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c30:	58024400 	.word	0x58024400

08003c34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c38:	f7fe fd96 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	@ (8003c5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	08006398 	.word	0x08006398

08003c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	@ 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c68:	4ba1      	ldr	r3, [pc, #644]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c72:	4b9f      	ldr	r3, [pc, #636]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	0b1b      	lsrs	r3, r3, #12
 8003c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c8a:	4b99      	ldr	r3, [pc, #612]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8111 	beq.w	8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f000 8083 	beq.w	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	f200 80a1 	bhi.w	8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cca:	e099      	b.n	8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ccc:	4b88      	ldr	r3, [pc, #544]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02d      	beq.n	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd8:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	4a84      	ldr	r2, [pc, #528]	@ (8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	4b7b      	ldr	r3, [pc, #492]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d32:	e087      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d46:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d76:	e065      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8a:	4b59      	ldr	r3, [pc, #356]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dba:	e043      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dce:	4b48      	ldr	r3, [pc, #288]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003de2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfe:	e021      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e12:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	ee17 2a90 	vmov	r2, s15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e72:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e98:	ee17 2a90 	vmov	r2, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 2a90 	vmov	r2, s15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	@ 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	46000000 	.word	0x46000000
 8003efc:	4c742400 	.word	0x4c742400
 8003f00:	4a742400 	.word	0x4a742400
 8003f04:	4af42400 	.word	0x4af42400

08003f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	@ 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f10:	4ba1      	ldr	r3, [pc, #644]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	0d1b      	lsrs	r3, r3, #20
 8003f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f26:	4b9c      	ldr	r3, [pc, #624]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f32:	4b99      	ldr	r3, [pc, #612]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8111 	beq.w	8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	f000 8083 	beq.w	8004064 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	f200 80a1 	bhi.w	80040a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d056      	beq.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f72:	e099      	b.n	80040a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f74:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02d      	beq.n	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f80:	4b85      	ldr	r3, [pc, #532]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	4a84      	ldr	r2, [pc, #528]	@ (800419c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b7b      	ldr	r3, [pc, #492]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fda:	e087      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401e:	e065      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b59      	ldr	r3, [pc, #356]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a03 	vldr	s12, [r7, #12]
 8004046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004062:	e043      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b48      	ldr	r3, [pc, #288]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a03 	vldr	s12, [r7, #12]
 800408a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a6:	e021      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b37      	ldr	r3, [pc, #220]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	0a5b      	lsrs	r3, r3, #9
 80040f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004106:	edd7 6a07 	vldr	s13, [r7, #28]
 800410a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	ee17 2a90 	vmov	r2, s15
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800411a:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004134:	edd7 6a07 	vldr	s13, [r7, #28]
 8004138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004140:	ee17 2a90 	vmov	r2, s15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004148:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800415e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004162:	edd7 6a07 	vldr	s13, [r7, #28]
 8004166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416e:	ee17 2a90 	vmov	r2, s15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004176:	e008      	b.n	800418a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	@ 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
 800419c:	03d09000 	.word	0x03d09000
 80041a0:	46000000 	.word	0x46000000
 80041a4:	4c742400 	.word	0x4c742400
 80041a8:	4a742400 	.word	0x4a742400
 80041ac:	4af42400 	.word	0x4af42400

080041b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041be:	4b53      	ldr	r3, [pc, #332]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d101      	bne.n	80041ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e099      	b.n	8004302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041ce:	4b4f      	ldr	r3, [pc, #316]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4e      	ldr	r2, [pc, #312]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041da:	f7fc ffaf 	bl	800113c <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041e2:	f7fc ffab 	bl	800113c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e086      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041f4:	4b45      	ldr	r3, [pc, #276]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004200:	4b42      	ldr	r3, [pc, #264]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	493f      	ldr	r1, [pc, #252]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	628b      	str	r3, [r1, #40]	@ 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	b29b      	uxth	r3, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	3b01      	subs	r3, #1
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004244:	4931      	ldr	r1, [pc, #196]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800424a:	4b30      	ldr	r3, [pc, #192]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	492d      	ldr	r1, [pc, #180]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800425c:	4b2b      	ldr	r3, [pc, #172]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	f023 0220 	bic.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4928      	ldr	r1, [pc, #160]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800426e:	4b27      	ldr	r3, [pc, #156]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	4a26      	ldr	r2, [pc, #152]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800427a:	4b24      	ldr	r3, [pc, #144]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 800427c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800427e:	4b24      	ldr	r3, [pc, #144]	@ (8004310 <RCCEx_PLL2_Config+0x160>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69d2      	ldr	r2, [r2, #28]
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	4920      	ldr	r1, [pc, #128]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800428e:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 8004294:	f043 0310 	orr.w	r3, r3, #16
 8004298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	4a19      	ldr	r2, [pc, #100]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042ac:	e00f      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042b4:	4b15      	ldr	r3, [pc, #84]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	4a14      	ldr	r2, [pc, #80]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042c0:	e005      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042c2:	4b12      	ldr	r3, [pc, #72]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	4a11      	ldr	r2, [pc, #68]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042ce:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042da:	f7fc ff2f 	bl	800113c <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042e2:	f7fc ff2b 	bl	800113c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <RCCEx_PLL2_Config+0x15c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	ffff0007 	.word	0xffff0007

08004314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004322:	4b53      	ldr	r3, [pc, #332]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b03      	cmp	r3, #3
 800432c:	d101      	bne.n	8004332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e099      	b.n	8004466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004332:	4b4f      	ldr	r3, [pc, #316]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4e      	ldr	r2, [pc, #312]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fc fefd 	bl	800113c <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004344:	e008      	b.n	8004358 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004346:	f7fc fef9 	bl	800113c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e086      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004358:	4b45      	ldr	r3, [pc, #276]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004364:	4b42      	ldr	r3, [pc, #264]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	493f      	ldr	r1, [pc, #252]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	628b      	str	r3, [r1, #40]	@ 0x28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	b29b      	uxth	r3, r3
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043a8:	4931      	ldr	r1, [pc, #196]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043ae:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	492d      	ldr	r1, [pc, #180]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4928      	ldr	r1, [pc, #160]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043d2:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e2:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <RCCEx_PLL3_Config+0x160>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	69d2      	ldr	r2, [r2, #28]
 80043ea:	00d2      	lsls	r2, r2, #3
 80043ec:	4920      	ldr	r1, [pc, #128]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004404:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800440a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800440e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004410:	e00f      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004418:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	4a14      	ldr	r2, [pc, #80]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004424:	e005      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004426:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800442c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a0e      	ldr	r2, [pc, #56]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443e:	f7fc fe7d 	bl	800113c <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004444:	e008      	b.n	8004458 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004446:	f7fc fe79 	bl	800113c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <RCCEx_PLL3_Config+0x15c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	ffff0007 	.word	0xffff0007

08004478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e049      	b.n	800451e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fc64 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fab8 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e049      	b.n	80045cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f841 	bl	80045d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f000 fa61 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x24>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e03c      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start+0x3e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e02f      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x58>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e022      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x72>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e015      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x8c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0a1      	b.n	80047d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xb6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	e023      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xc6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	e01b      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xd6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	e013      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0xe6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046cc:	e00b      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0xf6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046dc:	e003      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fd18 	bl	8005124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <HAL_TIM_PWM_Start+0x1f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIM_PWM_Start+0x13e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a37      	ldr	r2, [pc, #220]	@ (80047e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_PWM_Start+0x13e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a35      	ldr	r2, [pc, #212]	@ (80047e4 <HAL_TIM_PWM_Start+0x1fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIM_PWM_Start+0x13e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a34      	ldr	r2, [pc, #208]	@ (80047e8 <HAL_TIM_PWM_Start+0x200>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_PWM_Start+0x13e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a32      	ldr	r2, [pc, #200]	@ (80047ec <HAL_TIM_PWM_Start+0x204>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_Start+0x142>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_TIM_PWM_Start+0x144>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a25      	ldr	r2, [pc, #148]	@ (80047dc <HAL_TIM_PWM_Start+0x1f4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <HAL_TIM_PWM_Start+0x208>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <HAL_TIM_PWM_Start+0x20c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <HAL_TIM_PWM_Start+0x210>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1e      	ldr	r2, [pc, #120]	@ (80047fc <HAL_TIM_PWM_Start+0x214>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <HAL_TIM_PWM_Start+0x1fc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d115      	bne.n	80047bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <HAL_TIM_PWM_Start+0x218>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d015      	beq.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d011      	beq.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	e008      	b.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e000      	b.n	80047d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40001800 	.word	0x40001800
 8004800:	00010007 	.word	0x00010007

08004804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800481e:	2302      	movs	r3, #2
 8004820:	e0ff      	b.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b14      	cmp	r3, #20
 800482e:	f200 80f0 	bhi.w	8004a12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004832:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004a13 	.word	0x08004a13
 8004840:	08004a13 	.word	0x08004a13
 8004844:	08004a13 	.word	0x08004a13
 8004848:	080048cd 	.word	0x080048cd
 800484c:	08004a13 	.word	0x08004a13
 8004850:	08004a13 	.word	0x08004a13
 8004854:	08004a13 	.word	0x08004a13
 8004858:	0800490f 	.word	0x0800490f
 800485c:	08004a13 	.word	0x08004a13
 8004860:	08004a13 	.word	0x08004a13
 8004864:	08004a13 	.word	0x08004a13
 8004868:	0800494f 	.word	0x0800494f
 800486c:	08004a13 	.word	0x08004a13
 8004870:	08004a13 	.word	0x08004a13
 8004874:	08004a13 	.word	0x08004a13
 8004878:	08004991 	.word	0x08004991
 800487c:	08004a13 	.word	0x08004a13
 8004880:	08004a13 	.word	0x08004a13
 8004884:	08004a13 	.word	0x08004a13
 8004888:	080049d1 	.word	0x080049d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f970 	bl	8004b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6999      	ldr	r1, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	619a      	str	r2, [r3, #24]
      break;
 80048ca:	e0a5      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f9e0 	bl	8004c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6999      	ldr	r1, [r3, #24]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	619a      	str	r2, [r3, #24]
      break;
 800490c:	e084      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fa49 	bl	8004dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0208 	orr.w	r2, r2, #8
 8004928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0204 	bic.w	r2, r2, #4
 8004938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	61da      	str	r2, [r3, #28]
      break;
 800494c:	e064      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fab1 	bl	8004ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	021a      	lsls	r2, r3, #8
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	61da      	str	r2, [r3, #28]
      break;
 800498e:	e043      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fafa 	bl	8004f90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0208 	orr.w	r2, r2, #8
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049ce:	e023      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb3e 	bl	8005058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a10:	e002      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
      break;
 8004a16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop

08004a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	@ (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a43      	ldr	r2, [pc, #268]	@ (8004b5c <TIM_Base_SetConfig+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a42      	ldr	r2, [pc, #264]	@ (8004b60 <TIM_Base_SetConfig+0x134>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a41      	ldr	r2, [pc, #260]	@ (8004b64 <TIM_Base_SetConfig+0x138>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a40      	ldr	r2, [pc, #256]	@ (8004b68 <TIM_Base_SetConfig+0x13c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a35      	ldr	r2, [pc, #212]	@ (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01f      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a8c:	d01b      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a32      	ldr	r2, [pc, #200]	@ (8004b5c <TIM_Base_SetConfig+0x130>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d017      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a31      	ldr	r2, [pc, #196]	@ (8004b60 <TIM_Base_SetConfig+0x134>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	@ (8004b64 <TIM_Base_SetConfig+0x138>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00f      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b68 <TIM_Base_SetConfig+0x13c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b6c <TIM_Base_SetConfig+0x140>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b70 <TIM_Base_SetConfig+0x144>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_Base_SetConfig+0x9a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b74 <TIM_Base_SetConfig+0x148>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00f      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a18      	ldr	r2, [pc, #96]	@ (8004b68 <TIM_Base_SetConfig+0x13c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	@ (8004b6c <TIM_Base_SetConfig+0x140>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d007      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a16      	ldr	r2, [pc, #88]	@ (8004b70 <TIM_Base_SetConfig+0x144>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	@ (8004b74 <TIM_Base_SetConfig+0x148>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800

08004b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f023 0201 	bic.w	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <TIM_OC1_SetConfig+0x108>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 0302 	bic.w	r3, r3, #2
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	@ (8004c84 <TIM_OC1_SetConfig+0x10c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00f      	beq.n	8004bf4 <TIM_OC1_SetConfig+0x7c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c88 <TIM_OC1_SetConfig+0x110>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_OC1_SetConfig+0x7c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2b      	ldr	r2, [pc, #172]	@ (8004c8c <TIM_OC1_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_OC1_SetConfig+0x7c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <TIM_OC1_SetConfig+0x118>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC1_SetConfig+0x7c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <TIM_OC1_SetConfig+0x11c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d10c      	bne.n	8004c0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0308 	bic.w	r3, r3, #8
 8004bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	@ (8004c84 <TIM_OC1_SetConfig+0x10c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <TIM_OC1_SetConfig+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	@ (8004c88 <TIM_OC1_SetConfig+0x110>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_OC1_SetConfig+0xbe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <TIM_OC1_SetConfig+0x114>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_OC1_SetConfig+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <TIM_OC1_SetConfig+0x118>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_OC1_SetConfig+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <TIM_OC1_SetConfig+0x11c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d111      	bne.n	8004c5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	fffeff8f 	.word	0xfffeff8f
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 0210 	bic.w	r2, r3, #16
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4b34      	ldr	r3, [pc, #208]	@ (8004d94 <TIM_OC2_SetConfig+0xfc>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0320 	bic.w	r3, r3, #32
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a29      	ldr	r2, [pc, #164]	@ (8004d98 <TIM_OC2_SetConfig+0x100>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC2_SetConfig+0x68>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a28      	ldr	r2, [pc, #160]	@ (8004d9c <TIM_OC2_SetConfig+0x104>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10d      	bne.n	8004d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d98 <TIM_OC2_SetConfig+0x100>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_OC2_SetConfig+0xac>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <TIM_OC2_SetConfig+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_OC2_SetConfig+0xac>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <TIM_OC2_SetConfig+0x108>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_OC2_SetConfig+0xac>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1b      	ldr	r2, [pc, #108]	@ (8004da4 <TIM_OC2_SetConfig+0x10c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_OC2_SetConfig+0xac>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004da8 <TIM_OC2_SetConfig+0x110>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d113      	bne.n	8004d6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	feff8fff 	.word	0xfeff8fff
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800

08004dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ea4 <TIM_OC3_SetConfig+0xf8>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a28      	ldr	r2, [pc, #160]	@ (8004ea8 <TIM_OC3_SetConfig+0xfc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC3_SetConfig+0x66>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <TIM_OC3_SetConfig+0x100>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10d      	bne.n	8004e2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <TIM_OC3_SetConfig+0xfc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_OC3_SetConfig+0xaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	@ (8004eac <TIM_OC3_SetConfig+0x100>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_OC3_SetConfig+0xaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb0 <TIM_OC3_SetConfig+0x104>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_OC3_SetConfig+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb4 <TIM_OC3_SetConfig+0x108>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_OC3_SetConfig+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <TIM_OC3_SetConfig+0x10c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d113      	bne.n	8004e7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	fffeff8f 	.word	0xfffeff8f
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <TIM_OC4_SetConfig+0xbc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <TIM_OC4_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00f      	beq.n	8004f3c <TIM_OC4_SetConfig+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <TIM_OC4_SetConfig+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_OC4_SetConfig+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a17      	ldr	r2, [pc, #92]	@ (8004f84 <TIM_OC4_SetConfig+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_OC4_SetConfig+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a16      	ldr	r2, [pc, #88]	@ (8004f88 <TIM_OC4_SetConfig+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC4_SetConfig+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a15      	ldr	r2, [pc, #84]	@ (8004f8c <TIM_OC4_SetConfig+0xd0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d109      	bne.n	8004f50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	019b      	lsls	r3, r3, #6
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	feff8fff 	.word	0xfeff8fff
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800

08004f90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <TIM_OC5_SetConfig+0xb0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <TIM_OC5_SetConfig+0xb4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_OC5_SetConfig+0x76>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <TIM_OC5_SetConfig+0xb8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_OC5_SetConfig+0x76>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <TIM_OC5_SetConfig+0xbc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_OC5_SetConfig+0x76>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <TIM_OC5_SetConfig+0xc0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_OC5_SetConfig+0x76>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <TIM_OC5_SetConfig+0xc4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d109      	bne.n	800501a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	fffeff8f 	.word	0xfffeff8f
 8005044:	40010000 	.word	0x40010000
 8005048:	40010400 	.word	0x40010400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4b22      	ldr	r3, [pc, #136]	@ (800510c <TIM_OC6_SetConfig+0xb4>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800509a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <TIM_OC6_SetConfig+0xb8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00f      	beq.n	80050d0 <TIM_OC6_SetConfig+0x78>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <TIM_OC6_SetConfig+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_OC6_SetConfig+0x78>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <TIM_OC6_SetConfig+0xc0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_OC6_SetConfig+0x78>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a16      	ldr	r2, [pc, #88]	@ (800511c <TIM_OC6_SetConfig+0xc4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC6_SetConfig+0x78>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <TIM_OC6_SetConfig+0xc8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	feff8fff 	.word	0xfeff8fff
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2201      	movs	r2, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e042      	b.n	8005206 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fe88 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	@ 0x24
 800519c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fd91 	bl	8005ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f826 	bl	8005210 <UART_SetConfig>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e01b      	b.n	8005206 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fe10 	bl	8005e24 <UART_CheckIdleState>
 8005204:	4603      	mov	r3, r0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005214:	b092      	sub	sp, #72	@ 0x48
 8005216:	af00      	add	r7, sp, #0
 8005218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	431a      	orrs	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	431a      	orrs	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	4313      	orrs	r3, r2
 8005236:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4bbe      	ldr	r3, [pc, #760]	@ (8005538 <UART_SetConfig+0x328>)
 8005240:	4013      	ands	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4ab3      	ldr	r2, [pc, #716]	@ (800553c <UART_SetConfig+0x32c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005278:	4313      	orrs	r3, r2
 800527a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	4baf      	ldr	r3, [pc, #700]	@ (8005540 <UART_SetConfig+0x330>)
 8005284:	4013      	ands	r3, r2
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800528c:	430b      	orrs	r3, r1
 800528e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005296:	f023 010f 	bic.w	r1, r3, #15
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4aa6      	ldr	r2, [pc, #664]	@ (8005544 <UART_SetConfig+0x334>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d177      	bne.n	80053a0 <UART_SetConfig+0x190>
 80052b0:	4ba5      	ldr	r3, [pc, #660]	@ (8005548 <UART_SetConfig+0x338>)
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b8:	2b28      	cmp	r3, #40	@ 0x28
 80052ba:	d86d      	bhi.n	8005398 <UART_SetConfig+0x188>
 80052bc:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <UART_SetConfig+0xb4>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	08005369 	.word	0x08005369
 80052c8:	08005399 	.word	0x08005399
 80052cc:	08005399 	.word	0x08005399
 80052d0:	08005399 	.word	0x08005399
 80052d4:	08005399 	.word	0x08005399
 80052d8:	08005399 	.word	0x08005399
 80052dc:	08005399 	.word	0x08005399
 80052e0:	08005399 	.word	0x08005399
 80052e4:	08005371 	.word	0x08005371
 80052e8:	08005399 	.word	0x08005399
 80052ec:	08005399 	.word	0x08005399
 80052f0:	08005399 	.word	0x08005399
 80052f4:	08005399 	.word	0x08005399
 80052f8:	08005399 	.word	0x08005399
 80052fc:	08005399 	.word	0x08005399
 8005300:	08005399 	.word	0x08005399
 8005304:	08005379 	.word	0x08005379
 8005308:	08005399 	.word	0x08005399
 800530c:	08005399 	.word	0x08005399
 8005310:	08005399 	.word	0x08005399
 8005314:	08005399 	.word	0x08005399
 8005318:	08005399 	.word	0x08005399
 800531c:	08005399 	.word	0x08005399
 8005320:	08005399 	.word	0x08005399
 8005324:	08005381 	.word	0x08005381
 8005328:	08005399 	.word	0x08005399
 800532c:	08005399 	.word	0x08005399
 8005330:	08005399 	.word	0x08005399
 8005334:	08005399 	.word	0x08005399
 8005338:	08005399 	.word	0x08005399
 800533c:	08005399 	.word	0x08005399
 8005340:	08005399 	.word	0x08005399
 8005344:	08005389 	.word	0x08005389
 8005348:	08005399 	.word	0x08005399
 800534c:	08005399 	.word	0x08005399
 8005350:	08005399 	.word	0x08005399
 8005354:	08005399 	.word	0x08005399
 8005358:	08005399 	.word	0x08005399
 800535c:	08005399 	.word	0x08005399
 8005360:	08005399 	.word	0x08005399
 8005364:	08005391 	.word	0x08005391
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e222      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e21e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e21a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e216      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005388:	2320      	movs	r3, #32
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e212      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005390:	2340      	movs	r3, #64	@ 0x40
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e20e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e20a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a69      	ldr	r2, [pc, #420]	@ (800554c <UART_SetConfig+0x33c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d130      	bne.n	800540c <UART_SetConfig+0x1fc>
 80053aa:	4b67      	ldr	r3, [pc, #412]	@ (8005548 <UART_SetConfig+0x338>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d826      	bhi.n	8005404 <UART_SetConfig+0x1f4>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0x1ac>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053d5 	.word	0x080053d5
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e1ec      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e1e8      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e1e4      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e1e0      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053f4:	2320      	movs	r3, #32
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e1dc      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80053fc:	2340      	movs	r3, #64	@ 0x40
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e1d8      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e1d4      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a4f      	ldr	r2, [pc, #316]	@ (8005550 <UART_SetConfig+0x340>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d130      	bne.n	8005478 <UART_SetConfig+0x268>
 8005416:	4b4c      	ldr	r3, [pc, #304]	@ (8005548 <UART_SetConfig+0x338>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d826      	bhi.n	8005470 <UART_SetConfig+0x260>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <UART_SetConfig+0x218>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005441 	.word	0x08005441
 800542c:	08005449 	.word	0x08005449
 8005430:	08005451 	.word	0x08005451
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e1b6      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e1b2      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e1ae      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e1aa      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e1a6      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005468:	2340      	movs	r3, #64	@ 0x40
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e1a2      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e19e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a35      	ldr	r2, [pc, #212]	@ (8005554 <UART_SetConfig+0x344>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d130      	bne.n	80054e4 <UART_SetConfig+0x2d4>
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <UART_SetConfig+0x338>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b05      	cmp	r3, #5
 800548c:	d826      	bhi.n	80054dc <UART_SetConfig+0x2cc>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <UART_SetConfig+0x284>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e180      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e17c      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e178      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e174      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054cc:	2320      	movs	r3, #32
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e170      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054d4:	2340      	movs	r3, #64	@ 0x40
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e16c      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054dc:	2380      	movs	r3, #128	@ 0x80
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e168      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <UART_SetConfig+0x348>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d142      	bne.n	8005574 <UART_SetConfig+0x364>
 80054ee:	4b16      	ldr	r3, [pc, #88]	@ (8005548 <UART_SetConfig+0x338>)
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d838      	bhi.n	800556c <UART_SetConfig+0x35c>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <UART_SetConfig+0x2f0>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005519 	.word	0x08005519
 8005504:	08005521 	.word	0x08005521
 8005508:	08005529 	.word	0x08005529
 800550c:	08005531 	.word	0x08005531
 8005510:	0800555d 	.word	0x0800555d
 8005514:	08005565 	.word	0x08005565
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e14a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e146      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e142      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e13e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005538:	cfff69f3 	.word	0xcfff69f3
 800553c:	58000c00 	.word	0x58000c00
 8005540:	11fff4ff 	.word	0x11fff4ff
 8005544:	40011000 	.word	0x40011000
 8005548:	58024400 	.word	0x58024400
 800554c:	40004400 	.word	0x40004400
 8005550:	40004800 	.word	0x40004800
 8005554:	40004c00 	.word	0x40004c00
 8005558:	40005000 	.word	0x40005000
 800555c:	2320      	movs	r3, #32
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e128      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005564:	2340      	movs	r3, #64	@ 0x40
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e124      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e120      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4acb      	ldr	r2, [pc, #812]	@ (80058a8 <UART_SetConfig+0x698>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d176      	bne.n	800566c <UART_SetConfig+0x45c>
 800557e:	4bcb      	ldr	r3, [pc, #812]	@ (80058ac <UART_SetConfig+0x69c>)
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005586:	2b28      	cmp	r3, #40	@ 0x28
 8005588:	d86c      	bhi.n	8005664 <UART_SetConfig+0x454>
 800558a:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <UART_SetConfig+0x380>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	08005635 	.word	0x08005635
 8005594:	08005665 	.word	0x08005665
 8005598:	08005665 	.word	0x08005665
 800559c:	08005665 	.word	0x08005665
 80055a0:	08005665 	.word	0x08005665
 80055a4:	08005665 	.word	0x08005665
 80055a8:	08005665 	.word	0x08005665
 80055ac:	08005665 	.word	0x08005665
 80055b0:	0800563d 	.word	0x0800563d
 80055b4:	08005665 	.word	0x08005665
 80055b8:	08005665 	.word	0x08005665
 80055bc:	08005665 	.word	0x08005665
 80055c0:	08005665 	.word	0x08005665
 80055c4:	08005665 	.word	0x08005665
 80055c8:	08005665 	.word	0x08005665
 80055cc:	08005665 	.word	0x08005665
 80055d0:	08005645 	.word	0x08005645
 80055d4:	08005665 	.word	0x08005665
 80055d8:	08005665 	.word	0x08005665
 80055dc:	08005665 	.word	0x08005665
 80055e0:	08005665 	.word	0x08005665
 80055e4:	08005665 	.word	0x08005665
 80055e8:	08005665 	.word	0x08005665
 80055ec:	08005665 	.word	0x08005665
 80055f0:	0800564d 	.word	0x0800564d
 80055f4:	08005665 	.word	0x08005665
 80055f8:	08005665 	.word	0x08005665
 80055fc:	08005665 	.word	0x08005665
 8005600:	08005665 	.word	0x08005665
 8005604:	08005665 	.word	0x08005665
 8005608:	08005665 	.word	0x08005665
 800560c:	08005665 	.word	0x08005665
 8005610:	08005655 	.word	0x08005655
 8005614:	08005665 	.word	0x08005665
 8005618:	08005665 	.word	0x08005665
 800561c:	08005665 	.word	0x08005665
 8005620:	08005665 	.word	0x08005665
 8005624:	08005665 	.word	0x08005665
 8005628:	08005665 	.word	0x08005665
 800562c:	08005665 	.word	0x08005665
 8005630:	0800565d 	.word	0x0800565d
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e0bc      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e0b8      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e0b4      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e0b0      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005654:	2320      	movs	r3, #32
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e0ac      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800565c:	2340      	movs	r3, #64	@ 0x40
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e0a8      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e0a4      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8f      	ldr	r2, [pc, #572]	@ (80058b0 <UART_SetConfig+0x6a0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d130      	bne.n	80056d8 <UART_SetConfig+0x4c8>
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UART_SetConfig+0x69c>)
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b05      	cmp	r3, #5
 8005680:	d826      	bhi.n	80056d0 <UART_SetConfig+0x4c0>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <UART_SetConfig+0x478>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056a1 	.word	0x080056a1
 800568c:	080056a9 	.word	0x080056a9
 8005690:	080056b1 	.word	0x080056b1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e086      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e082      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e07e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e07a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056c0:	2320      	movs	r3, #32
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e076      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056c8:	2340      	movs	r3, #64	@ 0x40
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e072      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e06e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a75      	ldr	r2, [pc, #468]	@ (80058b4 <UART_SetConfig+0x6a4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d130      	bne.n	8005744 <UART_SetConfig+0x534>
 80056e2:	4b72      	ldr	r3, [pc, #456]	@ (80058ac <UART_SetConfig+0x69c>)
 80056e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d826      	bhi.n	800573c <UART_SetConfig+0x52c>
 80056ee:	a201      	add	r2, pc, #4	@ (adr r2, 80056f4 <UART_SetConfig+0x4e4>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	0800570d 	.word	0x0800570d
 80056f8:	08005715 	.word	0x08005715
 80056fc:	0800571d 	.word	0x0800571d
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e050      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005714:	2304      	movs	r3, #4
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e04c      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800571c:	2308      	movs	r3, #8
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e048      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005724:	2310      	movs	r3, #16
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e044      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800572c:	2320      	movs	r3, #32
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e040      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005734:	2340      	movs	r3, #64	@ 0x40
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e03c      	b.n	80057b6 <UART_SetConfig+0x5a6>
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e038      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a5b      	ldr	r2, [pc, #364]	@ (80058b8 <UART_SetConfig+0x6a8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d130      	bne.n	80057b0 <UART_SetConfig+0x5a0>
 800574e:	4b57      	ldr	r3, [pc, #348]	@ (80058ac <UART_SetConfig+0x69c>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b05      	cmp	r3, #5
 8005758:	d826      	bhi.n	80057a8 <UART_SetConfig+0x598>
 800575a:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <UART_SetConfig+0x550>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005779 	.word	0x08005779
 8005764:	08005781 	.word	0x08005781
 8005768:	08005789 	.word	0x08005789
 800576c:	08005791 	.word	0x08005791
 8005770:	08005799 	.word	0x08005799
 8005774:	080057a1 	.word	0x080057a1
 8005778:	2302      	movs	r3, #2
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e01a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005780:	2304      	movs	r3, #4
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e016      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005788:	2308      	movs	r3, #8
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e012      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005790:	2310      	movs	r3, #16
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e00e      	b.n	80057b6 <UART_SetConfig+0x5a6>
 8005798:	2320      	movs	r3, #32
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e00a      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80057a0:	2340      	movs	r3, #64	@ 0x40
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e006      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80057a8:	2380      	movs	r3, #128	@ 0x80
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e002      	b.n	80057b6 <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3f      	ldr	r2, [pc, #252]	@ (80058b8 <UART_SetConfig+0x6a8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	f040 80f8 	bne.w	80059b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	dc46      	bgt.n	8005858 <UART_SetConfig+0x648>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	f2c0 8082 	blt.w	80058d4 <UART_SetConfig+0x6c4>
 80057d0:	3b02      	subs	r3, #2
 80057d2:	2b1e      	cmp	r3, #30
 80057d4:	d87e      	bhi.n	80058d4 <UART_SetConfig+0x6c4>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <UART_SetConfig+0x5cc>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	0800585f 	.word	0x0800585f
 80057e0:	080058d5 	.word	0x080058d5
 80057e4:	08005867 	.word	0x08005867
 80057e8:	080058d5 	.word	0x080058d5
 80057ec:	080058d5 	.word	0x080058d5
 80057f0:	080058d5 	.word	0x080058d5
 80057f4:	08005877 	.word	0x08005877
 80057f8:	080058d5 	.word	0x080058d5
 80057fc:	080058d5 	.word	0x080058d5
 8005800:	080058d5 	.word	0x080058d5
 8005804:	080058d5 	.word	0x080058d5
 8005808:	080058d5 	.word	0x080058d5
 800580c:	080058d5 	.word	0x080058d5
 8005810:	080058d5 	.word	0x080058d5
 8005814:	08005887 	.word	0x08005887
 8005818:	080058d5 	.word	0x080058d5
 800581c:	080058d5 	.word	0x080058d5
 8005820:	080058d5 	.word	0x080058d5
 8005824:	080058d5 	.word	0x080058d5
 8005828:	080058d5 	.word	0x080058d5
 800582c:	080058d5 	.word	0x080058d5
 8005830:	080058d5 	.word	0x080058d5
 8005834:	080058d5 	.word	0x080058d5
 8005838:	080058d5 	.word	0x080058d5
 800583c:	080058d5 	.word	0x080058d5
 8005840:	080058d5 	.word	0x080058d5
 8005844:	080058d5 	.word	0x080058d5
 8005848:	080058d5 	.word	0x080058d5
 800584c:	080058d5 	.word	0x080058d5
 8005850:	080058d5 	.word	0x080058d5
 8005854:	080058c7 	.word	0x080058c7
 8005858:	2b40      	cmp	r3, #64	@ 0x40
 800585a:	d037      	beq.n	80058cc <UART_SetConfig+0x6bc>
 800585c:	e03a      	b.n	80058d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800585e:	f7fe f9e9 	bl	8003c34 <HAL_RCCEx_GetD3PCLK1Freq>
 8005862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005864:	e03c      	b.n	80058e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f9f8 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005874:	e034      	b.n	80058e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fb44 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005884:	e02c      	b.n	80058e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005886:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <UART_SetConfig+0x69c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d016      	beq.n	80058c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <UART_SetConfig+0x69c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	4a07      	ldr	r2, [pc, #28]	@ (80058bc <UART_SetConfig+0x6ac>)
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a4:	e01c      	b.n	80058e0 <UART_SetConfig+0x6d0>
 80058a6:	bf00      	nop
 80058a8:	40011400 	.word	0x40011400
 80058ac:	58024400 	.word	0x58024400
 80058b0:	40007800 	.word	0x40007800
 80058b4:	40007c00 	.word	0x40007c00
 80058b8:	58000c00 	.word	0x58000c00
 80058bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005b38 <UART_SetConfig+0x928>)
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c4:	e00c      	b.n	80058e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058c6:	4b9d      	ldr	r3, [pc, #628]	@ (8005b3c <UART_SetConfig+0x92c>)
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ca:	e009      	b.n	80058e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d2:	e005      	b.n	80058e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 81de 	beq.w	8005ca4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	4a94      	ldr	r2, [pc, #592]	@ (8005b40 <UART_SetConfig+0x930>)
 80058ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005908:	429a      	cmp	r2, r3
 800590a:	d305      	bcc.n	8005918 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005914:	429a      	cmp	r2, r3
 8005916:	d903      	bls.n	8005920 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800591e:	e1c1      	b.n	8005ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005922:	2200      	movs	r2, #0
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	60fa      	str	r2, [r7, #12]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	4a84      	ldr	r2, [pc, #528]	@ (8005b40 <UART_SetConfig+0x930>)
 800592e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005932:	b29b      	uxth	r3, r3
 8005934:	2200      	movs	r2, #0
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005942:	f7fa fcc9 	bl	80002d8 <__aeabi_uldivmod>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	020b      	lsls	r3, r1, #8
 8005958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800595c:	0202      	lsls	r2, r0, #8
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	6849      	ldr	r1, [r1, #4]
 8005962:	0849      	lsrs	r1, r1, #1
 8005964:	2000      	movs	r0, #0
 8005966:	460c      	mov	r4, r1
 8005968:	4605      	mov	r5, r0
 800596a:	eb12 0804 	adds.w	r8, r2, r4
 800596e:	eb43 0905 	adc.w	r9, r3, r5
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	469a      	mov	sl, r3
 800597a:	4693      	mov	fp, r2
 800597c:	4652      	mov	r2, sl
 800597e:	465b      	mov	r3, fp
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fa fca8 	bl	80002d8 <__aeabi_uldivmod>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4613      	mov	r3, r2
 800598e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005996:	d308      	bcc.n	80059aa <UART_SetConfig+0x79a>
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800599e:	d204      	bcs.n	80059aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e17c      	b.n	8005ca4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059b0:	e178      	b.n	8005ca4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ba:	f040 80c5 	bne.w	8005b48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	dc48      	bgt.n	8005a58 <UART_SetConfig+0x848>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	db7b      	blt.n	8005ac2 <UART_SetConfig+0x8b2>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d879      	bhi.n	8005ac2 <UART_SetConfig+0x8b2>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <UART_SetConfig+0x7c4>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a5f 	.word	0x08005a5f
 80059d8:	08005a67 	.word	0x08005a67
 80059dc:	08005ac3 	.word	0x08005ac3
 80059e0:	08005ac3 	.word	0x08005ac3
 80059e4:	08005a6f 	.word	0x08005a6f
 80059e8:	08005ac3 	.word	0x08005ac3
 80059ec:	08005ac3 	.word	0x08005ac3
 80059f0:	08005ac3 	.word	0x08005ac3
 80059f4:	08005a7f 	.word	0x08005a7f
 80059f8:	08005ac3 	.word	0x08005ac3
 80059fc:	08005ac3 	.word	0x08005ac3
 8005a00:	08005ac3 	.word	0x08005ac3
 8005a04:	08005ac3 	.word	0x08005ac3
 8005a08:	08005ac3 	.word	0x08005ac3
 8005a0c:	08005ac3 	.word	0x08005ac3
 8005a10:	08005ac3 	.word	0x08005ac3
 8005a14:	08005a8f 	.word	0x08005a8f
 8005a18:	08005ac3 	.word	0x08005ac3
 8005a1c:	08005ac3 	.word	0x08005ac3
 8005a20:	08005ac3 	.word	0x08005ac3
 8005a24:	08005ac3 	.word	0x08005ac3
 8005a28:	08005ac3 	.word	0x08005ac3
 8005a2c:	08005ac3 	.word	0x08005ac3
 8005a30:	08005ac3 	.word	0x08005ac3
 8005a34:	08005ac3 	.word	0x08005ac3
 8005a38:	08005ac3 	.word	0x08005ac3
 8005a3c:	08005ac3 	.word	0x08005ac3
 8005a40:	08005ac3 	.word	0x08005ac3
 8005a44:	08005ac3 	.word	0x08005ac3
 8005a48:	08005ac3 	.word	0x08005ac3
 8005a4c:	08005ac3 	.word	0x08005ac3
 8005a50:	08005ac3 	.word	0x08005ac3
 8005a54:	08005ab5 	.word	0x08005ab5
 8005a58:	2b40      	cmp	r3, #64	@ 0x40
 8005a5a:	d02e      	beq.n	8005aba <UART_SetConfig+0x8aa>
 8005a5c:	e031      	b.n	8005ac2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a5e:	f7fc feb3 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8005a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a64:	e033      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a66:	f7fc fec5 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8005a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a6c:	e02f      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe f8f4 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a7c:	e027      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7e:	f107 0318 	add.w	r3, r7, #24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fa40 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a8c:	e01f      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b44 <UART_SetConfig+0x934>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b44 <UART_SetConfig+0x934>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	08db      	lsrs	r3, r3, #3
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	4a24      	ldr	r2, [pc, #144]	@ (8005b38 <UART_SetConfig+0x928>)
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aac:	e00f      	b.n	8005ace <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aae:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <UART_SetConfig+0x928>)
 8005ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab2:	e00c      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ab4:	4b21      	ldr	r3, [pc, #132]	@ (8005b3c <UART_SetConfig+0x92c>)
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab8:	e009      	b.n	8005ace <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac0:	e005      	b.n	8005ace <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80e7 	beq.w	8005ca4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	4a19      	ldr	r2, [pc, #100]	@ (8005b40 <UART_SetConfig+0x930>)
 8005adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae8:	005a      	lsls	r2, r3, #1
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	441a      	add	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	d916      	bls.n	8005b30 <UART_SetConfig+0x920>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b08:	d212      	bcs.n	8005b30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f023 030f 	bic.w	r3, r3, #15
 8005b12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b22:	4313      	orrs	r3, r2
 8005b24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e0b9      	b.n	8005ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b36:	e0b5      	b.n	8005ca4 <UART_SetConfig+0xa94>
 8005b38:	03d09000 	.word	0x03d09000
 8005b3c:	003d0900 	.word	0x003d0900
 8005b40:	080063a8 	.word	0x080063a8
 8005b44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	dc49      	bgt.n	8005be4 <UART_SetConfig+0x9d4>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db7c      	blt.n	8005c4e <UART_SetConfig+0xa3e>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d87a      	bhi.n	8005c4e <UART_SetConfig+0xa3e>
 8005b58:	a201      	add	r2, pc, #4	@ (adr r2, 8005b60 <UART_SetConfig+0x950>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005beb 	.word	0x08005beb
 8005b64:	08005bf3 	.word	0x08005bf3
 8005b68:	08005c4f 	.word	0x08005c4f
 8005b6c:	08005c4f 	.word	0x08005c4f
 8005b70:	08005bfb 	.word	0x08005bfb
 8005b74:	08005c4f 	.word	0x08005c4f
 8005b78:	08005c4f 	.word	0x08005c4f
 8005b7c:	08005c4f 	.word	0x08005c4f
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c4f 	.word	0x08005c4f
 8005b88:	08005c4f 	.word	0x08005c4f
 8005b8c:	08005c4f 	.word	0x08005c4f
 8005b90:	08005c4f 	.word	0x08005c4f
 8005b94:	08005c4f 	.word	0x08005c4f
 8005b98:	08005c4f 	.word	0x08005c4f
 8005b9c:	08005c4f 	.word	0x08005c4f
 8005ba0:	08005c1b 	.word	0x08005c1b
 8005ba4:	08005c4f 	.word	0x08005c4f
 8005ba8:	08005c4f 	.word	0x08005c4f
 8005bac:	08005c4f 	.word	0x08005c4f
 8005bb0:	08005c4f 	.word	0x08005c4f
 8005bb4:	08005c4f 	.word	0x08005c4f
 8005bb8:	08005c4f 	.word	0x08005c4f
 8005bbc:	08005c4f 	.word	0x08005c4f
 8005bc0:	08005c4f 	.word	0x08005c4f
 8005bc4:	08005c4f 	.word	0x08005c4f
 8005bc8:	08005c4f 	.word	0x08005c4f
 8005bcc:	08005c4f 	.word	0x08005c4f
 8005bd0:	08005c4f 	.word	0x08005c4f
 8005bd4:	08005c4f 	.word	0x08005c4f
 8005bd8:	08005c4f 	.word	0x08005c4f
 8005bdc:	08005c4f 	.word	0x08005c4f
 8005be0:	08005c41 	.word	0x08005c41
 8005be4:	2b40      	cmp	r3, #64	@ 0x40
 8005be6:	d02e      	beq.n	8005c46 <UART_SetConfig+0xa36>
 8005be8:	e031      	b.n	8005c4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bea:	f7fc fded 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8005bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bf0:	e033      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf2:	f7fc fdff 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8005bf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bf8:	e02f      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe f82e 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c08:	e027      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c0a:	f107 0318 	add.w	r3, r7, #24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe f97a 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e01f      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd0 <UART_SetConfig+0xac0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c26:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd0 <UART_SetConfig+0xac0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	08db      	lsrs	r3, r3, #3
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	4a28      	ldr	r2, [pc, #160]	@ (8005cd4 <UART_SetConfig+0xac4>)
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c38:	e00f      	b.n	8005c5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c3a:	4b26      	ldr	r3, [pc, #152]	@ (8005cd4 <UART_SetConfig+0xac4>)
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3e:	e00c      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c40:	4b25      	ldr	r3, [pc, #148]	@ (8005cd8 <UART_SetConfig+0xac8>)
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c44:	e009      	b.n	8005c5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4c:	e005      	b.n	8005c5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c58:	bf00      	nop
    }

    if (pclk != 0U)
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d021      	beq.n	8005ca4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	4a1d      	ldr	r2, [pc, #116]	@ (8005cdc <UART_SetConfig+0xacc>)
 8005c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	441a      	add	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	d909      	bls.n	8005c9e <UART_SetConfig+0xa8e>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c90:	d205      	bcs.n	8005c9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60da      	str	r2, [r3, #12]
 8005c9c:	e002      	b.n	8005ca4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cc0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3748      	adds	r7, #72	@ 0x48
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cce:	bf00      	nop
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	03d09000 	.word	0x03d09000
 8005cd8:	003d0900 	.word	0x003d0900
 8005cdc:	080063a8 	.word	0x080063a8

08005ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dde:	d10a      	bne.n	8005df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b098      	sub	sp, #96	@ 0x60
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e34:	f7fb f982 	bl	800113c <HAL_GetTick>
 8005e38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d12f      	bne.n	8005ea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e50:	2200      	movs	r2, #0
 8005e52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f88e 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d022      	beq.n	8005ea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e063      	b.n	8005f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d149      	bne.n	8005f4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f857 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d03c      	beq.n	8005f4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e6      	bne.n	8005ed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f22:	61fa      	str	r2, [r7, #28]
 8005f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	69b9      	ldr	r1, [r7, #24]
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e5      	bne.n	8005f02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e012      	b.n	8005f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3758      	adds	r7, #88	@ 0x58
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f88:	e04f      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d04b      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fb f8d3 	bl	800113c <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e04e      	b.n	800604a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d037      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b80      	cmp	r3, #128	@ 0x80
 8005fbe:	d034      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b40      	cmp	r3, #64	@ 0x40
 8005fc4:	d031      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d110      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f839 	bl	8006054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e029      	b.n	800604a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006004:	d111      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800600e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f81f 	bl	8006054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e00f      	b.n	800604a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d0a0      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b095      	sub	sp, #84	@ 0x54
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800607a:	643b      	str	r3, [r7, #64]	@ 0x40
 800607c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e6      	bne.n	800605c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	61fb      	str	r3, [r7, #28]
   return(result);
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	4b1e      	ldr	r3, [pc, #120]	@ (800611c <UART_EndRxTransfer+0xc8>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d118      	bne.n	80060fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006110:	bf00      	nop
 8006112:	3754      	adds	r7, #84	@ 0x54
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	effffffe 	.word	0xeffffffe

08006120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_UARTEx_DisableFifoMode+0x16>
 8006132:	2302      	movs	r3, #2
 8006134:	e027      	b.n	8006186 <HAL_UARTEx_DisableFifoMode+0x66>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2224      	movs	r2, #36	@ 0x24
 8006142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006164:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e02d      	b.n	8006206 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2224      	movs	r2, #36	@ 0x24
 80061b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f850 	bl	800628c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006222:	2302      	movs	r3, #2
 8006224:	e02d      	b.n	8006282 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2224      	movs	r2, #36	@ 0x24
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f812 	bl	800628c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ac:	e031      	b.n	8006312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ae:	2310      	movs	r3, #16
 80062b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062b2:	2310      	movs	r3, #16
 80062b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	0e5b      	lsrs	r3, r3, #25
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	0f5b      	lsrs	r3, r3, #29
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	7b3a      	ldrb	r2, [r7, #12]
 80062da:	4911      	ldr	r1, [pc, #68]	@ (8006320 <UARTEx_SetNbDataToProcess+0x94>)
 80062dc:	5c8a      	ldrb	r2, [r1, r2]
 80062de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062e2:	7b3a      	ldrb	r2, [r7, #12]
 80062e4:	490f      	ldr	r1, [pc, #60]	@ (8006324 <UARTEx_SetNbDataToProcess+0x98>)
 80062e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	7b7a      	ldrb	r2, [r7, #13]
 80062f8:	4909      	ldr	r1, [pc, #36]	@ (8006320 <UARTEx_SetNbDataToProcess+0x94>)
 80062fa:	5c8a      	ldrb	r2, [r1, r2]
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006300:	7b7a      	ldrb	r2, [r7, #13]
 8006302:	4908      	ldr	r1, [pc, #32]	@ (8006324 <UARTEx_SetNbDataToProcess+0x98>)
 8006304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006306:	fb93 f3f2 	sdiv	r3, r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	080063c0 	.word	0x080063c0
 8006324:	080063c8 	.word	0x080063c8

08006328 <memset>:
 8006328:	4402      	add	r2, r0
 800632a:	4603      	mov	r3, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	d100      	bne.n	8006332 <memset+0xa>
 8006330:	4770      	bx	lr
 8006332:	f803 1b01 	strb.w	r1, [r3], #1
 8006336:	e7f9      	b.n	800632c <memset+0x4>

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4d0d      	ldr	r5, [pc, #52]	@ (8006370 <__libc_init_array+0x38>)
 800633c:	4c0d      	ldr	r4, [pc, #52]	@ (8006374 <__libc_init_array+0x3c>)
 800633e:	1b64      	subs	r4, r4, r5
 8006340:	10a4      	asrs	r4, r4, #2
 8006342:	2600      	movs	r6, #0
 8006344:	42a6      	cmp	r6, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	4d0b      	ldr	r5, [pc, #44]	@ (8006378 <__libc_init_array+0x40>)
 800634a:	4c0c      	ldr	r4, [pc, #48]	@ (800637c <__libc_init_array+0x44>)
 800634c:	f000 f818 	bl	8006380 <_init>
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	2600      	movs	r6, #0
 8006356:	42a6      	cmp	r6, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006360:	4798      	blx	r3
 8006362:	3601      	adds	r6, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f855 3b04 	ldr.w	r3, [r5], #4
 800636a:	4798      	blx	r3
 800636c:	3601      	adds	r6, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	080063d8 	.word	0x080063d8
 8006374:	080063d8 	.word	0x080063d8
 8006378:	080063d8 	.word	0x080063d8
 800637c:	080063dc 	.word	0x080063dc

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
