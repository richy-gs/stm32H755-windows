
stm32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d0  080063d0  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080063d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  080063e8  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  080063e8  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013121  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217c  00000000  00000000  0001b15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  0001e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a06f  00000000  00000000  0001edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013683  00000000  00000000  00058e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185b6a  00000000  00000000  0006c4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  001f2098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f6134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006378 	.word	0x08006378

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006378 	.word	0x08006378

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <Motor_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Motor_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <Motor_Init+0x24>)
 80006fc:	f003 ff70 	bl	80045e0 <HAL_TIM_PWM_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <Motor_Init+0x16>
	  {
	  	  Error_Handler();
 8000706:	f000 fb0d 	bl	8000d24 <Error_Handler>
	  }
	  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 1500);
 800070a:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <Motor_Init+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000078 	.word	0x24000078

0800071c <Servo_Init>:
{
   Motor_SetSpeed2(0,1000);
}

void Servo_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <Servo_Init+0x24>)
 8000724:	f003 ff5c 	bl	80045e0 <HAL_TIM_PWM_Start>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <Servo_Init+0x16>
	  {
		  Error_Handler();
 800072e:	f000 faf9 	bl	8000d24 <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, 1500);
 8000732:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <Servo_Init+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2400002c 	.word	0x2400002c

08000744 <Servo_SetAngle>:

// Function to set the servo position (angle)
void Servo_SetAngle(int angle)		// Angle betweeen
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	const uint32_t change = 10;
 800074c:	230a      	movs	r3, #10
 800074e:	613b      	str	r3, [r7, #16]
	uint32_t delay = 10;
 8000750:	230a      	movs	r3, #10
 8000752:	60fb      	str	r3, [r7, #12]
	uint32_t x = TIM13->CCR1;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <Servo_SetAngle+0x90>)
 8000756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000758:	617b      	str	r3, [r7, #20]


	if(angle > 60) angle = 60;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b3c      	cmp	r3, #60	@ 0x3c
 800075e:	dd02      	ble.n	8000766 <Servo_SetAngle+0x22>
 8000760:	233c      	movs	r3, #60	@ 0x3c
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	e006      	b.n	8000774 <Servo_SetAngle+0x30>
	else if (angle < -50) angle = -50;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 800076c:	da02      	bge.n	8000774 <Servo_SetAngle+0x30>
 800076e:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8000772:	607b      	str	r3, [r7, #4]

	int newAngle = 1500 + (angle*9);
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000780:	60bb      	str	r3, [r7, #8]

	while(abs(newAngle - x) > 10)
 8000782:	e016      	b.n	80007b2 <Servo_SetAngle+0x6e>
	{
		if (newAngle > x) x = x + change;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	429a      	cmp	r2, r3
 800078a:	d204      	bcs.n	8000796 <Servo_SetAngle+0x52>
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4413      	add	r3, r2
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e007      	b.n	80007a6 <Servo_SetAngle+0x62>
		else if (newAngle < x) x = x - change;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	429a      	cmp	r2, r3
 800079c:	d903      	bls.n	80007a6 <Servo_SetAngle+0x62>
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]

		TIM13->CCR1 = (uint32_t) x;
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <Servo_SetAngle+0x90>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(delay);
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f000 fccd 	bl	800114c <HAL_Delay>
	while(abs(newAngle - x) > 10)
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bfb8      	it	lt
 80007bc:	425b      	neglt	r3, r3
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	dce0      	bgt.n	8000784 <Servo_SetAngle+0x40>
	}
	HAL_Delay(2000);
 80007c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c6:	f000 fcc1 	bl	800114c <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40001c00 	.word	0x40001c00

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007e2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e4:	bf00      	nop
 80007e6:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <main+0xcc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <main+0x24>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dcf4      	bgt.n	80007e6 <main+0xe>
  if ( timeout < 0 )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da01      	bge.n	8000806 <main+0x2e>
  {
  Error_Handler();
 8000802:	f000 fa8f 	bl	8000d24 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fc0f 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f84f 	bl	80008ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <main+0xcc>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <main+0xcc>)
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <main+0xcc>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800082c:	2000      	movs	r0, #0
 800082e:	f000 ff85 	bl	800173c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f000 ff9b 	bl	8001770 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800083a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800083e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000840:	bf00      	nop
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <main+0xcc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <main+0x80>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dcf4      	bgt.n	8000842 <main+0x6a>
if ( timeout < 0 )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da01      	bge.n	8000862 <main+0x8a>
{
Error_Handler();
 800085e:	f000 fa61 	bl	8000d24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f985 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000866:	f000 f937 	bl	8000ad8 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800086a:	f000 f8e7 	bl	8000a3c <MX_TIM14_Init>
  MX_TIM13_Init();
 800086e:	f000 f897 	bl	80009a0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8000872:	f7ff ff53 	bl	800071c <Servo_Init>
  Motor_Init();
 8000876:	f7ff ff3d 	bl	80006f4 <Motor_Init>
  HAL_Delay(100);
 800087a:	2064      	movs	r0, #100	@ 0x64
 800087c:	f000 fc66 	bl	800114c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Servo_SetAngle(60);
 8000880:	203c      	movs	r0, #60	@ 0x3c
 8000882:	f7ff ff5f 	bl	8000744 <Servo_SetAngle>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000886:	2101      	movs	r1, #1
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <main+0xd0>)
 800088a:	f000 ff3c 	bl	8001706 <HAL_GPIO_TogglePin>
	  Servo_SetAngle(-50);
 800088e:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8000892:	f7ff ff57 	bl	8000744 <Servo_SetAngle>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000896:	2101      	movs	r1, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <main+0xd0>)
 800089a:	f000 ff34 	bl	8001706 <HAL_GPIO_TogglePin>
	  Servo_SetAngle(60);
 800089e:	bf00      	nop
 80008a0:	e7ee      	b.n	8000880 <main+0xa8>
 80008a2:	bf00      	nop
 80008a4:	58024400 	.word	0x58024400
 80008a8:	58020400 	.word	0x58020400

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	@ 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	224c      	movs	r2, #76	@ 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fd30 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fd2a 	bl	8006320 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f000 ff63 	bl	8001798 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <SystemClock_Config+0xec>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a2f      	ldr	r2, [pc, #188]	@ (8000998 <SystemClock_Config+0xec>)
 80008dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <SystemClock_Config+0xec>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <SystemClock_Config+0xf0>)
 80008ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f0:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <SystemClock_Config+0xf0>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008f8:	4b28      	ldr	r3, [pc, #160]	@ (800099c <SystemClock_Config+0xf0>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xec>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800092a:	23f0      	movs	r3, #240	@ 0xf0
 800092c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000932:	2305      	movs	r3, #5
 8000934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800093a:	2308      	movs	r3, #8
 800093c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff7e 	bl	800184c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 f9e5 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	@ 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000966:	2308      	movs	r3, #8
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2104      	movs	r1, #4
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fbbd 	bl	8002100 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800098c:	f000 f9ca 	bl	8000d24 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	@ 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024800 	.word	0x58024800
 800099c:	58000400 	.word	0x58000400

080009a0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000a38 <MX_TIM13_Init+0x98>)
 80009bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009c0:	22ef      	movs	r2, #239	@ 0xef
 80009c2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009cc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009d0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009e0:	f003 fd46 	bl	8004470 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009ea:	f000 f99b 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009ee:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <MX_TIM13_Init+0x94>)
 80009f0:	f003 fd95 	bl	800451e <HAL_TIM_PWM_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80009fa:	f000 f993 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	@ 0x60
 8000a00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a02:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <MX_TIM13_Init+0x94>)
 8000a18:	f003 fef0 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000a22:	f000 f97f 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a26:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <MX_TIM13_Init+0x94>)
 8000a28:	f000 f9d6 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2400002c 	.word	0x2400002c
 8000a38:	40001c00 	.word	0x40001c00

08000a3c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad4 <MX_TIM14_Init+0x98>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a5c:	22ef      	movs	r2, #239	@ 0xef
 8000a5e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a68:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a6c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a7a:	4815      	ldr	r0, [pc, #84]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a7c:	f003 fcf8 	bl	8004470 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a86:	f000 f94d 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000a8c:	f003 fd47 	bl	800451e <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 f945 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	@ 0x60
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a9e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000ab4:	f003 fea2 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000abe:	f000 f931 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ac2:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM14_Init+0x94>)
 8000ac4:	f000 f988 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	24000078 	.word	0x24000078
 8000ad4:	40002000 	.word	0x40002000

08000ad8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <MX_USART3_UART_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000ae4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b22:	f004 fb20 	bl	8005166 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 f8fa 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b34:	f005 fb29 	bl	800618a <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 f8f1 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b46:	f005 fb5e 	bl	8006206 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f8e8 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b56:	f005 fadf 	bl	8006118 <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 f8e0 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	240000c4 	.word	0x240000c4
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	@ 0x30
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b86:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a60      	ldr	r2, [pc, #384]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000b8e:	f043 0320 	orr.w	r3, r3, #32
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b5e      	ldr	r3, [pc, #376]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	4a59      	ldr	r2, [pc, #356]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb4:	4b56      	ldr	r3, [pc, #344]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b53      	ldr	r3, [pc, #332]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a51      	ldr	r2, [pc, #324]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b4b      	ldr	r3, [pc, #300]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a4a      	ldr	r2, [pc, #296]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a42      	ldr	r2, [pc, #264]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b40      	ldr	r3, [pc, #256]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	4a3b      	ldr	r2, [pc, #236]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2c:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <MX_GPIO_Init+0x1a0>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4835      	ldr	r0, [pc, #212]	@ (8000d14 <MX_GPIO_Init+0x1a4>)
 8000c40:	f000 fd48 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2332      	movs	r3, #50	@ 0x32
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c60:	f000 fb88 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c64:	2386      	movs	r3, #134	@ 0x86
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4827      	ldr	r0, [pc, #156]	@ (8000d1c <MX_GPIO_Init+0x1ac>)
 8000c80:	f000 fb78 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481e      	ldr	r0, [pc, #120]	@ (8000d14 <MX_GPIO_Init+0x1a4>)
 8000c9c:	f000 fb6a 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <MX_GPIO_Init+0x1a4>)
 8000cbe:	f000 fb59 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cc2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <MX_GPIO_Init+0x1ac>)
 8000ce0:	f000 fb48 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ce4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_GPIO_Init+0x1b0>)
 8000d02:	f000 fb37 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	@ 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	58021800 	.word	0x58021800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <HAL_TIM_Base_MspInit+0x68>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10f      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d94:	e013      	b.n	8000dbe <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x70>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d10e      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40001c00 	.word	0x40001c00
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	40002000 	.word	0x40002000

08000dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a26      	ldr	r2, [pc, #152]	@ (8000e90 <HAL_TIM_MspPostInit+0xb8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d120      	bne.n	8000e3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a24      	ldr	r2, [pc, #144]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000e02:	f043 0320 	orr.w	r3, r3, #32
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4818      	ldr	r0, [pc, #96]	@ (8000e98 <HAL_TIM_MspPostInit+0xc0>)
 8000e36:	f000 fa9d 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000e3a:	e024      	b.n	8000e86 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <HAL_TIM_MspPostInit+0xc4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d11f      	bne.n	8000e86 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_TIM_MspPostInit+0xbc>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8000e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000e76:	2309      	movs	r3, #9
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_TIM_MspPostInit+0xc0>)
 8000e82:	f000 fa77 	bl	8001374 <HAL_GPIO_Init>
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40001c00 	.word	0x40001c00
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58021400 	.word	0x58021400
 8000e9c:	40002000 	.word	0x40002000

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	22c0      	movs	r2, #192	@ 0xc0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fa2d 	bl	8006320 <memset>
  if(huart->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <HAL_UART_MspInit+0xc8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d146      	bne.n	8000f5e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed0:	f04f 0202 	mov.w	r2, #2
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fc96 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ef2:	f7ff ff17 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_UART_MspInit+0xcc>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RT_Pin|STLINK_TX_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_UART_MspInit+0xd0>)
 8000f5a:	f000 fa0b 	bl	8001374 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	37e8      	adds	r7, #232	@ 0xe8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020c00 	.word	0x58020c00

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 f89f 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800100c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd8:	f7ff faf6 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f005 f995 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fbe7 	bl	80007d8 <main>
  bx  lr
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001010:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001014:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001018:	080063d8 	.word	0x080063d8
  ldr r2, =_sbss
 800101c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001020:	2400015c 	.word	0x2400015c

08001024 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC3_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 f96e 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001034:	f001 fa1a 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4913      	ldr	r1, [pc, #76]	@ (8001094 <HAL_Init+0x6c>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_Init+0x68>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <HAL_Init+0x6c>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_Init+0x70>)
 800106a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800106c:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <HAL_Init+0x74>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f814 	bl	80010a0 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e002      	b.n	8001088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001082:	f7ff fe55 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400
 8001094:	08006390 	.word	0x08006390
 8001098:	24000004 	.word	0x24000004
 800109c:	24000000 	.word	0x24000000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_InitTick+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e021      	b.n	80010f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_InitTick+0x64>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f945 	bl	800135a <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f91d 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x68>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400000c 	.word	0x2400000c
 8001104:	24000000 	.word	0x24000000
 8001108:	24000008 	.word	0x24000008

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2400000c 	.word	0x2400000c
 8001130:	24000158 	.word	0x24000158

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24000158 	.word	0x24000158

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2400000c 	.word	0x2400000c

08001194 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetREVID+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	5c001000 	.word	0x5c001000

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	05fa0000 	.word	0x05fa0000

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff47 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb2 	bl	80012cc <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001382:	4b89      	ldr	r3, [pc, #548]	@ (80015a8 <HAL_GPIO_Init+0x234>)
 8001384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001386:	e194      	b.n	80016b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8186 	beq.w	80016ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x44>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 0201 	and.w	r2, r3, #1
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	69b9      	ldr	r1, [r7, #24]
 80014a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80e0 	beq.w	80016ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f2:	4a2e      	ldr	r2, [pc, #184]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014fc:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <HAL_GPIO_Init+0x23c>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <HAL_GPIO_Init+0x240>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d052      	beq.n	80015dc <HAL_GPIO_Init+0x268>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_GPIO_Init+0x244>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0x22e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_GPIO_Init+0x248>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02b      	beq.n	800159e <HAL_GPIO_Init+0x22a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <HAL_GPIO_Init+0x24c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x226>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <HAL_GPIO_Init+0x250>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x222>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <HAL_GPIO_Init+0x254>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x21e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HAL_GPIO_Init+0x258>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_GPIO_Init+0x25c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <HAL_GPIO_Init+0x260>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_GPIO_Init+0x264>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x20e>
 800157e:	2309      	movs	r3, #9
 8001580:	e02d      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001582:	230a      	movs	r3, #10
 8001584:	e02b      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001586:	2308      	movs	r3, #8
 8001588:	e029      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800158a:	2307      	movs	r3, #7
 800158c:	e027      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800158e:	2306      	movs	r3, #6
 8001590:	e025      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001592:	2305      	movs	r3, #5
 8001594:	e023      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001596:	2304      	movs	r3, #4
 8001598:	e021      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800159a:	2303      	movs	r3, #3
 800159c:	e01f      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800159e:	2302      	movs	r3, #2
 80015a0:	e01d      	b.n	80015de <HAL_GPIO_Init+0x26a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01b      	b.n	80015de <HAL_GPIO_Init+0x26a>
 80015a6:	bf00      	nop
 80015a8:	58000080 	.word	0x58000080
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58000400 	.word	0x58000400
 80015b4:	58020000 	.word	0x58020000
 80015b8:	58020400 	.word	0x58020400
 80015bc:	58020800 	.word	0x58020800
 80015c0:	58020c00 	.word	0x58020c00
 80015c4:	58021000 	.word	0x58021000
 80015c8:	58021400 	.word	0x58021400
 80015cc:	58021800 	.word	0x58021800
 80015d0:	58021c00 	.word	0x58021c00
 80015d4:	58022000 	.word	0x58022000
 80015d8:	58022400 	.word	0x58022400
 80015dc:	2300      	movs	r3, #0
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ee:	4938      	ldr	r1, [pc, #224]	@ (80016d0 <HAL_GPIO_Init+0x35c>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f ae63 	bne.w	8001388 <HAL_GPIO_Init+0x14>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	@ 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58000400 	.word	0x58000400

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001718:	887a      	ldrh	r2, [r7, #2]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	041a      	lsls	r2, r3, #16
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43d9      	mvns	r1, r3
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	400b      	ands	r3, r1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_HSEM_FastTake+0x2c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3320      	adds	r3, #32
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_HSEM_FastTake+0x30>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	58026400 	.word	0x58026400
 800176c:	80000300 	.word	0x80000300

08001770 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800177a:	4906      	ldr	r1, [pc, #24]	@ (8001794 <HAL_HSEM_Release+0x24>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	58026400 	.word	0x58026400

08001798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80017a0:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	d00a      	beq.n	80017c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017ac:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e040      	b.n	8001840 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e03e      	b.n	8001840 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80017ca:	491f      	ldr	r1, [pc, #124]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017d2:	f7ff fcaf 	bl	8001134 <HAL_GetTick>
 80017d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017d8:	e009      	b.n	80017ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017da:	f7ff fcab 	bl	8001134 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017e8:	d901      	bls.n	80017ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e028      	b.n	8001840 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017fa:	d1ee      	bne.n	80017da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b1e      	cmp	r3, #30
 8001800:	d008      	beq.n	8001814 <HAL_PWREx_ConfigSupply+0x7c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b2e      	cmp	r3, #46	@ 0x2e
 8001806:	d005      	beq.n	8001814 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b1d      	cmp	r3, #29
 800180c:	d002      	beq.n	8001814 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b2d      	cmp	r3, #45	@ 0x2d
 8001812:	d114      	bne.n	800183e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001814:	f7ff fc8e 	bl	8001134 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800181a:	e009      	b.n	8001830 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800181c:	f7ff fc8a 	bl	8001134 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800182a:	d901      	bls.n	8001830 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e007      	b.n	8001840 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_PWREx_ConfigSupply+0xb0>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183c:	d1ee      	bne.n	800181c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	58024800 	.word	0x58024800

0800184c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	@ 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f000 bc48 	b.w	80020f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8088 	beq.w	800197e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186e:	4b99      	ldr	r3, [pc, #612]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001878:	4b96      	ldr	r3, [pc, #600]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	2b10      	cmp	r3, #16
 8001882:	d007      	beq.n	8001894 <HAL_RCC_OscConfig+0x48>
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001886:	2b18      	cmp	r3, #24
 8001888:	d111      	bne.n	80018ae <HAL_RCC_OscConfig+0x62>
 800188a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d06d      	beq.n	800197c <HAL_RCC_OscConfig+0x130>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d169      	bne.n	800197c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f000 bc21 	b.w	80020f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x7a>
 80018b8:	4b86      	ldr	r3, [pc, #536]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a85      	ldr	r2, [pc, #532]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e02e      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x9c>
 80018ce:	4b81      	ldr	r3, [pc, #516]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a80      	ldr	r2, [pc, #512]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xc0>
 80018f2:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b75      	ldr	r3, [pc, #468]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a74      	ldr	r2, [pc, #464]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 800190c:	4b71      	ldr	r3, [pc, #452]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a70      	ldr	r2, [pc, #448]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6d      	ldr	r2, [pc, #436]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fc02 	bl	8001134 <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fbfe 	bl	8001134 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e3d4      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbee 	bl	8001134 <HAL_GetTick>
 8001958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fbea 	bl	8001134 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e3c0      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800196e:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x110>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80ca 	beq.w	8001b20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198c:	4b51      	ldr	r3, [pc, #324]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001994:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001996:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_RCC_OscConfig+0x166>
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2b18      	cmp	r3, #24
 80019a6:	d156      	bne.n	8001a56 <HAL_RCC_OscConfig+0x20a>
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d151      	bne.n	8001a56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b2:	4b48      	ldr	r3, [pc, #288]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x17e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e392      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0219 	bic.w	r2, r3, #25
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	493f      	ldr	r1, [pc, #252]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fbaa 	bl	8001134 <HAL_GetTick>
 80019e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fba6 	bl	8001134 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e37c      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f6:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	f7ff fbc7 	bl	8001194 <HAL_GetREVID>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d817      	bhi.n	8001a40 <HAL_RCC_OscConfig+0x1f4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b40      	cmp	r3, #64	@ 0x40
 8001a16:	d108      	bne.n	8001a2a <HAL_RCC_OscConfig+0x1de>
 8001a18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a20:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e07a      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	031b      	lsls	r3, r3, #12
 8001a38:	4926      	ldr	r1, [pc, #152]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3e:	e06f      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	4921      	ldr	r1, [pc, #132]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a54:	e064      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d047      	beq.n	8001aee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0219 	bic.w	r2, r3, #25
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	491a      	ldr	r1, [pc, #104]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb60 	bl	8001134 <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fb5c 	bl	8001134 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e332      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	f7ff fb7d 	bl	8001194 <HAL_GetREVID>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d819      	bhi.n	8001ad8 <HAL_RCC_OscConfig+0x28c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b40      	cmp	r3, #64	@ 0x40
 8001aaa:	d108      	bne.n	8001abe <HAL_RCC_OscConfig+0x272>
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aba:	6053      	str	r3, [r2, #4]
 8001abc:	e030      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	4901      	ldr	r1, [pc, #4]	@ (8001ad4 <HAL_RCC_OscConfig+0x288>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e025      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	4b9a      	ldr	r3, [pc, #616]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4997      	ldr	r1, [pc, #604]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b95      	ldr	r3, [pc, #596]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a94      	ldr	r2, [pc, #592]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fb1b 	bl	8001134 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fb17 	bl	8001134 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e2ed      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b14:	4b8b      	ldr	r3, [pc, #556]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a9 	beq.w	8001c80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b85      	ldr	r3, [pc, #532]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b38:	4b82      	ldr	r3, [pc, #520]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x308>
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b18      	cmp	r3, #24
 8001b48:	d13a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x374>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d135      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b54:	4b7b      	ldr	r3, [pc, #492]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_OscConfig+0x320>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b80      	cmp	r3, #128	@ 0x80
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e2c1      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b6c:	f7ff fb12 	bl	8001194 <HAL_GetREVID>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d817      	bhi.n	8001baa <HAL_RCC_OscConfig+0x35e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x348>
 8001b82:	4b70      	ldr	r3, [pc, #448]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b92:	e075      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b94:	4b6b      	ldr	r3, [pc, #428]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	069b      	lsls	r3, r3, #26
 8001ba2:	4968      	ldr	r1, [pc, #416]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ba8:	e06a      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001baa:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	061b      	lsls	r3, r3, #24
 8001bb8:	4962      	ldr	r1, [pc, #392]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bbe:	e05f      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d042      	beq.n	8001c4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff faae 	bl	8001134 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bdc:	f7ff faaa 	bl	8001134 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e280      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bee:	4b55      	ldr	r3, [pc, #340]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bfa:	f7ff facb 	bl	8001194 <HAL_GetREVID>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d817      	bhi.n	8001c38 <HAL_RCC_OscConfig+0x3ec>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d108      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3d6>
 8001c10:	4b4c      	ldr	r3, [pc, #304]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c18:	4a4a      	ldr	r2, [pc, #296]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c1e:	6053      	str	r3, [r2, #4]
 8001c20:	e02e      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
 8001c22:	4b48      	ldr	r3, [pc, #288]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	069b      	lsls	r3, r3, #26
 8001c30:	4944      	ldr	r1, [pc, #272]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
 8001c36:	e023      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
 8001c38:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	493f      	ldr	r1, [pc, #252]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa6b 	bl	8001134 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa67 	bl	8001134 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e23d      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d036      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d019      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c94:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c98:	4a2a      	ldr	r2, [pc, #168]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fa48 	bl	8001134 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fa44 	bl	8001134 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e21a      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x45c>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa2e 	bl	8001134 <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fa2a 	bl	8001134 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e200      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d039      	beq.n	8001d7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fa0b 	bl	8001134 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d22:	f7ff fa07 	bl	8001134 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e1dd      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
 8001d40:	e01b      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
 8001d42:	bf00      	nop
 8001d44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d48:	4b9b      	ldr	r3, [pc, #620]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a9a      	ldr	r2, [pc, #616]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d54:	f7ff f9ee 	bl	8001134 <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5c:	f7ff f9ea 	bl	8001134 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1c0      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d6e:	4b92      	ldr	r3, [pc, #584]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8081 	beq.w	8001e8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d88:	4b8c      	ldr	r3, [pc, #560]	@ (8001fbc <HAL_RCC_OscConfig+0x770>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a8b      	ldr	r2, [pc, #556]	@ (8001fbc <HAL_RCC_OscConfig+0x770>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f9ce 	bl	8001134 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7ff f9ca 	bl	8001134 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1a0      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dae:	4b83      	ldr	r3, [pc, #524]	@ (8001fbc <HAL_RCC_OscConfig+0x770>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x584>
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	e02d      	b.n	8001e2c <HAL_RCC_OscConfig+0x5e0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5a6>
 8001dd8:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	4a76      	ldr	r2, [pc, #472]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de4:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de8:	4a73      	ldr	r2, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x5e0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c8>
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e06:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0x5e0>
 8001e14:	4b68      	ldr	r3, [pc, #416]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e18:	4a67      	ldr	r2, [pc, #412]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e20:	4b65      	ldr	r3, [pc, #404]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a64      	ldr	r2, [pc, #400]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f97e 	bl	8001134 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f97a 	bl	8001134 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e14e      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e52:	4b59      	ldr	r3, [pc, #356]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ee      	beq.n	8001e3c <HAL_RCC_OscConfig+0x5f0>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f968 	bl	8001134 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f964 	bl	8001134 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e138      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ee      	bne.n	8001e68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 812d 	beq.w	80020ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e94:	4b48      	ldr	r3, [pc, #288]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e9c:	2b18      	cmp	r3, #24
 8001e9e:	f000 80bd 	beq.w	800201c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	f040 809e 	bne.w	8001fe8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f93c 	bl	8001134 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff f938 	bl	8001134 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e10e      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed2:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ede:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <HAL_RCC_OscConfig+0x774>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	4931      	ldr	r1, [pc, #196]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	3b01      	subs	r3, #1
 8001efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f06:	3b01      	subs	r3, #1
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f20:	3b01      	subs	r3, #1
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f28:	4923      	ldr	r1, [pc, #140]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	4a21      	ldr	r2, [pc, #132]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f3e:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <HAL_RCC_OscConfig+0x778>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f46:	00d2      	lsls	r2, r2, #3
 8001f48:	491b      	ldr	r1, [pc, #108]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	f023 020c 	bic.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4917      	ldr	r1, [pc, #92]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f60:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	f023 0202 	bic.w	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	4912      	ldr	r1, [pc, #72]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	4a10      	ldr	r2, [pc, #64]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f8c1 	bl	8001134 <HAL_GetTick>
 8001fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb4:	e011      	b.n	8001fda <HAL_RCC_OscConfig+0x78e>
 8001fb6:	bf00      	nop
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58024800 	.word	0x58024800
 8001fc0:	fffffc0c 	.word	0xfffffc0c
 8001fc4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f8b4 	bl	8001134 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e08a      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fda:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x77c>
 8001fe6:	e082      	b.n	80020ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a42      	ldr	r2, [pc, #264]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f89e 	bl	8001134 <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f89a 	bl	8001134 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e070      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800200e:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x7b0>
 800201a:	e068      	b.n	80020ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800201c:	4b36      	ldr	r3, [pc, #216]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002022:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	2b01      	cmp	r3, #1
 800202e:	d031      	beq.n	8002094 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0203 	and.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d12a      	bne.n	8002094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d122      	bne.n	8002094 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0a5b      	lsrs	r3, r3, #9
 8002062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d111      	bne.n	8002094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	0c1b      	lsrs	r3, r3, #16
 8002074:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0e1b      	lsrs	r3, r3, #24
 8002086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e02b      	b.n	80020f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002098:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d01f      	beq.n	80020ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020ae:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020ba:	f7ff f83b 	bl	8001134 <HAL_GetTick>
 80020be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020c0:	bf00      	nop
 80020c2:	f7ff f837 	bl	8001134 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d0f9      	beq.n	80020c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_RCC_OscConfig+0x8b0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020da:	00d2      	lsls	r2, r2, #3
 80020dc:	4906      	ldr	r1, [pc, #24]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_RCC_OscConfig+0x8ac>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3730      	adds	r7, #48	@ 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	58024400 	.word	0x58024400
 80020fc:	ffff0007 	.word	0xffff0007

08002100 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e19c      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b8a      	ldr	r3, [pc, #552]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b87      	ldr	r3, [pc, #540]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 020f 	bic.w	r2, r3, #15
 800212a:	4985      	ldr	r1, [pc, #532]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b83      	ldr	r3, [pc, #524]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e184      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d010      	beq.n	8002172 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	4b7b      	ldr	r3, [pc, #492]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800215c:	429a      	cmp	r2, r3
 800215e:	d908      	bls.n	8002172 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002160:	4b78      	ldr	r3, [pc, #480]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	4975      	ldr	r1, [pc, #468]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800216e:	4313      	orrs	r3, r2
 8002170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800218a:	429a      	cmp	r2, r3
 800218c:	d908      	bls.n	80021a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800218e:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	496a      	ldr	r1, [pc, #424]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800219c:	4313      	orrs	r3, r2
 800219e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d908      	bls.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021bc:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	495e      	ldr	r1, [pc, #376]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ea:	4b56      	ldr	r3, [pc, #344]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4953      	ldr	r1, [pc, #332]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	429a      	cmp	r2, r3
 8002216:	d908      	bls.n	800222a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f023 020f 	bic.w	r2, r3, #15
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4947      	ldr	r1, [pc, #284]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002226:	4313      	orrs	r3, r2
 8002228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d055      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4940      	ldr	r1, [pc, #256]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002244:	4313      	orrs	r3, r2
 8002246:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002250:	4b3c      	ldr	r3, [pc, #240]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d121      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0f6      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002268:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d115      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0ea      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002280:	4b30      	ldr	r3, [pc, #192]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0de      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002290:	4b2c      	ldr	r3, [pc, #176]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d6      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022a0:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f023 0207 	bic.w	r2, r3, #7
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4925      	ldr	r1, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b2:	f7fe ff3f 	bl	8001134 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ba:	f7fe ff3b 	bl	8001134 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0be      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	429a      	cmp	r2, r3
 80022e0:	d1eb      	bne.n	80022ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d208      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f023 020f 	bic.w	r2, r3, #15
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	490e      	ldr	r1, [pc, #56]	@ (8002344 <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d214      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 020f 	bic.w	r2, r3, #15
 8002326:	4906      	ldr	r1, [pc, #24]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <HAL_RCC_ClockConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e086      	b.n	800244e <HAL_RCC_ClockConfig+0x34e>
 8002340:	52002000 	.word	0x52002000
 8002344:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002360:	429a      	cmp	r2, r3
 8002362:	d208      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002364:	4b3c      	ldr	r3, [pc, #240]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4939      	ldr	r1, [pc, #228]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002372:	4313      	orrs	r3, r2
 8002374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800238e:	429a      	cmp	r2, r3
 8002390:	d208      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002392:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	492e      	ldr	r1, [pc, #184]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023bc:	429a      	cmp	r2, r3
 80023be:	d208      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4922      	ldr	r1, [pc, #136]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d208      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4917      	ldr	r1, [pc, #92]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002400:	f000 f834 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b14      	ldr	r3, [pc, #80]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	4912      	ldr	r1, [pc, #72]	@ (800245c <HAL_RCC_ClockConfig+0x35c>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_RCC_ClockConfig+0x358>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_RCC_ClockConfig+0x35c>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_RCC_ClockConfig+0x360>)
 8002436:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_RCC_ClockConfig+0x364>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x368>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fe2c 	bl	80010a0 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58024400 	.word	0x58024400
 800245c:	08006390 	.word	0x08006390
 8002460:	24000004 	.word	0x24000004
 8002464:	24000000 	.word	0x24000000
 8002468:	24000008 	.word	0x24000008

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002472:	4bb3      	ldr	r3, [pc, #716]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800247a:	2b18      	cmp	r3, #24
 800247c:	f200 8155 	bhi.w	800272a <HAL_RCC_GetSysClockFreq+0x2be>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024ed 	.word	0x080024ed
 800248c:	0800272b 	.word	0x0800272b
 8002490:	0800272b 	.word	0x0800272b
 8002494:	0800272b 	.word	0x0800272b
 8002498:	0800272b 	.word	0x0800272b
 800249c:	0800272b 	.word	0x0800272b
 80024a0:	0800272b 	.word	0x0800272b
 80024a4:	0800272b 	.word	0x0800272b
 80024a8:	08002513 	.word	0x08002513
 80024ac:	0800272b 	.word	0x0800272b
 80024b0:	0800272b 	.word	0x0800272b
 80024b4:	0800272b 	.word	0x0800272b
 80024b8:	0800272b 	.word	0x0800272b
 80024bc:	0800272b 	.word	0x0800272b
 80024c0:	0800272b 	.word	0x0800272b
 80024c4:	0800272b 	.word	0x0800272b
 80024c8:	08002519 	.word	0x08002519
 80024cc:	0800272b 	.word	0x0800272b
 80024d0:	0800272b 	.word	0x0800272b
 80024d4:	0800272b 	.word	0x0800272b
 80024d8:	0800272b 	.word	0x0800272b
 80024dc:	0800272b 	.word	0x0800272b
 80024e0:	0800272b 	.word	0x0800272b
 80024e4:	0800272b 	.word	0x0800272b
 80024e8:	0800251f 	.word	0x0800251f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024ec:	4b94      	ldr	r3, [pc, #592]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024f8:	4b91      	ldr	r3, [pc, #580]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	4a90      	ldr	r2, [pc, #576]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800250a:	e111      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800250c:	4b8d      	ldr	r3, [pc, #564]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800250e:	61bb      	str	r3, [r7, #24]
      break;
 8002510:	e10e      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002512:	4b8d      	ldr	r3, [pc, #564]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002514:	61bb      	str	r3, [r7, #24]
      break;
 8002516:	e10b      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002518:	4b8c      	ldr	r3, [pc, #560]	@ (800274c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800251a:	61bb      	str	r3, [r7, #24]
      break;
 800251c:	e108      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800251e:	4b88      	ldr	r3, [pc, #544]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002528:	4b85      	ldr	r3, [pc, #532]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002532:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002534:	4b82      	ldr	r3, [pc, #520]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800253e:	4b80      	ldr	r3, [pc, #512]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80e1 	beq.w	8002724 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b02      	cmp	r3, #2
 8002566:	f000 8083 	beq.w	8002670 <HAL_RCC_GetSysClockFreq+0x204>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f200 80a1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x114>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d056      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x1c0>
 800257e:	e099      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002580:	4b6f      	ldr	r3, [pc, #444]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800258c:	4b6c      	ldr	r3, [pc, #432]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	4a6b      	ldr	r2, [pc, #428]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b6:	4b62      	ldr	r3, [pc, #392]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025e6:	e087      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002754 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fa:	4b51      	ldr	r3, [pc, #324]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260a:	ed97 6a02 	vldr	s12, [r7, #8]
 800260e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800261e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800262a:	e065      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002636:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2ec>
 800263a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800264e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002652:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800265e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800266e:	e043      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800275c <HAL_RCC_GetSysClockFreq+0x2f0>
 800267e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002692:	ed97 6a02 	vldr	s12, [r7, #8]
 8002696:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x2e4>
 800269a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026b2:	e021      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002758 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	0a5b      	lsrs	r3, r3, #9
 80026fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002702:	3301      	adds	r3, #1
 8002704:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002710:	edd7 6a07 	vldr	s13, [r7, #28]
 8002714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	ee17 3a90 	vmov	r3, s15
 8002720:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002722:	e005      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
      break;
 8002728:	e002      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800272c:	61bb      	str	r3, [r7, #24]
      break;
 800272e:	bf00      	nop
  }

  return sysclockfreq;
 8002730:	69bb      	ldr	r3, [r7, #24]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
 8002744:	03d09000 	.word	0x03d09000
 8002748:	003d0900 	.word	0x003d0900
 800274c:	007a1200 	.word	0x007a1200
 8002750:	46000000 	.word	0x46000000
 8002754:	4c742400 	.word	0x4c742400
 8002758:	4a742400 	.word	0x4a742400
 800275c:	4af42400 	.word	0x4af42400

08002760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002766:	f7ff fe81 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800276a:	4602      	mov	r2, r0
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	490f      	ldr	r1, [pc, #60]	@ (80027b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002778:	5ccb      	ldrb	r3, [r1, r3]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002784:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800279c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800279e:	4a07      	ldr	r2, [pc, #28]	@ (80027bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400
 80027b4:	08006390 	.word	0x08006390
 80027b8:	24000004 	.word	0x24000004
 80027bc:	24000000 	.word	0x24000000

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027c4:	f7ff ffcc 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	@ (80027e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	58024400 	.word	0x58024400
 80027e8:	08006390 	.word	0x08006390

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027f0:	f7ff ffb6 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4904      	ldr	r1, [pc, #16]	@ (8002814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58024400 	.word	0x58024400
 8002814:	08006390 	.word	0x08006390

08002818 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0ca      	sub	sp, #296	@ 0x128
 800281e:	af00      	add	r7, sp, #0
 8002820:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800283c:	2500      	movs	r5, #0
 800283e:	ea54 0305 	orrs.w	r3, r4, r5
 8002842:	d049      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800284a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800284e:	d02f      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002850:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002854:	d828      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800285a:	d01a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800285c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002860:	d822      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800286a:	d007      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800286c:	e01c      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	4ab7      	ldr	r2, [pc, #732]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800287a:	e01a      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800287c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002880:	3308      	adds	r3, #8
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fc8f 	bl	80041a8 <RCCEx_PLL2_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002890:	e00f      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002896:	3328      	adds	r3, #40	@ 0x28
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fd36 	bl	800430c <RCCEx_PLL3_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028a6:	e004      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028ae:	e000      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028c8:	4aa1      	ldr	r2, [pc, #644]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80028ce:	e003      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028e4:	f04f 0900 	mov.w	r9, #0
 80028e8:	ea58 0309 	orrs.w	r3, r8, r9
 80028ec:	d047      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d82a      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002915 	.word	0x08002915
 8002904:	08002923 	.word	0x08002923
 8002908:	08002939 	.word	0x08002939
 800290c:	08002957 	.word	0x08002957
 8002910:	08002957 	.word	0x08002957
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4b8e      	ldr	r3, [pc, #568]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	4a8d      	ldr	r2, [pc, #564]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002920:	e01a      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002926:	3308      	adds	r3, #8
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fc3c 	bl	80041a8 <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002936:	e00f      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293c:	3328      	adds	r3, #40	@ 0x28
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fce3 	bl	800430c <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800294c:	e004      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002960:	4b7b      	ldr	r3, [pc, #492]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002964:	f023 0107 	bic.w	r1, r3, #7
 8002968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	4a78      	ldr	r2, [pc, #480]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002970:	430b      	orrs	r3, r1
 8002972:	6513      	str	r3, [r2, #80]	@ 0x50
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800297a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800297e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800298a:	f04f 0b00 	mov.w	fp, #0
 800298e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002992:	d04c      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299e:	d030      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a4:	d829      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029a8:	d02d      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80029ac:	d825      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ae:	2b80      	cmp	r3, #128	@ 0x80
 80029b0:	d018      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029b2:	2b80      	cmp	r3, #128	@ 0x80
 80029b4:	d821      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d007      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029be:	e01c      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c0:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	4a62      	ldr	r2, [pc, #392]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029cc:	e01c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d2:	3308      	adds	r3, #8
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fbe6 	bl	80041a8 <RCCEx_PLL2_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029e2:	e011      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e8:	3328      	adds	r3, #40	@ 0x28
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 fc8d 	bl	800430c <RCCEx_PLL3_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a00:	e002      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a10:	4b4f      	ldr	r3, [pc, #316]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	d053      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a5a:	d035      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a60:	d82e      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a66:	d031      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a6c:	d828      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a72:	d01a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a78:	d822      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a82:	d007      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a86:	4b32      	ldr	r3, [pc, #200]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4a31      	ldr	r2, [pc, #196]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a92:	e01c      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a98:	3308      	adds	r3, #8
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fb83 	bl	80041a8 <RCCEx_PLL2_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e011      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	3328      	adds	r3, #40	@ 0x28
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fc2a 	bl	800430c <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002abe:	e006      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aec:	e003      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b10:	460b      	mov	r3, r1
 8002b12:	4313      	orrs	r3, r2
 8002b14:	d056      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b22:	d038      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b28:	d831      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b2e:	d034      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b34:	d82b      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b3a:	d01d      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b40:	d825      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b4c:	e01f      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b4e:	bf00      	nop
 8002b50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b54:	4ba2      	ldr	r3, [pc, #648]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4aa1      	ldr	r2, [pc, #644]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b60:	e01c      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b66:	3308      	adds	r3, #8
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fb1c 	bl	80041a8 <RCCEx_PLL2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b76:	e011      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7c:	3328      	adds	r3, #40	@ 0x28
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fbc3 	bl	800430c <RCCEx_PLL3_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b8c:	e006      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b94:	e002      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bb4:	4a8a      	ldr	r2, [pc, #552]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002bde:	460b      	mov	r3, r1
 8002be0:	4313      	orrs	r3, r2
 8002be2:	d03a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	2b30      	cmp	r3, #48	@ 0x30
 8002bec:	d01f      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bee:	2b30      	cmp	r3, #48	@ 0x30
 8002bf0:	d819      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d00c      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d815      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d111      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c02:	4b77      	ldr	r3, [pc, #476]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	4a76      	ldr	r2, [pc, #472]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c0e:	e011      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c14:	3308      	adds	r3, #8
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fac5 	bl	80041a8 <RCCEx_PLL2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c24:	e006      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c2c:	e002      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c3c:	4b68      	ldr	r3, [pc, #416]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	4a65      	ldr	r2, [pc, #404]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4313      	orrs	r3, r2
 8002c78:	d051      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c84:	d035      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c8a:	d82e      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c90:	d031      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c96:	d828      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9c:	d01a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca2:	d822      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cac:	d007      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cae:	e01c      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fa6e 	bl	80041a8 <RCCEx_PLL2_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cd2:	e011      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	3328      	adds	r3, #40	@ 0x28
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fb15 	bl	800430c <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0e:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	d056      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d48:	d033      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d4e:	d82c      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d54:	d02f      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d5a:	d826      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d60:	d02b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d66:	d820      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d6c:	d012      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d72:	d81a      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d022      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7c:	d115      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d82:	3308      	adds	r3, #8
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fa0e 	bl	80041a8 <RCCEx_PLL2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d92:	e015      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	3328      	adds	r3, #40	@ 0x28
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fab5 	bl	800430c <RCCEx_PLL3_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002db2:	bf00      	nop
 8002db4:	e004      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dd6:	4a02      	ldr	r2, [pc, #8]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ddc:	e006      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002dde:	bf00      	nop
 8002de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	d055      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e18:	d033      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1e:	d82c      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d02f      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2a:	d826      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e30:	d02b      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e36:	d820      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e3c:	d012      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e42:	d81a      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d022      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	3308      	adds	r3, #8
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f9a6 	bl	80041a8 <RCCEx_PLL2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e62:	e015      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e68:	3328      	adds	r3, #40	@ 0x28
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fa4d 	bl	800430c <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e78:	e00a      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e98:	4ba3      	ldr	r3, [pc, #652]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eae:	e003      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	d037      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee2:	d00e      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee8:	d816      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d018      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ef2:	d111      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	4a8b      	ldr	r2, [pc, #556]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f06:	3308      	adds	r3, #8
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 f94c 	bl	80041a8 <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f16:	e004      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a7b      	ldr	r2, [pc, #492]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f3e:	e003      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4313      	orrs	r3, r2
 8002f66:	d039      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d81c      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f72:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002f89 	.word	0x08002f89
 8002f80:	08002f97 	.word	0x08002f97
 8002f84:	08002fb5 	.word	0x08002fb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f88:	4b67      	ldr	r3, [pc, #412]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4a66      	ldr	r2, [pc, #408]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f94:	e00f      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f902 	bl	80041a8 <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	f023 0103 	bic.w	r1, r3, #3
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	4a56      	ldr	r2, [pc, #344]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fd2:	e003      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ff2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f000 809f 	beq.w	800313c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a4a      	ldr	r2, [pc, #296]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300a:	f7fe f893 	bl	8001134 <HAL_GetTick>
 800300e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fe f88e 	bl	8001134 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	@ 0x64
 8003022:	d903      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800302a:	e005      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302c:	4b3f      	ldr	r3, [pc, #252]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ed      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800303c:	2b00      	cmp	r3, #0
 800303e:	d179      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003040:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003042:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800304c:	4053      	eors	r3, r2
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003056:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b31      	ldr	r3, [pc, #196]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306e:	4b2e      	ldr	r3, [pc, #184]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a2d      	ldr	r2, [pc, #180]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800307a:	4a2b      	ldr	r2, [pc, #172]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800307c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800308a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800308e:	d118      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe f850 	bl	8001134 <HAL_GetTick>
 8003094:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003098:	e00d      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe f84b 	bl	8001134 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d903      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030b4:	e005      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0eb      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80030c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d129      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030da:	d10e      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030ec:	091a      	lsrs	r2, r3, #4
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6113      	str	r3, [r2, #16]
 80030f8:	e005      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80030fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003100:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003104:	6113      	str	r3, [r2, #16]
 8003106:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003108:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003118:	430b      	orrs	r3, r1
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
 800311c:	e00e      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800311e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003126:	e009      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003128:	58024400 	.word	0x58024400
 800312c:	58024800 	.word	0x58024800
 8003130:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f002 0301 	and.w	r3, r2, #1
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003152:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003156:	460b      	mov	r3, r1
 8003158:	4313      	orrs	r3, r2
 800315a:	f000 8089 	beq.w	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003164:	2b28      	cmp	r3, #40	@ 0x28
 8003166:	d86b      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003168:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003249 	.word	0x08003249
 8003174:	08003241 	.word	0x08003241
 8003178:	08003241 	.word	0x08003241
 800317c:	08003241 	.word	0x08003241
 8003180:	08003241 	.word	0x08003241
 8003184:	08003241 	.word	0x08003241
 8003188:	08003241 	.word	0x08003241
 800318c:	08003241 	.word	0x08003241
 8003190:	08003215 	.word	0x08003215
 8003194:	08003241 	.word	0x08003241
 8003198:	08003241 	.word	0x08003241
 800319c:	08003241 	.word	0x08003241
 80031a0:	08003241 	.word	0x08003241
 80031a4:	08003241 	.word	0x08003241
 80031a8:	08003241 	.word	0x08003241
 80031ac:	08003241 	.word	0x08003241
 80031b0:	0800322b 	.word	0x0800322b
 80031b4:	08003241 	.word	0x08003241
 80031b8:	08003241 	.word	0x08003241
 80031bc:	08003241 	.word	0x08003241
 80031c0:	08003241 	.word	0x08003241
 80031c4:	08003241 	.word	0x08003241
 80031c8:	08003241 	.word	0x08003241
 80031cc:	08003241 	.word	0x08003241
 80031d0:	08003249 	.word	0x08003249
 80031d4:	08003241 	.word	0x08003241
 80031d8:	08003241 	.word	0x08003241
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003241 	.word	0x08003241
 80031e4:	08003241 	.word	0x08003241
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003249 	.word	0x08003249
 80031f4:	08003241 	.word	0x08003241
 80031f8:	08003241 	.word	0x08003241
 80031fc:	08003241 	.word	0x08003241
 8003200:	08003241 	.word	0x08003241
 8003204:	08003241 	.word	0x08003241
 8003208:	08003241 	.word	0x08003241
 800320c:	08003241 	.word	0x08003241
 8003210:	08003249 	.word	0x08003249
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	3308      	adds	r3, #8
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f000 ffc3 	bl	80041a8 <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003228:	e00f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322e:	3328      	adds	r3, #40	@ 0x28
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f86a 	bl	800430c <RCCEx_PLL3_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003252:	4bbf      	ldr	r3, [pc, #764]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800325a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003260:	4abb      	ldr	r2, [pc, #748]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003262:	430b      	orrs	r3, r1
 8003264:	6553      	str	r3, [r2, #84]	@ 0x54
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f002 0302 	and.w	r3, r2, #2
 800327c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003286:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800328a:	460b      	mov	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	d041      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003296:	2b05      	cmp	r3, #5
 8003298:	d824      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800329a:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032ed 	.word	0x080032ed
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032cf 	.word	0x080032cf
 80032ac:	080032ed 	.word	0x080032ed
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	080032ed 	.word	0x080032ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032bc:	3308      	adds	r3, #8
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ff71 	bl	80041a8 <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032cc:	e00f      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d2:	3328      	adds	r3, #40	@ 0x28
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f818 	bl	800430c <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032f6:	4b96      	ldr	r3, [pc, #600]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f023 0107 	bic.w	r1, r3, #7
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003304:	4a92      	ldr	r2, [pc, #584]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003306:	430b      	orrs	r3, r1
 8003308:	6553      	str	r3, [r2, #84]	@ 0x54
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f002 0304 	and.w	r3, r2, #4
 8003320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800332a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800332e:	460b      	mov	r3, r1
 8003330:	4313      	orrs	r3, r2
 8003332:	d044      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333c:	2b05      	cmp	r3, #5
 800333e:	d825      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003340:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	08003395 	.word	0x08003395
 800334c:	08003361 	.word	0x08003361
 8003350:	08003377 	.word	0x08003377
 8003354:	08003395 	.word	0x08003395
 8003358:	08003395 	.word	0x08003395
 800335c:	08003395 	.word	0x08003395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	3308      	adds	r3, #8
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff1d 	bl	80041a8 <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337a:	3328      	adds	r3, #40	@ 0x28
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 ffc4 	bl	800430c <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800339e:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	f023 0107 	bic.w	r1, r3, #7
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ae:	4a68      	ldr	r2, [pc, #416]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f002 0320 	and.w	r3, r2, #32
 80033ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033d8:	460b      	mov	r3, r1
 80033da:	4313      	orrs	r3, r2
 80033dc:	d055      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ea:	d033      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f0:	d82c      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f6:	d02f      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fc:	d826      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003402:	d02b      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003408:	d820      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800340a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800340e:	d012      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003414:	d81a      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d022      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800341a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800341e:	d115      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003424:	3308      	adds	r3, #8
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 febd 	bl	80041a8 <RCCEx_PLL2_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003434:	e015      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	3328      	adds	r3, #40	@ 0x28
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f000 ff64 	bl	800430c <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800344a:	e00a      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003452:	e006      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003454:	bf00      	nop
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003458:	bf00      	nop
 800345a:	e002      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10b      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346a:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800346c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a35      	ldr	r2, [pc, #212]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800347c:	430b      	orrs	r3, r1
 800347e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003480:	e003      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d058      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034b6:	d033      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034bc:	d82c      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c2:	d02f      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c8:	d826      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034ce:	d02b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034d4:	d820      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034da:	d012      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e0:	d81a      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d022      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d115      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	3308      	adds	r3, #8
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fe57 	bl	80041a8 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	3328      	adds	r3, #40	@ 0x28
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fefe 	bl	800430c <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003516:	e00a      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351e:	e006      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003520:	bf00      	nop
 8003522:	e004      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800352c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003546:	4a02      	ldr	r2, [pc, #8]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6593      	str	r3, [r2, #88]	@ 0x58
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003572:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d055      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003584:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003588:	d033      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800358a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800358e:	d82c      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003594:	d02f      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359a:	d826      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800359c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035a0:	d02b      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80035a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035a6:	d820      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ac:	d012      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80035ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b2:	d81a      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035bc:	d115      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	3308      	adds	r3, #8
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fdee 	bl	80041a8 <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035d2:	e015      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	3328      	adds	r3, #40	@ 0x28
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fe95 	bl	800430c <RCCEx_PLL3_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035e8:	e00a      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035f2:	bf00      	nop
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003608:	4ba1      	ldr	r3, [pc, #644]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003618:	4a9d      	ldr	r2, [pc, #628]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800361a:	430b      	orrs	r3, r1
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
 800361e:	e003      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f002 0308 	and.w	r3, r2, #8
 8003634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800363e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003642:	460b      	mov	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	d01e      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365a:	3328      	adds	r3, #40	@ 0x28
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fe54 	bl	800430c <RCCEx_PLL3_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003670:	4b87      	ldr	r3, [pc, #540]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003680:	4a83      	ldr	r2, [pc, #524]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003682:	430b      	orrs	r3, r1
 8003684:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f002 0310 	and.w	r3, r2, #16
 8003692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800369c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d01e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b2:	d10c      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	3328      	adds	r3, #40	@ 0x28
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fe25 	bl	800430c <RCCEx_PLL3_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ce:	4b70      	ldr	r3, [pc, #448]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036de:	4a6c      	ldr	r2, [pc, #432]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	d03e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800370c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003710:	d022      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003716:	d81b      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003720:	d00b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003722:	e015      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	3308      	adds	r3, #8
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fd3b 	bl	80041a8 <RCCEx_PLL2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	3328      	adds	r3, #40	@ 0x28
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fde2 	bl	800430c <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003762:	4b4b      	ldr	r3, [pc, #300]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003772:	4a47      	ldr	r2, [pc, #284]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6593      	str	r3, [r2, #88]	@ 0x58
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800378e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003790:	2300      	movs	r3, #0
 8003792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037aa:	d01f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80037ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037b0:	d818      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b6:	d003      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037bc:	d007      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037be:	e011      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	4a32      	ldr	r2, [pc, #200]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	3328      	adds	r3, #40	@ 0x28
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fd98 	bl	800430c <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6553      	str	r3, [r2, #84]	@ 0x54
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003822:	673b      	str	r3, [r7, #112]	@ 0x70
 8003824:	2300      	movs	r3, #0
 8003826:	677b      	str	r3, [r7, #116]	@ 0x74
 8003828:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d034      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003840:	d007      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	4a11      	ldr	r2, [pc, #68]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003850:	e00e      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	3308      	adds	r3, #8
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fca4 	bl	80041a8 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003866:	e003      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800386e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	4a02      	ldr	r2, [pc, #8]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003888:	430b      	orrs	r3, r1
 800388a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038aa:	2300      	movs	r3, #0
 80038ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	3328      	adds	r3, #40	@ 0x28
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fd23 	bl	800430c <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038de:	663b      	str	r3, [r7, #96]	@ 0x60
 80038e0:	2300      	movs	r3, #0
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d038      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038fa:	d018      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80038fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003900:	d811      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003906:	d014      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d80b      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003918:	4bc3      	ldr	r3, [pc, #780]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4ac2      	ldr	r2, [pc, #776]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800392c:	e004      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003940:	4bb9      	ldr	r3, [pc, #740]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003950:	4ab5      	ldr	r2, [pc, #724]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003952:	430b      	orrs	r3, r1
 8003954:	6553      	str	r3, [r2, #84]	@ 0x54
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800396c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800396e:	2300      	movs	r3, #0
 8003970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003972:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800397c:	4baa      	ldr	r3, [pc, #680]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398a:	4aa7      	ldr	r2, [pc, #668]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800399c:	653b      	str	r3, [r7, #80]	@ 0x50
 800399e:	2300      	movs	r3, #0
 80039a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80039a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039ac:	4b9e      	ldr	r3, [pc, #632]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039bc:	4a9a      	ldr	r2, [pc, #616]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d0:	2300      	movs	r3, #0
 80039d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039d8:	460b      	mov	r3, r1
 80039da:	4313      	orrs	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039de:	4b92      	ldr	r3, [pc, #584]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80039fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a00:	2300      	movs	r3, #0
 8003a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a0e:	4b86      	ldr	r3, [pc, #536]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	4a85      	ldr	r2, [pc, #532]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a18:	6113      	str	r3, [r2, #16]
 8003a1a:	4b83      	ldr	r3, [pc, #524]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a26:	4a80      	ldr	r2, [pc, #512]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a48:	4b77      	ldr	r3, [pc, #476]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	4a74      	ldr	r2, [pc, #464]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a78:	4b6b      	ldr	r3, [pc, #428]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a88:	4a67      	ldr	r2, [pc, #412]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	2100      	movs	r1, #0
 8003a98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d011      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fb78 	bl	80041a8 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	6239      	str	r1, [r7, #32]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb58 	bl	80041a8 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	2100      	movs	r1, #0
 8003b18:	61b9      	str	r1, [r7, #24]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb38 	bl	80041a8 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	2100      	movs	r1, #0
 8003b58:	6139      	str	r1, [r7, #16]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d011      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3328      	adds	r3, #40	@ 0x28
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbca 	bl	800430c <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	2100      	movs	r1, #0
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3328      	adds	r3, #40	@ 0x28
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fbaa 	bl	800430c <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d011      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bee:	3328      	adds	r3, #40	@ 0x28
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb8a 	bl	800430c <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c0e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c22:	46bd      	mov	sp, r7
 8003c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c28:	58024400 	.word	0x58024400

08003c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c30:	f7fe fd96 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4904      	ldr	r1, [pc, #16]	@ (8003c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	58024400 	.word	0x58024400
 8003c54:	08006390 	.word	0x08006390

08003c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c60:	4ba1      	ldr	r3, [pc, #644]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	0b1b      	lsrs	r3, r3, #12
 8003c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c76:	4b9c      	ldr	r3, [pc, #624]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c82:	4b99      	ldr	r3, [pc, #612]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8111 	beq.w	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f000 8083 	beq.w	8003db4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d056      	beq.n	8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cc2:	e099      	b.n	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cc4:	4b88      	ldr	r3, [pc, #544]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02d      	beq.n	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd0:	4b85      	ldr	r3, [pc, #532]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	4a84      	ldr	r2, [pc, #528]	@ (8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d2a:	e087      	b.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d6e:	e065      	b.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d82:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003db2:	e043      	b.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b48      	ldr	r3, [pc, #288]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003df6:	e021      	b.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	0a5b      	lsrs	r3, r3, #9
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e62:	ee17 2a90 	vmov	r2, s15
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e90:	ee17 2a90 	vmov	r2, s15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e98:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebe:	ee17 2a90 	vmov	r2, s15
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
}
 8003eda:	bf00      	nop
 8003edc:	3724      	adds	r7, #36	@ 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	03d09000 	.word	0x03d09000
 8003ef0:	46000000 	.word	0x46000000
 8003ef4:	4c742400 	.word	0x4c742400
 8003ef8:	4a742400 	.word	0x4a742400
 8003efc:	4af42400 	.word	0x4af42400

08003f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f08:	4ba1      	ldr	r3, [pc, #644]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f12:	4b9f      	ldr	r3, [pc, #636]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	0d1b      	lsrs	r3, r3, #20
 8003f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f2a:	4b99      	ldr	r3, [pc, #612]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8111 	beq.w	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f000 8083 	beq.w	800405c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	f200 80a1 	bhi.w	80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d056      	beq.n	8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f6a:	e099      	b.n	80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f6c:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02d      	beq.n	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f78:	4b85      	ldr	r3, [pc, #532]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	08db      	lsrs	r3, r3, #3
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	4a84      	ldr	r2, [pc, #528]	@ (8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fd2:	e087      	b.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800419c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004016:	e065      	b.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b59      	ldr	r3, [pc, #356]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a03 	vldr	s12, [r7, #12]
 800403e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405a:	e043      	b.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b48      	ldr	r3, [pc, #288]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004082:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800409e:	e021      	b.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b37      	ldr	r3, [pc, #220]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	0a5b      	lsrs	r3, r3, #9
 80040ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410a:	ee17 2a90 	vmov	r2, s15
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004112:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800412c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004138:	ee17 2a90 	vmov	r2, s15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800415a:	edd7 6a07 	vldr	s13, [r7, #28]
 800415e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004166:	ee17 2a90 	vmov	r2, s15
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
}
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
 8004194:	03d09000 	.word	0x03d09000
 8004198:	46000000 	.word	0x46000000
 800419c:	4c742400 	.word	0x4c742400
 80041a0:	4a742400 	.word	0x4a742400
 80041a4:	4af42400 	.word	0x4af42400

080041a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041b6:	4b53      	ldr	r3, [pc, #332]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d101      	bne.n	80041c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e099      	b.n	80042fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d2:	f7fc ffaf 	bl	8001134 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041d8:	e008      	b.n	80041ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041da:	f7fc ffab 	bl	8001134 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e086      	b.n	80042fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041ec:	4b45      	ldr	r3, [pc, #276]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041f8:	4b42      	ldr	r3, [pc, #264]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	493f      	ldr	r1, [pc, #252]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	628b      	str	r3, [r1, #40]	@ 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	b29b      	uxth	r3, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	3b01      	subs	r3, #1
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800423c:	4931      	ldr	r1, [pc, #196]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004242:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	492d      	ldr	r1, [pc, #180]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	f023 0220 	bic.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4928      	ldr	r1, [pc, #160]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004266:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004272:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004276:	4b24      	ldr	r3, [pc, #144]	@ (8004308 <RCCEx_PLL2_Config+0x160>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	69d2      	ldr	r2, [r2, #28]
 800427e:	00d2      	lsls	r2, r2, #3
 8004280:	4920      	ldr	r1, [pc, #128]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004286:	4b1f      	ldr	r3, [pc, #124]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	4a1e      	ldr	r2, [pc, #120]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 800428c:	f043 0310 	orr.w	r3, r3, #16
 8004290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	4a19      	ldr	r2, [pc, #100]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 800429e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042a4:	e00f      	b.n	80042c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042b8:	e005      	b.n	80042c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042ba:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fc ff2f 	bl	8001134 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042d8:	e008      	b.n	80042ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042da:	f7fc ff2b 	bl	8001134 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042ec:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	ffff0007 	.word	0xffff0007

0800430c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800431a:	4b53      	ldr	r3, [pc, #332]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b03      	cmp	r3, #3
 8004324:	d101      	bne.n	800432a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e099      	b.n	800445e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800432a:	4b4f      	ldr	r3, [pc, #316]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4e      	ldr	r2, [pc, #312]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fc fefd 	bl	8001134 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800433c:	e008      	b.n	8004350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800433e:	f7fc fef9 	bl	8001134 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e086      	b.n	800445e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004350:	4b45      	ldr	r3, [pc, #276]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800435c:	4b42      	ldr	r3, [pc, #264]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	051b      	lsls	r3, r3, #20
 800436a:	493f      	ldr	r1, [pc, #252]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	b29b      	uxth	r3, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	3b01      	subs	r3, #1
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043a0:	4931      	ldr	r1, [pc, #196]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043a6:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492d      	ldr	r1, [pc, #180]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4928      	ldr	r1, [pc, #160]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ca:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	4a26      	ldr	r2, [pc, #152]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043da:	4b24      	ldr	r3, [pc, #144]	@ (800446c <RCCEx_PLL3_Config+0x160>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	69d2      	ldr	r2, [r2, #28]
 80043e2:	00d2      	lsls	r2, r2, #3
 80043e4:	4920      	ldr	r1, [pc, #128]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004402:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004408:	e00f      	b.n	800442a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004410:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	4a14      	ldr	r2, [pc, #80]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800441a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800441c:	e005      	b.n	800442a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	4a11      	ldr	r2, [pc, #68]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800442a:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0e      	ldr	r2, [pc, #56]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004436:	f7fc fe7d 	bl	8001134 <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800443c:	e008      	b.n	8004450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800443e:	f7fc fe79 	bl	8001134 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	ffff0007 	.word	0xffff0007

08004470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e049      	b.n	8004516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fc64 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fab8 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e049      	b.n	80045c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f841 	bl	80045cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f000 fa61 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x24>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e03c      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d109      	bne.n	800461e <HAL_TIM_PWM_Start+0x3e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e02f      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e022      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d109      	bne.n	8004652 <HAL_TIM_PWM_Start+0x72>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e015      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x8c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e008      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0a1      	b.n	80047ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xb6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004694:	e023      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xc6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	e01b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xd6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b4:	e013      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xe6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046c4:	e00b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xf6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	e003      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd18 	bl	800511c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_TIM_PWM_Start+0x1f4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a37      	ldr	r2, [pc, #220]	@ (80047d8 <HAL_TIM_PWM_Start+0x1f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <HAL_TIM_PWM_Start+0x1fc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a34      	ldr	r2, [pc, #208]	@ (80047e0 <HAL_TIM_PWM_Start+0x200>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a32      	ldr	r2, [pc, #200]	@ (80047e4 <HAL_TIM_PWM_Start+0x204>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_Start+0x142>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_TIM_PWM_Start+0x144>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a25      	ldr	r2, [pc, #148]	@ (80047d4 <HAL_TIM_PWM_Start+0x1f4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d01d      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	@ (80047e8 <HAL_TIM_PWM_Start+0x208>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	@ (80047ec <HAL_TIM_PWM_Start+0x20c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	@ (80047f0 <HAL_TIM_PWM_Start+0x210>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_TIM_PWM_Start+0x1f8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1e      	ldr	r2, [pc, #120]	@ (80047f4 <HAL_TIM_PWM_Start+0x214>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIM_PWM_Start+0x1a8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <HAL_TIM_PWM_Start+0x1fc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d115      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_TIM_PWM_Start+0x218>)
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d015      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1e6>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d011      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	e008      	b.n	80047c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e000      	b.n	80047c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40001800 	.word	0x40001800
 80047f8:	00010007 	.word	0x00010007

080047fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004816:	2302      	movs	r3, #2
 8004818:	e0ff      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b14      	cmp	r3, #20
 8004826:	f200 80f0 	bhi.w	8004a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800482a:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004885 	.word	0x08004885
 8004834:	08004a0b 	.word	0x08004a0b
 8004838:	08004a0b 	.word	0x08004a0b
 800483c:	08004a0b 	.word	0x08004a0b
 8004840:	080048c5 	.word	0x080048c5
 8004844:	08004a0b 	.word	0x08004a0b
 8004848:	08004a0b 	.word	0x08004a0b
 800484c:	08004a0b 	.word	0x08004a0b
 8004850:	08004907 	.word	0x08004907
 8004854:	08004a0b 	.word	0x08004a0b
 8004858:	08004a0b 	.word	0x08004a0b
 800485c:	08004a0b 	.word	0x08004a0b
 8004860:	08004947 	.word	0x08004947
 8004864:	08004a0b 	.word	0x08004a0b
 8004868:	08004a0b 	.word	0x08004a0b
 800486c:	08004a0b 	.word	0x08004a0b
 8004870:	08004989 	.word	0x08004989
 8004874:	08004a0b 	.word	0x08004a0b
 8004878:	08004a0b 	.word	0x08004a0b
 800487c:	08004a0b 	.word	0x08004a0b
 8004880:	080049c9 	.word	0x080049c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f970 	bl	8004b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6999      	ldr	r1, [r3, #24]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	619a      	str	r2, [r3, #24]
      break;
 80048c2:	e0a5      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f9e0 	bl	8004c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6999      	ldr	r1, [r3, #24]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	619a      	str	r2, [r3, #24]
      break;
 8004904:	e084      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fa49 	bl	8004da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0208 	orr.w	r2, r2, #8
 8004920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0204 	bic.w	r2, r2, #4
 8004930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69d9      	ldr	r1, [r3, #28]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	61da      	str	r2, [r3, #28]
      break;
 8004944:	e064      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fab1 	bl	8004eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69d9      	ldr	r1, [r3, #28]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	021a      	lsls	r2, r3, #8
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	61da      	str	r2, [r3, #28]
      break;
 8004986:	e043      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fafa 	bl	8004f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0204 	bic.w	r2, r2, #4
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049c6:	e023      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fb3e 	bl	8005050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a08:	e002      	b.n	8004a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop

08004a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a46      	ldr	r2, [pc, #280]	@ (8004b50 <TIM_Base_SetConfig+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d00f      	beq.n	8004a64 <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <TIM_Base_SetConfig+0x130>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a42      	ldr	r2, [pc, #264]	@ (8004b58 <TIM_Base_SetConfig+0x134>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a41      	ldr	r2, [pc, #260]	@ (8004b5c <TIM_Base_SetConfig+0x138>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a40      	ldr	r2, [pc, #256]	@ (8004b60 <TIM_Base_SetConfig+0x13c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a35      	ldr	r2, [pc, #212]	@ (8004b50 <TIM_Base_SetConfig+0x12c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <TIM_Base_SetConfig+0x130>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <TIM_Base_SetConfig+0x134>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <TIM_Base_SetConfig+0x138>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8004b60 <TIM_Base_SetConfig+0x13c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b64 <TIM_Base_SetConfig+0x140>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b68 <TIM_Base_SetConfig+0x144>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <TIM_Base_SetConfig+0x148>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <TIM_Base_SetConfig+0x12c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00f      	beq.n	8004b1c <TIM_Base_SetConfig+0xf8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <TIM_Base_SetConfig+0x13c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_Base_SetConfig+0xf8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <TIM_Base_SetConfig+0x140>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_Base_SetConfig+0xf8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <TIM_Base_SetConfig+0x144>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_Base_SetConfig+0xf8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <TIM_Base_SetConfig+0x148>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d103      	bne.n	8004b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]
  }
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40010400 	.word	0x40010400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 0201 	bic.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4b37      	ldr	r3, [pc, #220]	@ (8004c78 <TIM_OC1_SetConfig+0x108>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 0302 	bic.w	r3, r3, #2
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c7c <TIM_OC1_SetConfig+0x10c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00f      	beq.n	8004bec <TIM_OC1_SetConfig+0x7c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2c      	ldr	r2, [pc, #176]	@ (8004c80 <TIM_OC1_SetConfig+0x110>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_OC1_SetConfig+0x7c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c84 <TIM_OC1_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_OC1_SetConfig+0x7c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <TIM_OC1_SetConfig+0x118>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC1_SetConfig+0x7c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a29      	ldr	r2, [pc, #164]	@ (8004c8c <TIM_OC1_SetConfig+0x11c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10c      	bne.n	8004c06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0308 	bic.w	r3, r3, #8
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <TIM_OC1_SetConfig+0x10c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00f      	beq.n	8004c2e <TIM_OC1_SetConfig+0xbe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	@ (8004c80 <TIM_OC1_SetConfig+0x110>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_OC1_SetConfig+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1a      	ldr	r2, [pc, #104]	@ (8004c84 <TIM_OC1_SetConfig+0x114>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_OC1_SetConfig+0xbe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <TIM_OC1_SetConfig+0x118>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC1_SetConfig+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <TIM_OC1_SetConfig+0x11c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	fffeff8f 	.word	0xfffeff8f
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b34      	ldr	r3, [pc, #208]	@ (8004d8c <TIM_OC2_SetConfig+0xfc>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0320 	bic.w	r3, r3, #32
 8004cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a29      	ldr	r2, [pc, #164]	@ (8004d90 <TIM_OC2_SetConfig+0x100>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC2_SetConfig+0x68>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a28      	ldr	r2, [pc, #160]	@ (8004d94 <TIM_OC2_SetConfig+0x104>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10d      	bne.n	8004d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <TIM_OC2_SetConfig+0x100>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_OC2_SetConfig+0xac>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <TIM_OC2_SetConfig+0x104>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_OC2_SetConfig+0xac>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <TIM_OC2_SetConfig+0x108>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_OC2_SetConfig+0xac>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d9c <TIM_OC2_SetConfig+0x10c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_OC2_SetConfig+0xac>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1a      	ldr	r2, [pc, #104]	@ (8004da0 <TIM_OC2_SetConfig+0x110>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d113      	bne.n	8004d64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	feff8fff 	.word	0xfeff8fff
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800

08004da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <TIM_OC3_SetConfig+0xf8>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	@ (8004ea0 <TIM_OC3_SetConfig+0xfc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_OC3_SetConfig+0x66>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a27      	ldr	r2, [pc, #156]	@ (8004ea4 <TIM_OC3_SetConfig+0x100>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10d      	bne.n	8004e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <TIM_OC3_SetConfig+0xfc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_OC3_SetConfig+0xaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <TIM_OC3_SetConfig+0x100>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_OC3_SetConfig+0xaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <TIM_OC3_SetConfig+0x104>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_OC3_SetConfig+0xaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1a      	ldr	r2, [pc, #104]	@ (8004eac <TIM_OC3_SetConfig+0x108>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_OC3_SetConfig+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a19      	ldr	r2, [pc, #100]	@ (8004eb0 <TIM_OC3_SetConfig+0x10c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d113      	bne.n	8004e76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	fffeff8f 	.word	0xfffeff8f
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <TIM_OC4_SetConfig+0xbc>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <TIM_OC4_SetConfig+0xc0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_OC4_SetConfig+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <TIM_OC4_SetConfig+0xc4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_OC4_SetConfig+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <TIM_OC4_SetConfig+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_OC4_SetConfig+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	@ (8004f80 <TIM_OC4_SetConfig+0xcc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC4_SetConfig+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <TIM_OC4_SetConfig+0xd0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d109      	bne.n	8004f48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	019b      	lsls	r3, r3, #6
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	feff8fff 	.word	0xfeff8fff
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800

08004f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <TIM_OC5_SetConfig+0xb0>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	@ (800503c <TIM_OC5_SetConfig+0xb4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_OC5_SetConfig+0x76>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <TIM_OC5_SetConfig+0xb8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_OC5_SetConfig+0x76>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <TIM_OC5_SetConfig+0xbc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC5_SetConfig+0x76>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <TIM_OC5_SetConfig+0xc0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC5_SetConfig+0x76>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <TIM_OC5_SetConfig+0xc4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d109      	bne.n	8005012 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	fffeff8f 	.word	0xfffeff8f
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4b22      	ldr	r3, [pc, #136]	@ (8005104 <TIM_OC6_SetConfig+0xb4>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	051b      	lsls	r3, r3, #20
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a19      	ldr	r2, [pc, #100]	@ (8005108 <TIM_OC6_SetConfig+0xb8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00f      	beq.n	80050c8 <TIM_OC6_SetConfig+0x78>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a18      	ldr	r2, [pc, #96]	@ (800510c <TIM_OC6_SetConfig+0xbc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_OC6_SetConfig+0x78>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <TIM_OC6_SetConfig+0xc0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_OC6_SetConfig+0x78>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a16      	ldr	r2, [pc, #88]	@ (8005114 <TIM_OC6_SetConfig+0xc4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC6_SetConfig+0x78>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <TIM_OC6_SetConfig+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d109      	bne.n	80050dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	feff8fff 	.word	0xfeff8fff
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e042      	b.n	80051fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb fe88 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fd91 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f826 	bl	8005208 <UART_SetConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e01b      	b.n	80051fe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fe10 	bl	8005e1c <UART_CheckIdleState>
 80051fc:	4603      	mov	r3, r0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800520c:	b092      	sub	sp, #72	@ 0x48
 800520e:	af00      	add	r7, sp, #0
 8005210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	431a      	orrs	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	431a      	orrs	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	4313      	orrs	r3, r2
 800522e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4bbe      	ldr	r3, [pc, #760]	@ (8005530 <UART_SetConfig+0x328>)
 8005238:	4013      	ands	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005240:	430b      	orrs	r3, r1
 8005242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4ab3      	ldr	r2, [pc, #716]	@ (8005534 <UART_SetConfig+0x32c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005270:	4313      	orrs	r3, r2
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4baf      	ldr	r3, [pc, #700]	@ (8005538 <UART_SetConfig+0x330>)
 800527c:	4013      	ands	r3, r2
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005284:	430b      	orrs	r3, r1
 8005286:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	f023 010f 	bic.w	r1, r3, #15
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4aa6      	ldr	r2, [pc, #664]	@ (800553c <UART_SetConfig+0x334>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d177      	bne.n	8005398 <UART_SetConfig+0x190>
 80052a8:	4ba5      	ldr	r3, [pc, #660]	@ (8005540 <UART_SetConfig+0x338>)
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b0:	2b28      	cmp	r3, #40	@ 0x28
 80052b2:	d86d      	bhi.n	8005390 <UART_SetConfig+0x188>
 80052b4:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <UART_SetConfig+0xb4>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	08005361 	.word	0x08005361
 80052c0:	08005391 	.word	0x08005391
 80052c4:	08005391 	.word	0x08005391
 80052c8:	08005391 	.word	0x08005391
 80052cc:	08005391 	.word	0x08005391
 80052d0:	08005391 	.word	0x08005391
 80052d4:	08005391 	.word	0x08005391
 80052d8:	08005391 	.word	0x08005391
 80052dc:	08005369 	.word	0x08005369
 80052e0:	08005391 	.word	0x08005391
 80052e4:	08005391 	.word	0x08005391
 80052e8:	08005391 	.word	0x08005391
 80052ec:	08005391 	.word	0x08005391
 80052f0:	08005391 	.word	0x08005391
 80052f4:	08005391 	.word	0x08005391
 80052f8:	08005391 	.word	0x08005391
 80052fc:	08005371 	.word	0x08005371
 8005300:	08005391 	.word	0x08005391
 8005304:	08005391 	.word	0x08005391
 8005308:	08005391 	.word	0x08005391
 800530c:	08005391 	.word	0x08005391
 8005310:	08005391 	.word	0x08005391
 8005314:	08005391 	.word	0x08005391
 8005318:	08005391 	.word	0x08005391
 800531c:	08005379 	.word	0x08005379
 8005320:	08005391 	.word	0x08005391
 8005324:	08005391 	.word	0x08005391
 8005328:	08005391 	.word	0x08005391
 800532c:	08005391 	.word	0x08005391
 8005330:	08005391 	.word	0x08005391
 8005334:	08005391 	.word	0x08005391
 8005338:	08005391 	.word	0x08005391
 800533c:	08005381 	.word	0x08005381
 8005340:	08005391 	.word	0x08005391
 8005344:	08005391 	.word	0x08005391
 8005348:	08005391 	.word	0x08005391
 800534c:	08005391 	.word	0x08005391
 8005350:	08005391 	.word	0x08005391
 8005354:	08005391 	.word	0x08005391
 8005358:	08005391 	.word	0x08005391
 800535c:	08005389 	.word	0x08005389
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e222      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e21e      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e21a      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e216      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005380:	2320      	movs	r3, #32
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e212      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005388:	2340      	movs	r3, #64	@ 0x40
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e20e      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e20a      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a69      	ldr	r2, [pc, #420]	@ (8005544 <UART_SetConfig+0x33c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d130      	bne.n	8005404 <UART_SetConfig+0x1fc>
 80053a2:	4b67      	ldr	r3, [pc, #412]	@ (8005540 <UART_SetConfig+0x338>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d826      	bhi.n	80053fc <UART_SetConfig+0x1f4>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0x1ac>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e1ec      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e1e8      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e1e4      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e1e0      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053ec:	2320      	movs	r3, #32
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e1dc      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053f4:	2340      	movs	r3, #64	@ 0x40
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e1d8      	b.n	80057ae <UART_SetConfig+0x5a6>
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e1d4      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4f      	ldr	r2, [pc, #316]	@ (8005548 <UART_SetConfig+0x340>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d130      	bne.n	8005470 <UART_SetConfig+0x268>
 800540e:	4b4c      	ldr	r3, [pc, #304]	@ (8005540 <UART_SetConfig+0x338>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b05      	cmp	r3, #5
 8005418:	d826      	bhi.n	8005468 <UART_SetConfig+0x260>
 800541a:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0x218>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005439 	.word	0x08005439
 8005424:	08005441 	.word	0x08005441
 8005428:	08005449 	.word	0x08005449
 800542c:	08005451 	.word	0x08005451
 8005430:	08005459 	.word	0x08005459
 8005434:	08005461 	.word	0x08005461
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e1b6      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e1b2      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e1ae      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e1aa      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005458:	2320      	movs	r3, #32
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e1a6      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005460:	2340      	movs	r3, #64	@ 0x40
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e1a2      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e19e      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a35      	ldr	r2, [pc, #212]	@ (800554c <UART_SetConfig+0x344>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d130      	bne.n	80054dc <UART_SetConfig+0x2d4>
 800547a:	4b31      	ldr	r3, [pc, #196]	@ (8005540 <UART_SetConfig+0x338>)
 800547c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b05      	cmp	r3, #5
 8005484:	d826      	bhi.n	80054d4 <UART_SetConfig+0x2cc>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <UART_SetConfig+0x284>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054a5 	.word	0x080054a5
 8005490:	080054ad 	.word	0x080054ad
 8005494:	080054b5 	.word	0x080054b5
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e180      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e17c      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e178      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e174      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054c4:	2320      	movs	r3, #32
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e170      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054cc:	2340      	movs	r3, #64	@ 0x40
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e16c      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e168      	b.n	80057ae <UART_SetConfig+0x5a6>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005550 <UART_SetConfig+0x348>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d142      	bne.n	800556c <UART_SetConfig+0x364>
 80054e6:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <UART_SetConfig+0x338>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d838      	bhi.n	8005564 <UART_SetConfig+0x35c>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <UART_SetConfig+0x2f0>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005511 	.word	0x08005511
 80054fc:	08005519 	.word	0x08005519
 8005500:	08005521 	.word	0x08005521
 8005504:	08005529 	.word	0x08005529
 8005508:	08005555 	.word	0x08005555
 800550c:	0800555d 	.word	0x0800555d
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e14a      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e146      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e142      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e13e      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005530:	cfff69f3 	.word	0xcfff69f3
 8005534:	58000c00 	.word	0x58000c00
 8005538:	11fff4ff 	.word	0x11fff4ff
 800553c:	40011000 	.word	0x40011000
 8005540:	58024400 	.word	0x58024400
 8005544:	40004400 	.word	0x40004400
 8005548:	40004800 	.word	0x40004800
 800554c:	40004c00 	.word	0x40004c00
 8005550:	40005000 	.word	0x40005000
 8005554:	2320      	movs	r3, #32
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e128      	b.n	80057ae <UART_SetConfig+0x5a6>
 800555c:	2340      	movs	r3, #64	@ 0x40
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e124      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e120      	b.n	80057ae <UART_SetConfig+0x5a6>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4acb      	ldr	r2, [pc, #812]	@ (80058a0 <UART_SetConfig+0x698>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d176      	bne.n	8005664 <UART_SetConfig+0x45c>
 8005576:	4bcb      	ldr	r3, [pc, #812]	@ (80058a4 <UART_SetConfig+0x69c>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557e:	2b28      	cmp	r3, #40	@ 0x28
 8005580:	d86c      	bhi.n	800565c <UART_SetConfig+0x454>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <UART_SetConfig+0x380>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	0800562d 	.word	0x0800562d
 800558c:	0800565d 	.word	0x0800565d
 8005590:	0800565d 	.word	0x0800565d
 8005594:	0800565d 	.word	0x0800565d
 8005598:	0800565d 	.word	0x0800565d
 800559c:	0800565d 	.word	0x0800565d
 80055a0:	0800565d 	.word	0x0800565d
 80055a4:	0800565d 	.word	0x0800565d
 80055a8:	08005635 	.word	0x08005635
 80055ac:	0800565d 	.word	0x0800565d
 80055b0:	0800565d 	.word	0x0800565d
 80055b4:	0800565d 	.word	0x0800565d
 80055b8:	0800565d 	.word	0x0800565d
 80055bc:	0800565d 	.word	0x0800565d
 80055c0:	0800565d 	.word	0x0800565d
 80055c4:	0800565d 	.word	0x0800565d
 80055c8:	0800563d 	.word	0x0800563d
 80055cc:	0800565d 	.word	0x0800565d
 80055d0:	0800565d 	.word	0x0800565d
 80055d4:	0800565d 	.word	0x0800565d
 80055d8:	0800565d 	.word	0x0800565d
 80055dc:	0800565d 	.word	0x0800565d
 80055e0:	0800565d 	.word	0x0800565d
 80055e4:	0800565d 	.word	0x0800565d
 80055e8:	08005645 	.word	0x08005645
 80055ec:	0800565d 	.word	0x0800565d
 80055f0:	0800565d 	.word	0x0800565d
 80055f4:	0800565d 	.word	0x0800565d
 80055f8:	0800565d 	.word	0x0800565d
 80055fc:	0800565d 	.word	0x0800565d
 8005600:	0800565d 	.word	0x0800565d
 8005604:	0800565d 	.word	0x0800565d
 8005608:	0800564d 	.word	0x0800564d
 800560c:	0800565d 	.word	0x0800565d
 8005610:	0800565d 	.word	0x0800565d
 8005614:	0800565d 	.word	0x0800565d
 8005618:	0800565d 	.word	0x0800565d
 800561c:	0800565d 	.word	0x0800565d
 8005620:	0800565d 	.word	0x0800565d
 8005624:	0800565d 	.word	0x0800565d
 8005628:	08005655 	.word	0x08005655
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e0bc      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005634:	2304      	movs	r3, #4
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e0b8      	b.n	80057ae <UART_SetConfig+0x5a6>
 800563c:	2308      	movs	r3, #8
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e0b4      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005644:	2310      	movs	r3, #16
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e0b0      	b.n	80057ae <UART_SetConfig+0x5a6>
 800564c:	2320      	movs	r3, #32
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e0ac      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005654:	2340      	movs	r3, #64	@ 0x40
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e0a8      	b.n	80057ae <UART_SetConfig+0x5a6>
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e0a4      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a8f      	ldr	r2, [pc, #572]	@ (80058a8 <UART_SetConfig+0x6a0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d130      	bne.n	80056d0 <UART_SetConfig+0x4c8>
 800566e:	4b8d      	ldr	r3, [pc, #564]	@ (80058a4 <UART_SetConfig+0x69c>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b05      	cmp	r3, #5
 8005678:	d826      	bhi.n	80056c8 <UART_SetConfig+0x4c0>
 800567a:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0x478>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	08005699 	.word	0x08005699
 8005684:	080056a1 	.word	0x080056a1
 8005688:	080056a9 	.word	0x080056a9
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b9 	.word	0x080056b9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569e:	e086      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e082      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e07e      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e07a      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056b8:	2320      	movs	r3, #32
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e076      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056c0:	2340      	movs	r3, #64	@ 0x40
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e072      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e06e      	b.n	80057ae <UART_SetConfig+0x5a6>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a75      	ldr	r2, [pc, #468]	@ (80058ac <UART_SetConfig+0x6a4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d130      	bne.n	800573c <UART_SetConfig+0x534>
 80056da:	4b72      	ldr	r3, [pc, #456]	@ (80058a4 <UART_SetConfig+0x69c>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d826      	bhi.n	8005734 <UART_SetConfig+0x52c>
 80056e6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <UART_SetConfig+0x4e4>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005705 	.word	0x08005705
 80056f0:	0800570d 	.word	0x0800570d
 80056f4:	08005715 	.word	0x08005715
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e050      	b.n	80057ae <UART_SetConfig+0x5a6>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e04c      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e048      	b.n	80057ae <UART_SetConfig+0x5a6>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e044      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005724:	2320      	movs	r3, #32
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e040      	b.n	80057ae <UART_SetConfig+0x5a6>
 800572c:	2340      	movs	r3, #64	@ 0x40
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e03c      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005734:	2380      	movs	r3, #128	@ 0x80
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e038      	b.n	80057ae <UART_SetConfig+0x5a6>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5b      	ldr	r2, [pc, #364]	@ (80058b0 <UART_SetConfig+0x6a8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d130      	bne.n	80057a8 <UART_SetConfig+0x5a0>
 8005746:	4b57      	ldr	r3, [pc, #348]	@ (80058a4 <UART_SetConfig+0x69c>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b05      	cmp	r3, #5
 8005750:	d826      	bhi.n	80057a0 <UART_SetConfig+0x598>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <UART_SetConfig+0x550>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005771 	.word	0x08005771
 800575c:	08005779 	.word	0x08005779
 8005760:	08005781 	.word	0x08005781
 8005764:	08005789 	.word	0x08005789
 8005768:	08005791 	.word	0x08005791
 800576c:	08005799 	.word	0x08005799
 8005770:	2302      	movs	r3, #2
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e01a      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005778:	2304      	movs	r3, #4
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e016      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005780:	2308      	movs	r3, #8
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e012      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e00e      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005790:	2320      	movs	r3, #32
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e00a      	b.n	80057ae <UART_SetConfig+0x5a6>
 8005798:	2340      	movs	r3, #64	@ 0x40
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e006      	b.n	80057ae <UART_SetConfig+0x5a6>
 80057a0:	2380      	movs	r3, #128	@ 0x80
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e002      	b.n	80057ae <UART_SetConfig+0x5a6>
 80057a8:	2380      	movs	r3, #128	@ 0x80
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3f      	ldr	r2, [pc, #252]	@ (80058b0 <UART_SetConfig+0x6a8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f040 80f8 	bne.w	80059aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057be:	2b20      	cmp	r3, #32
 80057c0:	dc46      	bgt.n	8005850 <UART_SetConfig+0x648>
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	f2c0 8082 	blt.w	80058cc <UART_SetConfig+0x6c4>
 80057c8:	3b02      	subs	r3, #2
 80057ca:	2b1e      	cmp	r3, #30
 80057cc:	d87e      	bhi.n	80058cc <UART_SetConfig+0x6c4>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x5cc>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005857 	.word	0x08005857
 80057d8:	080058cd 	.word	0x080058cd
 80057dc:	0800585f 	.word	0x0800585f
 80057e0:	080058cd 	.word	0x080058cd
 80057e4:	080058cd 	.word	0x080058cd
 80057e8:	080058cd 	.word	0x080058cd
 80057ec:	0800586f 	.word	0x0800586f
 80057f0:	080058cd 	.word	0x080058cd
 80057f4:	080058cd 	.word	0x080058cd
 80057f8:	080058cd 	.word	0x080058cd
 80057fc:	080058cd 	.word	0x080058cd
 8005800:	080058cd 	.word	0x080058cd
 8005804:	080058cd 	.word	0x080058cd
 8005808:	080058cd 	.word	0x080058cd
 800580c:	0800587f 	.word	0x0800587f
 8005810:	080058cd 	.word	0x080058cd
 8005814:	080058cd 	.word	0x080058cd
 8005818:	080058cd 	.word	0x080058cd
 800581c:	080058cd 	.word	0x080058cd
 8005820:	080058cd 	.word	0x080058cd
 8005824:	080058cd 	.word	0x080058cd
 8005828:	080058cd 	.word	0x080058cd
 800582c:	080058cd 	.word	0x080058cd
 8005830:	080058cd 	.word	0x080058cd
 8005834:	080058cd 	.word	0x080058cd
 8005838:	080058cd 	.word	0x080058cd
 800583c:	080058cd 	.word	0x080058cd
 8005840:	080058cd 	.word	0x080058cd
 8005844:	080058cd 	.word	0x080058cd
 8005848:	080058cd 	.word	0x080058cd
 800584c:	080058bf 	.word	0x080058bf
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d037      	beq.n	80058c4 <UART_SetConfig+0x6bc>
 8005854:	e03a      	b.n	80058cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005856:	f7fe f9e9 	bl	8003c2c <HAL_RCCEx_GetD3PCLK1Freq>
 800585a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800585c:	e03c      	b.n	80058d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800585e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe f9f8 	bl	8003c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586c:	e034      	b.n	80058d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe fb44 	bl	8003f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800587c:	e02c      	b.n	80058d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <UART_SetConfig+0x69c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588a:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <UART_SetConfig+0x69c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	4a07      	ldr	r2, [pc, #28]	@ (80058b4 <UART_SetConfig+0x6ac>)
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800589c:	e01c      	b.n	80058d8 <UART_SetConfig+0x6d0>
 800589e:	bf00      	nop
 80058a0:	40011400 	.word	0x40011400
 80058a4:	58024400 	.word	0x58024400
 80058a8:	40007800 	.word	0x40007800
 80058ac:	40007c00 	.word	0x40007c00
 80058b0:	58000c00 	.word	0x58000c00
 80058b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058b8:	4b9d      	ldr	r3, [pc, #628]	@ (8005b30 <UART_SetConfig+0x928>)
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058bc:	e00c      	b.n	80058d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058be:	4b9d      	ldr	r3, [pc, #628]	@ (8005b34 <UART_SetConfig+0x92c>)
 80058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c2:	e009      	b.n	80058d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ca:	e005      	b.n	80058d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 81de 	beq.w	8005c9c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	4a94      	ldr	r2, [pc, #592]	@ (8005b38 <UART_SetConfig+0x930>)
 80058e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005900:	429a      	cmp	r2, r3
 8005902:	d305      	bcc.n	8005910 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590c:	429a      	cmp	r2, r3
 800590e:	d903      	bls.n	8005918 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005916:	e1c1      	b.n	8005c9c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591a:	2200      	movs	r2, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	60fa      	str	r2, [r7, #12]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	4a84      	ldr	r2, [pc, #528]	@ (8005b38 <UART_SetConfig+0x930>)
 8005926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592a:	b29b      	uxth	r3, r3
 800592c:	2200      	movs	r2, #0
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800593a:	f7fa fccd 	bl	80002d8 <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	020b      	lsls	r3, r1, #8
 8005950:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005954:	0202      	lsls	r2, r0, #8
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	6849      	ldr	r1, [r1, #4]
 800595a:	0849      	lsrs	r1, r1, #1
 800595c:	2000      	movs	r0, #0
 800595e:	460c      	mov	r4, r1
 8005960:	4605      	mov	r5, r0
 8005962:	eb12 0804 	adds.w	r8, r2, r4
 8005966:	eb43 0905 	adc.w	r9, r3, r5
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	469a      	mov	sl, r3
 8005972:	4693      	mov	fp, r2
 8005974:	4652      	mov	r2, sl
 8005976:	465b      	mov	r3, fp
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fcac 	bl	80002d8 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4613      	mov	r3, r2
 8005986:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598e:	d308      	bcc.n	80059a2 <UART_SetConfig+0x79a>
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005996:	d204      	bcs.n	80059a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e17c      	b.n	8005c9c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059a8:	e178      	b.n	8005c9c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b2:	f040 80c5 	bne.w	8005b40 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	dc48      	bgt.n	8005a50 <UART_SetConfig+0x848>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	db7b      	blt.n	8005aba <UART_SetConfig+0x8b2>
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d879      	bhi.n	8005aba <UART_SetConfig+0x8b2>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <UART_SetConfig+0x7c4>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	08005a57 	.word	0x08005a57
 80059d0:	08005a5f 	.word	0x08005a5f
 80059d4:	08005abb 	.word	0x08005abb
 80059d8:	08005abb 	.word	0x08005abb
 80059dc:	08005a67 	.word	0x08005a67
 80059e0:	08005abb 	.word	0x08005abb
 80059e4:	08005abb 	.word	0x08005abb
 80059e8:	08005abb 	.word	0x08005abb
 80059ec:	08005a77 	.word	0x08005a77
 80059f0:	08005abb 	.word	0x08005abb
 80059f4:	08005abb 	.word	0x08005abb
 80059f8:	08005abb 	.word	0x08005abb
 80059fc:	08005abb 	.word	0x08005abb
 8005a00:	08005abb 	.word	0x08005abb
 8005a04:	08005abb 	.word	0x08005abb
 8005a08:	08005abb 	.word	0x08005abb
 8005a0c:	08005a87 	.word	0x08005a87
 8005a10:	08005abb 	.word	0x08005abb
 8005a14:	08005abb 	.word	0x08005abb
 8005a18:	08005abb 	.word	0x08005abb
 8005a1c:	08005abb 	.word	0x08005abb
 8005a20:	08005abb 	.word	0x08005abb
 8005a24:	08005abb 	.word	0x08005abb
 8005a28:	08005abb 	.word	0x08005abb
 8005a2c:	08005abb 	.word	0x08005abb
 8005a30:	08005abb 	.word	0x08005abb
 8005a34:	08005abb 	.word	0x08005abb
 8005a38:	08005abb 	.word	0x08005abb
 8005a3c:	08005abb 	.word	0x08005abb
 8005a40:	08005abb 	.word	0x08005abb
 8005a44:	08005abb 	.word	0x08005abb
 8005a48:	08005abb 	.word	0x08005abb
 8005a4c:	08005aad 	.word	0x08005aad
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	d02e      	beq.n	8005ab2 <UART_SetConfig+0x8aa>
 8005a54:	e031      	b.n	8005aba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a56:	f7fc feb3 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8005a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a5c:	e033      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a5e:	f7fc fec5 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8005a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a64:	e02f      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe f8f4 	bl	8003c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a74:	e027      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a76:	f107 0318 	add.w	r3, r7, #24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe fa40 	bl	8003f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a84:	e01f      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a86:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <UART_SetConfig+0x934>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a92:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <UART_SetConfig+0x934>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <UART_SetConfig+0x928>)
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa4:	e00f      	b.n	8005ac6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aa6:	4b22      	ldr	r3, [pc, #136]	@ (8005b30 <UART_SetConfig+0x928>)
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aaa:	e00c      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aac:	4b21      	ldr	r3, [pc, #132]	@ (8005b34 <UART_SetConfig+0x92c>)
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab0:	e009      	b.n	8005ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab8:	e005      	b.n	8005ac6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80e7 	beq.w	8005c9c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	4a19      	ldr	r2, [pc, #100]	@ (8005b38 <UART_SetConfig+0x930>)
 8005ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae0:	005a      	lsls	r2, r3, #1
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	441a      	add	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	2b0f      	cmp	r3, #15
 8005af8:	d916      	bls.n	8005b28 <UART_SetConfig+0x920>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b00:	d212      	bcs.n	8005b28 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f023 030f 	bic.w	r3, r3, #15
 8005b0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	e0b9      	b.n	8005c9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b2e:	e0b5      	b.n	8005c9c <UART_SetConfig+0xa94>
 8005b30:	03d09000 	.word	0x03d09000
 8005b34:	003d0900 	.word	0x003d0900
 8005b38:	080063a0 	.word	0x080063a0
 8005b3c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	dc49      	bgt.n	8005bdc <UART_SetConfig+0x9d4>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db7c      	blt.n	8005c46 <UART_SetConfig+0xa3e>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d87a      	bhi.n	8005c46 <UART_SetConfig+0xa3e>
 8005b50:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0x950>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005be3 	.word	0x08005be3
 8005b5c:	08005beb 	.word	0x08005beb
 8005b60:	08005c47 	.word	0x08005c47
 8005b64:	08005c47 	.word	0x08005c47
 8005b68:	08005bf3 	.word	0x08005bf3
 8005b6c:	08005c47 	.word	0x08005c47
 8005b70:	08005c47 	.word	0x08005c47
 8005b74:	08005c47 	.word	0x08005c47
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c47 	.word	0x08005c47
 8005b80:	08005c47 	.word	0x08005c47
 8005b84:	08005c47 	.word	0x08005c47
 8005b88:	08005c47 	.word	0x08005c47
 8005b8c:	08005c47 	.word	0x08005c47
 8005b90:	08005c47 	.word	0x08005c47
 8005b94:	08005c47 	.word	0x08005c47
 8005b98:	08005c13 	.word	0x08005c13
 8005b9c:	08005c47 	.word	0x08005c47
 8005ba0:	08005c47 	.word	0x08005c47
 8005ba4:	08005c47 	.word	0x08005c47
 8005ba8:	08005c47 	.word	0x08005c47
 8005bac:	08005c47 	.word	0x08005c47
 8005bb0:	08005c47 	.word	0x08005c47
 8005bb4:	08005c47 	.word	0x08005c47
 8005bb8:	08005c47 	.word	0x08005c47
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005c47 	.word	0x08005c47
 8005bc4:	08005c47 	.word	0x08005c47
 8005bc8:	08005c47 	.word	0x08005c47
 8005bcc:	08005c47 	.word	0x08005c47
 8005bd0:	08005c47 	.word	0x08005c47
 8005bd4:	08005c47 	.word	0x08005c47
 8005bd8:	08005c39 	.word	0x08005c39
 8005bdc:	2b40      	cmp	r3, #64	@ 0x40
 8005bde:	d02e      	beq.n	8005c3e <UART_SetConfig+0xa36>
 8005be0:	e031      	b.n	8005c46 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be2:	f7fc fded 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8005be6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005be8:	e033      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bea:	f7fc fdff 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8005bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bf0:	e02f      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe f82e 	bl	8003c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c00:	e027      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c02:	f107 0318 	add.w	r3, r7, #24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe f97a 	bl	8003f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c10:	e01f      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c12:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc8 <UART_SetConfig+0xac0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <UART_SetConfig+0xac0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	08db      	lsrs	r3, r3, #3
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	4a28      	ldr	r2, [pc, #160]	@ (8005ccc <UART_SetConfig+0xac4>)
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c30:	e00f      	b.n	8005c52 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c32:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <UART_SetConfig+0xac4>)
 8005c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c36:	e00c      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c38:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <UART_SetConfig+0xac8>)
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3c:	e009      	b.n	8005c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c50:	bf00      	nop
    }

    if (pclk != 0U)
 8005c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d021      	beq.n	8005c9c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <UART_SetConfig+0xacc>)
 8005c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c66:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	441a      	add	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d909      	bls.n	8005c96 <UART_SetConfig+0xa8e>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c88:	d205      	bcs.n	8005c96 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e002      	b.n	8005c9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cb8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3748      	adds	r7, #72	@ 0x48
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	03d09000 	.word	0x03d09000
 8005cd0:	003d0900 	.word	0x003d0900
 8005cd4:	080063a0 	.word	0x080063a0

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b098      	sub	sp, #96	@ 0x60
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fb f982 	bl	8001134 <HAL_GetTick>
 8005e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d12f      	bne.n	8005ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f88e 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d022      	beq.n	8005ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e063      	b.n	8005f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d149      	bne.n	8005f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f857 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d03c      	beq.n	8005f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f1a:	61fa      	str	r2, [r7, #28]
 8005f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	617b      	str	r3, [r7, #20]
   return(result);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e012      	b.n	8005f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3758      	adds	r7, #88	@ 0x58
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f80:	e04f      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d04b      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fb f8d3 	bl	8001134 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e04e      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d037      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b80      	cmp	r3, #128	@ 0x80
 8005fb6:	d034      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b40      	cmp	r3, #64	@ 0x40
 8005fbc:	d031      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d110      	bne.n	8005fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f839 	bl	800604c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e029      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ffc:	d111      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f81f 	bl	800604c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e00f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d0a0      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b095      	sub	sp, #84	@ 0x54
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006072:	643b      	str	r3, [r7, #64]	@ 0x40
 8006074:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006078:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	61fb      	str	r3, [r7, #28]
   return(result);
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	4b1e      	ldr	r3, [pc, #120]	@ (8006114 <UART_EndRxTransfer+0xc8>)
 800609a:	4013      	ands	r3, r2
 800609c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d118      	bne.n	80060f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6979      	ldr	r1, [r7, #20]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	613b      	str	r3, [r7, #16]
   return(result);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e6      	bne.n	80060c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006108:	bf00      	nop
 800610a:	3754      	adds	r7, #84	@ 0x54
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	effffffe 	.word	0xeffffffe

08006118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_UARTEx_DisableFifoMode+0x16>
 800612a:	2302      	movs	r3, #2
 800612c:	e027      	b.n	800617e <HAL_UARTEx_DisableFifoMode+0x66>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2224      	movs	r2, #36	@ 0x24
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0201 	bic.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800615c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800619e:	2302      	movs	r3, #2
 80061a0:	e02d      	b.n	80061fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2224      	movs	r2, #36	@ 0x24
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f850 	bl	8006284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800621a:	2302      	movs	r3, #2
 800621c:	e02d      	b.n	800627a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2224      	movs	r2, #36	@ 0x24
 800622a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f812 	bl	8006284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006290:	2b00      	cmp	r3, #0
 8006292:	d108      	bne.n	80062a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062a4:	e031      	b.n	800630a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062a6:	2310      	movs	r3, #16
 80062a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062aa:	2310      	movs	r3, #16
 80062ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	0e5b      	lsrs	r3, r3, #25
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	0f5b      	lsrs	r3, r3, #29
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	7b3a      	ldrb	r2, [r7, #12]
 80062d2:	4911      	ldr	r1, [pc, #68]	@ (8006318 <UARTEx_SetNbDataToProcess+0x94>)
 80062d4:	5c8a      	ldrb	r2, [r1, r2]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062da:	7b3a      	ldrb	r2, [r7, #12]
 80062dc:	490f      	ldr	r1, [pc, #60]	@ (800631c <UARTEx_SetNbDataToProcess+0x98>)
 80062de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	7b7a      	ldrb	r2, [r7, #13]
 80062f0:	4909      	ldr	r1, [pc, #36]	@ (8006318 <UARTEx_SetNbDataToProcess+0x94>)
 80062f2:	5c8a      	ldrb	r2, [r1, r2]
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062f8:	7b7a      	ldrb	r2, [r7, #13]
 80062fa:	4908      	ldr	r1, [pc, #32]	@ (800631c <UARTEx_SetNbDataToProcess+0x98>)
 80062fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	080063b8 	.word	0x080063b8
 800631c:	080063c0 	.word	0x080063c0

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	@ (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	@ (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	@ (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	@ (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f818 	bl	8006378 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	080063d0 	.word	0x080063d0
 800636c:	080063d0 	.word	0x080063d0
 8006370:	080063d0 	.word	0x080063d0
 8006374:	080063d4 	.word	0x080063d4

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
