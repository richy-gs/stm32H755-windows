
stm32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00007540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006550  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  08006560  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  08006560  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013200  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217c  00000000  00000000  0001b23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bee  00000000  00000000  0001e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a06f  00000000  00000000  0001eef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136cc  00000000  00000000  00058f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185bf9  00000000  00000000  0006c631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f222a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  001f2270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f6358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080064c0 	.word	0x080064c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080064c0 	.word	0x080064c0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <Motor_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Motor_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <Motor_Init+0x24>)
 80006fc:	f004 f814 	bl	8004728 <HAL_TIM_PWM_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <Motor_Init+0x16>
	  {
	  	  Error_Handler();
 8000706:	f000 fbcb 	bl	8000ea0 <Error_Handler>
	  }
	  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 1500);
 800070a:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <Motor_Init+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000078 	.word	0x24000078

0800071c <Motor_SetSpeed2>:

void Motor_SetSpeed2(int speed, int delayTime) // Range from -100 to 100
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	const uint32_t change = 10;
 8000726:	230a      	movs	r3, #10
 8000728:	613b      	str	r3, [r7, #16]
	uint32_t delay = 10;
 800072a:	230a      	movs	r3, #10
 800072c:	60fb      	str	r3, [r7, #12]
	uint32_t x = TIM14->CCR1;
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <Motor_SetSpeed2+0x90>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000732:	617b      	str	r3, [r7, #20]

	if(speed > 100) speed = 100;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b64      	cmp	r3, #100	@ 0x64
 8000738:	dd02      	ble.n	8000740 <Motor_SetSpeed2+0x24>
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e006      	b.n	800074e <Motor_SetSpeed2+0x32>
	else if (speed < -100) speed = -100;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000746:	da02      	bge.n	800074e <Motor_SetSpeed2+0x32>
 8000748:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800074c:	607b      	str	r3, [r7, #4]

	int newSpeed = 1500 + (speed*5);
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800075a:	60bb      	str	r3, [r7, #8]

	while(abs(newSpeed - x) > 10)
 800075c:	e016      	b.n	800078c <Motor_SetSpeed2+0x70>
	{
		if (newSpeed > x) x += change;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	429a      	cmp	r2, r3
 8000764:	d204      	bcs.n	8000770 <Motor_SetSpeed2+0x54>
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	4413      	add	r3, r2
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e007      	b.n	8000780 <Motor_SetSpeed2+0x64>
		else if (newSpeed < x) x -= change;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	429a      	cmp	r2, r3
 8000776:	d903      	bls.n	8000780 <Motor_SetSpeed2+0x64>
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]

		TIM14->CCR1 = (uint32_t) x;
 8000780:	4a0a      	ldr	r2, [pc, #40]	@ (80007ac <Motor_SetSpeed2+0x90>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(delay);
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 fd9e 	bl	80012c8 <HAL_Delay>
	while(abs(newSpeed - x) > 10)
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	bfb8      	it	lt
 8000796:	425b      	neglt	r3, r3
 8000798:	2b0a      	cmp	r3, #10
 800079a:	dce0      	bgt.n	800075e <Motor_SetSpeed2+0x42>
	}
	HAL_Delay(delayTime);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd92 	bl	80012c8 <HAL_Delay>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40002000 	.word	0x40002000

080007b0 <ExecuteMovement>:
{
   Motor_SetSpeed2(0,1000);
}

void ExecuteMovement(MovementRoutine *movement)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  switch (movement -> movement)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d840      	bhi.n	8000842 <ExecuteMovement+0x92>
 80007c0:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <ExecuteMovement+0x18>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	080007f5 	.word	0x080007f5
 80007d0:	0800080f 	.word	0x0800080f
 80007d4:	08000829 	.word	0x08000829
  {
  case mov_front:
	  Servo_SetAngle(movement->angle);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f849 	bl	8000874 <Servo_SetAngle>
	  Motor_SetSpeed2(movement->speed, movement->time);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4610      	mov	r0, r2
 80007ee:	f7ff ff95 	bl	800071c <Motor_SetSpeed2>
    break;
 80007f2:	e027      	b.n	8000844 <ExecuteMovement+0x94>
  case mov_back:
	  Servo_SetAngle(movement->angle);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f83b 	bl	8000874 <Servo_SetAngle>
	  Motor_SetSpeed2(movement->speed, movement->time);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	4610      	mov	r0, r2
 800080a:	f7ff ff87 	bl	800071c <Motor_SetSpeed2>
  case mov_left:
    Servo_SetAngle(movement->angle);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f82e 	bl	8000874 <Servo_SetAngle>
    Motor_SetSpeed2(movement->speed, movement->time);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f7ff ff7a 	bl	800071c <Motor_SetSpeed2>
  case mov_right:
  Servo_SetAngle(movement->angle);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f821 	bl	8000874 <Servo_SetAngle>
    Motor_SetSpeed2(movement->speed, movement->time);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4619      	mov	r1, r3
 800083c:	4610      	mov	r0, r2
 800083e:	f7ff ff6d 	bl	800071c <Motor_SetSpeed2>
  default:
    break;
 8000842:	bf00      	nop
  }
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Servo_Init>:

void Servo_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <Servo_Init+0x24>)
 8000854:	f003 ff68 	bl	8004728 <HAL_TIM_PWM_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <Servo_Init+0x16>
	  {
		  Error_Handler();
 800085e:	f000 fb1f 	bl	8000ea0 <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, 1500);
 8000862:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <Servo_Init+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800086a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2400002c 	.word	0x2400002c

08000874 <Servo_SetAngle>:

// Function to set the servo position (angle)
void Servo_SetAngle(int angle)		// Angle betweeen
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	const uint32_t change = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	613b      	str	r3, [r7, #16]
	uint32_t delay = 10;
 8000880:	230a      	movs	r3, #10
 8000882:	60fb      	str	r3, [r7, #12]
	uint32_t x = TIM13->CCR1;
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <Servo_SetAngle+0x90>)
 8000886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000888:	617b      	str	r3, [r7, #20]


	if(angle > 60) angle = 60;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b3c      	cmp	r3, #60	@ 0x3c
 800088e:	dd02      	ble.n	8000896 <Servo_SetAngle+0x22>
 8000890:	233c      	movs	r3, #60	@ 0x3c
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	e006      	b.n	80008a4 <Servo_SetAngle+0x30>
	else if (angle < -50) angle = -50;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 800089c:	da02      	bge.n	80008a4 <Servo_SetAngle+0x30>
 800089e:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80008a2:	607b      	str	r3, [r7, #4]

	int newAngle = 1500 + (angle*9);
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4613      	mov	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	4413      	add	r3, r2
 80008ac:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80008b0:	60bb      	str	r3, [r7, #8]

	while(abs(newAngle - x) > 10)
 80008b2:	e016      	b.n	80008e2 <Servo_SetAngle+0x6e>
	{
		if (newAngle > x) x = x + change;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d204      	bcs.n	80008c6 <Servo_SetAngle+0x52>
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4413      	add	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e007      	b.n	80008d6 <Servo_SetAngle+0x62>
		else if (newAngle < x) x = x - change;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d903      	bls.n	80008d6 <Servo_SetAngle+0x62>
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]

		TIM13->CCR1 = (uint32_t) x;
 80008d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <Servo_SetAngle+0x90>)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(delay);
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 fcf3 	bl	80012c8 <HAL_Delay>
	while(abs(newAngle - x) > 10)
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bfb8      	it	lt
 80008ec:	425b      	neglt	r3, r3
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	dce0      	bgt.n	80008b4 <Servo_SetAngle+0x40>
	}
	HAL_Delay(2000);
 80008f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008f6:	f000 fce7 	bl	80012c8 <HAL_Delay>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40001c00 	.word	0x40001c00

08000908 <routine1>:

void routine1(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b091      	sub	sp, #68	@ 0x44
 800090c:	af00      	add	r7, sp, #0
//  MovementType front = mov_front;
//  MovementType back = mov_back;
//  MovementType left = mov_left;
//  MovementType right = mov_right;
	MovementRoutine moveFrontInstance = {mov_front, 1000, 0, -100};
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <routine1+0x60>)
 8000910:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MovementRoutine moveRightInstance = {mov_right, 800, 60, -100};
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <routine1+0x64>)
 800091c:	f107 0414 	add.w	r4, r7, #20
 8000920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MovementRoutine noMoveInstance = {mov_right, 6000, 0, 0};
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <routine1+0x68>)
 8000928:	1d3c      	adds	r4, r7, #4
 800092a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800092c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MovementRoutine *moveFront = &moveFrontInstance;
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
	MovementRoutine *moveRight = &moveRightInstance;
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	63bb      	str	r3, [r7, #56]	@ 0x38
	MovementRoutine *noMove = &noMoveInstance;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  ExecuteMovement(moveFront);
 8000940:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000942:	f7ff ff35 	bl	80007b0 <ExecuteMovement>
  ExecuteMovement(moveRight);
 8000946:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000948:	f7ff ff32 	bl	80007b0 <ExecuteMovement>
  ExecuteMovement(moveFront);
 800094c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800094e:	f7ff ff2f 	bl	80007b0 <ExecuteMovement>
  ExecuteMovement(moveRight);
 8000952:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000954:	f7ff ff2c 	bl	80007b0 <ExecuteMovement>
  ExecuteMovement(noMove);
 8000958:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800095a:	f7ff ff29 	bl	80007b0 <ExecuteMovement>
}
 800095e:	bf00      	nop
 8000960:	3744      	adds	r7, #68	@ 0x44
 8000962:	46bd      	mov	sp, r7
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	bf00      	nop
 8000968:	080064d8 	.word	0x080064d8
 800096c:	080064e8 	.word	0x080064e8
 8000970:	080064f8 	.word	0x080064f8

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800097a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800097e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000980:	bf00      	nop
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <main+0xb0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <main+0x24>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dcf4      	bgt.n	8000982 <main+0xe>
  if ( timeout < 0 )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da01      	bge.n	80009a2 <main+0x2e>
  {
  Error_Handler();
 800099e:	f000 fa7f 	bl	8000ea0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fbff 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f83f 	bl	8000a28 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <main+0xb0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <main+0xb0>)
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <main+0xb0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 ff5b 	bl	8001884 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 ff71 	bl	80018b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009da:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009dc:	bf00      	nop
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <main+0xb0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d104      	bne.n	80009f4 <main+0x80>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dcf4      	bgt.n	80009de <main+0x6a>
if ( timeout < 0 )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da01      	bge.n	80009fe <main+0x8a>
{
Error_Handler();
 80009fa:	f000 fa51 	bl	8000ea0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f975 	bl	8000cec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a02:	f000 f927 	bl	8000c54 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000a06:	f000 f8d7 	bl	8000bb8 <MX_TIM14_Init>
  MX_TIM13_Init();
 8000a0a:	f000 f887 	bl	8000b1c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8000a0e:	f7ff ff1d 	bl	800084c <Servo_Init>
  Motor_Init();
 8000a12:	f7ff fe6f 	bl	80006f4 <Motor_Init>
  HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	@ 0x64
 8000a18:	f000 fc56 	bl	80012c8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  routine1();
 8000a1c:	f7ff ff74 	bl	8000908 <routine1>
 8000a20:	e7fc      	b.n	8000a1c <main+0xa8>
 8000a22:	bf00      	nop
 8000a24:	58024400 	.word	0x58024400

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	@ 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	224c      	movs	r2, #76	@ 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fd16 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 fd10 	bl	8006468 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f000 ff49 	bl	80018e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <SystemClock_Config+0xec>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a2f      	ldr	r2, [pc, #188]	@ (8000b14 <SystemClock_Config+0xec>)
 8000a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <SystemClock_Config+0xec>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <SystemClock_Config+0xf0>)
 8000a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <SystemClock_Config+0xf0>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <SystemClock_Config+0xf0>)
 8000a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a80:	bf00      	nop
 8000a82:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <SystemClock_Config+0xec>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a8e:	d1f8      	bne.n	8000a82 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a94:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000aa6:	23f0      	movs	r3, #240	@ 0xf0
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ff64 	bl	8001994 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ad2:	f000 f9e5 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	233f      	movs	r3, #63	@ 0x3f
 8000ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2303      	movs	r3, #3
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aea:	2340      	movs	r3, #64	@ 0x40
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af4:	2340      	movs	r3, #64	@ 0x40
 8000af6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2104      	movs	r1, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fba3 	bl	8002248 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b08:	f000 f9ca 	bl	8000ea0 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3770      	adds	r7, #112	@ 0x70
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58024800 	.word	0x58024800
 8000b18:	58000400 	.word	0x58000400

08000b1c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b36:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <MX_TIM13_Init+0x98>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b3c:	22ef      	movs	r2, #239	@ 0xef
 8000b3e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b48:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b4c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b5a:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b5c:	f003 fd2c 	bl	80045b8 <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000b66:	f000 f99b 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000b6a:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b6c:	f003 fd7b 	bl	8004666 <HAL_TIM_PWM_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000b76:	f000 f993 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	@ 0x60
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000b7e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000b94:	f003 fed6 	bl	8004944 <HAL_TIM_PWM_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000b9e:	f000 f97f 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <MX_TIM13_Init+0x94>)
 8000ba4:	f000 f9d6 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2400002c 	.word	0x2400002c
 8000bb4:	40001c00 	.word	0x40001c00

08000bb8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <MX_TIM14_Init+0x98>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bd8:	22ef      	movs	r2, #239	@ 0xef
 8000bda:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000be4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000be8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bf6:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000bf8:	f003 fcde 	bl	80045b8 <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000c02:	f000 f94d 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c06:	4811      	ldr	r0, [pc, #68]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000c08:	f003 fd2d 	bl	8004666 <HAL_TIM_PWM_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000c12:	f000 f945 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c16:	2360      	movs	r3, #96	@ 0x60
 8000c18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000c1a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000c30:	f003 fe88 	bl	8004944 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000c3a:	f000 f931 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MX_TIM14_Init+0x94>)
 8000c40:	f000 f988 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	24000078 	.word	0x24000078
 8000c50:	40002000 	.word	0x40002000

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <MX_USART3_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c9e:	f004 fb06 	bl	80052ae <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f8fa 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cb0:	f005 fb0f 	bl	80062d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 f8f1 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cc2:	f005 fb44 	bl	800634e <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 f8e8 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f005 fac5 	bl	8006260 <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f8e0 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240000c4 	.word	0x240000c4
 8000ce8:	40004800 	.word	0x40004800

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d02:	4b62      	ldr	r3, [pc, #392]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a60      	ldr	r2, [pc, #384]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b5e      	ldr	r3, [pc, #376]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b5a      	ldr	r3, [pc, #360]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a59      	ldr	r2, [pc, #356]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b56      	ldr	r3, [pc, #344]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b53      	ldr	r3, [pc, #332]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	4a51      	ldr	r2, [pc, #324]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	4a4a      	ldr	r2, [pc, #296]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6c:	4b47      	ldr	r3, [pc, #284]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b44      	ldr	r3, [pc, #272]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	4a42      	ldr	r2, [pc, #264]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8a:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b3c      	ldr	r3, [pc, #240]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <MX_GPIO_Init+0x1a0>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2101      	movs	r1, #1
 8000dba:	4835      	ldr	r0, [pc, #212]	@ (8000e90 <MX_GPIO_Init+0x1a4>)
 8000dbc:	f000 fd48 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	482e      	ldr	r0, [pc, #184]	@ (8000e94 <MX_GPIO_Init+0x1a8>)
 8000ddc:	f000 fb88 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000de0:	2386      	movs	r3, #134	@ 0x86
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df0:	230b      	movs	r3, #11
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4827      	ldr	r0, [pc, #156]	@ (8000e98 <MX_GPIO_Init+0x1ac>)
 8000dfc:	f000 fb78 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <MX_GPIO_Init+0x1a4>)
 8000e18:	f000 fb6a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4815      	ldr	r0, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0x1a4>)
 8000e3a:	f000 fb59 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e3e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e50:	230a      	movs	r3, #10
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480f      	ldr	r0, [pc, #60]	@ (8000e98 <MX_GPIO_Init+0x1ac>)
 8000e5c:	f000 fb48 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <MX_GPIO_Init+0x1b0>)
 8000e7e:	f000 fb37 	bl	80014f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	@ 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020400 	.word	0x58020400
 8000e94:	58020800 	.word	0x58020800
 8000e98:	58020000 	.word	0x58020000
 8000e9c:	58021800 	.word	0x58021800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_TIM_Base_MspInit+0x68>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10f      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef8:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f10:	e013      	b.n	8000f3a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_TIM_Base_MspInit+0x70>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d10e      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_TIM_Base_MspInit+0x6c>)
 8000f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40001c00 	.word	0x40001c00
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	40002000 	.word	0x40002000

08000f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_TIM_MspPostInit+0xb8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d120      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4818      	ldr	r0, [pc, #96]	@ (8001014 <HAL_TIM_MspPostInit+0xc0>)
 8000fb2:	f000 fa9d 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000fb6:	e024      	b.n	8001002 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <HAL_TIM_MspPostInit+0xc4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d11f      	bne.n	8001002 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc8:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_TIM_MspPostInit+0xbc>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8000fe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_TIM_MspPostInit+0xc0>)
 8000ffe:	f000 fa77 	bl	80014f0 <HAL_GPIO_Init>
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40001c00 	.word	0x40001c00
 8001010:	58024400 	.word	0x58024400
 8001014:	58021400 	.word	0x58021400
 8001018:	40002000 	.word	0x40002000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fa13 	bl	8006468 <memset>
  if(huart->Instance==USART3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d146      	bne.n	80010da <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800104c:	f04f 0202 	mov.w	r2, #2
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fc7c 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f7ff ff17 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 8001074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 800107a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800107e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 8001084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RT_Pin|STLINK_TX_Pin;
 80010ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c8:	2307      	movs	r3, #7
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <HAL_UART_MspInit+0xd0>)
 80010d6:	f000 fa0b 	bl	80014f0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	37e8      	adds	r7, #232	@ 0xe8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004800 	.word	0x40004800
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020c00 	.word	0x58020c00

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f89f 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f7ff fa38 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 f97b 	bl	8006478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fbf7 	bl	8000974 <main>
  bx  lr
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800118c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001190:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001194:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 8001198:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800119c:	2400015c 	.word	0x2400015c

080011a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC3_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f96e 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b0:	f001 fa00 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_Init+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	4913      	ldr	r1, [pc, #76]	@ (8001210 <HAL_Init+0x6c>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_Init+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HAL_Init+0x6c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_Init+0x70>)
 80011e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_Init+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f814 	bl	800121c <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e002      	b.n	8001204 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011fe:	f7ff fe55 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	08006508 	.word	0x08006508
 8001214:	24000004 	.word	0x24000004
 8001218:	24000000 	.word	0x24000000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e021      	b.n	8001274 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_InitTick+0x64>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f945 	bl	80014d6 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f91d 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_InitTick+0x68>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400000c 	.word	0x2400000c
 8001280:	24000000 	.word	0x24000000
 8001284:	24000008 	.word	0x24000008

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2400000c 	.word	0x2400000c
 80012ac:	24000158 	.word	0x24000158

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	24000158 	.word	0x24000158

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400000c 	.word	0x2400000c

08001310 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_GetREVID+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0c1b      	lsrs	r3, r3, #16
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	5c001000 	.word	0x5c001000

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0000 	.word	0x05fa0000

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	@ (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	@ (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	@ 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	@ 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5e 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff90 	bl	80013e0 <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5f 	bl	800138c <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb2 	bl	8001448 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014fe:	4b89      	ldr	r3, [pc, #548]	@ (8001724 <HAL_GPIO_Init+0x234>)
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001502:	e194      	b.n	800182e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8186 	beq.w	8001828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x44>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 0201 	and.w	r2, r3, #1
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80e0 	beq.w	8001828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_GPIO_Init+0x238>)
 800166a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166e:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <HAL_GPIO_Init+0x238>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_GPIO_Init+0x238>)
 800167a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_GPIO_Init+0x23c>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <HAL_GPIO_Init+0x240>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d052      	beq.n	8001758 <HAL_GPIO_Init+0x268>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <HAL_GPIO_Init+0x244>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_GPIO_Init+0x22e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_GPIO_Init+0x248>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02b      	beq.n	800171a <HAL_GPIO_Init+0x22a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x24c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <HAL_GPIO_Init+0x250>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x254>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001748 <HAL_GPIO_Init+0x258>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x25c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <HAL_GPIO_Init+0x260>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_GPIO_Init+0x264>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x20e>
 80016fa:	2309      	movs	r3, #9
 80016fc:	e02d      	b.n	800175a <HAL_GPIO_Init+0x26a>
 80016fe:	230a      	movs	r3, #10
 8001700:	e02b      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001702:	2308      	movs	r3, #8
 8001704:	e029      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001706:	2307      	movs	r3, #7
 8001708:	e027      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800170a:	2306      	movs	r3, #6
 800170c:	e025      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800170e:	2305      	movs	r3, #5
 8001710:	e023      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001712:	2304      	movs	r3, #4
 8001714:	e021      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001716:	2303      	movs	r3, #3
 8001718:	e01f      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800171a:	2302      	movs	r3, #2
 800171c:	e01d      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800171e:	2301      	movs	r3, #1
 8001720:	e01b      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001722:	bf00      	nop
 8001724:	58000080 	.word	0x58000080
 8001728:	58024400 	.word	0x58024400
 800172c:	58000400 	.word	0x58000400
 8001730:	58020000 	.word	0x58020000
 8001734:	58020400 	.word	0x58020400
 8001738:	58020800 	.word	0x58020800
 800173c:	58020c00 	.word	0x58020c00
 8001740:	58021000 	.word	0x58021000
 8001744:	58021400 	.word	0x58021400
 8001748:	58021800 	.word	0x58021800
 800174c:	58021c00 	.word	0x58021c00
 8001750:	58022000 	.word	0x58022000
 8001754:	58022400 	.word	0x58022400
 8001758:	2300      	movs	r3, #0
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176a:	4938      	ldr	r1, [pc, #224]	@ (800184c <HAL_GPIO_Init+0x35c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f ae63 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3724      	adds	r7, #36	@ 0x24
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800188c:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_HSEM_FastTake+0x2c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3320      	adds	r3, #32
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_HSEM_FastTake+0x30>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	58026400 	.word	0x58026400
 80018b4:	80000300 	.word	0x80000300

080018b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018c2:	4906      	ldr	r1, [pc, #24]	@ (80018dc <HAL_HSEM_Release+0x24>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	58026400 	.word	0x58026400

080018e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d00a      	beq.n	800190a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e040      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e03e      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001912:	491f      	ldr	r1, [pc, #124]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800191a:	f7ff fcc9 	bl	80012b0 <HAL_GetTick>
 800191e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001920:	e009      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001922:	f7ff fcc5 	bl	80012b0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001930:	d901      	bls.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e028      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001942:	d1ee      	bne.n	8001922 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b1e      	cmp	r3, #30
 8001948:	d008      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b2e      	cmp	r3, #46	@ 0x2e
 800194e:	d005      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b1d      	cmp	r3, #29
 8001954:	d002      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b2d      	cmp	r3, #45	@ 0x2d
 800195a:	d114      	bne.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800195c:	f7ff fca8 	bl	80012b0 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001962:	e009      	b.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001964:	f7ff fca4 	bl	80012b0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e007      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001984:	d1ee      	bne.n	8001964 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58024800 	.word	0x58024800

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f000 bc48 	b.w	8002238 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8088 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4b99      	ldr	r3, [pc, #612]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019c0:	4b96      	ldr	r3, [pc, #600]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d007      	beq.n	80019dc <HAL_RCC_OscConfig+0x48>
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	2b18      	cmp	r3, #24
 80019d0:	d111      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d06d      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x130>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d169      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f000 bc21 	b.w	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a>
 8001a00:	4b86      	ldr	r3, [pc, #536]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a85      	ldr	r2, [pc, #532]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x9c>
 8001a16:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a80      	ldr	r2, [pc, #512]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b7e      	ldr	r3, [pc, #504]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7d      	ldr	r2, [pc, #500]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a3a:	4b78      	ldr	r3, [pc, #480]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a74      	ldr	r2, [pc, #464]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a54:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a70      	ldr	r2, [pc, #448]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6d      	ldr	r2, [pc, #436]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc1c 	bl	80012b0 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fc18 	bl	80012b0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e3d4      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc08 	bl	80012b0 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fc04 	bl	80012b0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e3c0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab6:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x110>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80ca 	beq.w	8001c68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad4:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ade:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_RCC_OscConfig+0x166>
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b18      	cmp	r3, #24
 8001aee:	d156      	bne.n	8001b9e <HAL_RCC_OscConfig+0x20a>
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d151      	bne.n	8001b9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afa:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e392      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0219 	bic.w	r2, r3, #25
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	493f      	ldr	r1, [pc, #252]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbc4 	bl	80012b0 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fbc0 	bl	80012b0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e37c      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	f7ff fbe1 	bl	8001310 <HAL_GetREVID>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d817      	bhi.n	8001b88 <HAL_RCC_OscConfig+0x1f4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b40      	cmp	r3, #64	@ 0x40
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1de>
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b68:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	e07a      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	031b      	lsls	r3, r3, #12
 8001b80:	4926      	ldr	r1, [pc, #152]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b86:	e06f      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4921      	ldr	r1, [pc, #132]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e064      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d047      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0219 	bic.w	r2, r3, #25
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	491a      	ldr	r1, [pc, #104]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fb7a 	bl	80012b0 <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb76 	bl	80012b0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e332      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	f7ff fb97 	bl	8001310 <HAL_GetREVID>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d819      	bhi.n	8001c20 <HAL_RCC_OscConfig+0x28c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b40      	cmp	r3, #64	@ 0x40
 8001bf2:	d108      	bne.n	8001c06 <HAL_RCC_OscConfig+0x272>
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	e030      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	031b      	lsls	r3, r3, #12
 8001c14:	4901      	ldr	r1, [pc, #4]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
 8001c1a:	e025      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	4b9a      	ldr	r3, [pc, #616]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4997      	ldr	r1, [pc, #604]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b95      	ldr	r3, [pc, #596]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a94      	ldr	r2, [pc, #592]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb35 	bl	80012b0 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fb31 	bl	80012b0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e2ed      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c5c:	4b8b      	ldr	r3, [pc, #556]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a9 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c80:	4b82      	ldr	r3, [pc, #520]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_OscConfig+0x308>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b18      	cmp	r3, #24
 8001c90:	d13a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x374>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d135      	bne.n	8001d08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x320>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b80      	cmp	r3, #128	@ 0x80
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e2c1      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb4:	f7ff fb2c 	bl	8001310 <HAL_GetREVID>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d817      	bhi.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d108      	bne.n	8001cdc <HAL_RCC_OscConfig+0x348>
 8001cca:	4b70      	ldr	r3, [pc, #448]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cda:	e075      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	069b      	lsls	r3, r3, #26
 8001cea:	4968      	ldr	r1, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cf0:	e06a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf2:	4b66      	ldr	r3, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	4962      	ldr	r1, [pc, #392]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d06:	e05f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d042      	beq.n	8001d96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d10:	4b5e      	ldr	r3, [pc, #376]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fac8 	bl	80012b0 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d24:	f7ff fac4 	bl	80012b0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e280      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d36:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d42:	f7ff fae5 	bl	8001310 <HAL_GetREVID>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d817      	bhi.n	8001d80 <HAL_RCC_OscConfig+0x3ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d108      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3d6>
 8001d58:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d60:	4a4a      	ldr	r2, [pc, #296]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d66:	6053      	str	r3, [r2, #4]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
 8001d6a:	4b48      	ldr	r3, [pc, #288]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	4944      	ldr	r1, [pc, #272]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	e023      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
 8001d80:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	493f      	ldr	r1, [pc, #252]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e018      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff fa85 	bl	80012b0 <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001daa:	f7ff fa81 	bl	80012b0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e23d      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d036      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d019      	beq.n	8001e10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa62 	bl	80012b0 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fa5e 	bl	80012b0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e21a      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x45c>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e14:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa48 	bl	80012b0 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa44 	bl	80012b0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e200      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d039      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fa25 	bl	80012b0 <HAL_GetTick>
 8001e66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff fa21 	bl	80012b0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1dd      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
 8001e88:	e01b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x52e>
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e90:	4b9b      	ldr	r3, [pc, #620]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a9a      	ldr	r2, [pc, #616]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa08 	bl	80012b0 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea4:	f7ff fa04 	bl	80012b0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1c0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eb6:	4b92      	ldr	r3, [pc, #584]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8081 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a8b      	ldr	r2, [pc, #556]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001edc:	f7ff f9e8 	bl	80012b0 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7ff f9e4 	bl	80012b0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1a0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef6:	4b83      	ldr	r3, [pc, #524]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x584>
 8001f0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f16:	e02d      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5a6>
 8001f20:	4b77      	ldr	r3, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a76      	ldr	r2, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2c:	4b74      	ldr	r3, [pc, #464]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a73      	ldr	r2, [pc, #460]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c8>
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a6b      	ldr	r2, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b65      	ldr	r3, [pc, #404]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a64      	ldr	r2, [pc, #400]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f998 	bl	80012b0 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f994 	bl	80012b0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e14e      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9a:	4b59      	ldr	r3, [pc, #356]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCC_OscConfig+0x5f0>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f982 	bl	80012b0 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f97e 	bl	80012b0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e138      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 812d 	beq.w	8002236 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fdc:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fe4:	2b18      	cmp	r3, #24
 8001fe6:	f000 80bd 	beq.w	8002164 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 809e 	bne.w	8002130 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a41      	ldr	r2, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f956 	bl	80012b0 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f952 	bl	80012b0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e10e      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800201a:	4b39      	ldr	r3, [pc, #228]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002026:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202a:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_RCC_OscConfig+0x774>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	430a      	orrs	r2, r1
 800203a:	4931      	ldr	r1, [pc, #196]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	3b01      	subs	r3, #1
 8002046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	3b01      	subs	r3, #1
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	b29b      	uxth	r3, r3
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205a:	3b01      	subs	r3, #1
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	3b01      	subs	r3, #1
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002070:	4923      	ldr	r1, [pc, #140]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x778>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800208e:	00d2      	lsls	r2, r2, #3
 8002090:	491b      	ldr	r1, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f023 020c 	bic.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4917      	ldr	r1, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f023 0202 	bic.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	4912      	ldr	r1, [pc, #72]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff f8db 	bl	80012b0 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fc:	e011      	b.n	8002122 <HAL_RCC_OscConfig+0x78e>
 80020fe:	bf00      	nop
 8002100:	58024400 	.word	0x58024400
 8002104:	58024800 	.word	0x58024800
 8002108:	fffffc0c 	.word	0xfffffc0c
 800210c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f8ce 	bl	80012b0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e08a      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x77c>
 800212e:	e082      	b.n	8002236 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f8b8 	bl	80012b0 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f8b4 	bl	80012b0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e070      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002156:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x7b0>
 8002162:	e068      	b.n	8002236 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002164:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800216a:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	2b01      	cmp	r3, #1
 8002176:	d031      	beq.n	80021dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d12a      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d122      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0a5b      	lsrs	r3, r3, #9
 80021aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d108      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0e1b      	lsrs	r3, r3, #24
 80021ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e02b      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d01f      	beq.n	8002236 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021f6:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002202:	f7ff f855 	bl	80012b0 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002208:	bf00      	nop
 800220a:	f7ff f851 	bl	80012b0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	4293      	cmp	r3, r2
 8002214:	d0f9      	beq.n	800220a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_RCC_OscConfig+0x8b0>)
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002222:	00d2      	lsls	r2, r2, #3
 8002224:	4906      	ldr	r1, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002226:	4313      	orrs	r3, r2
 8002228:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3730      	adds	r7, #48	@ 0x30
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	58024400 	.word	0x58024400
 8002244:	ffff0007 	.word	0xffff0007

08002248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e19c      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b8a      	ldr	r3, [pc, #552]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b87      	ldr	r3, [pc, #540]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4985      	ldr	r1, [pc, #532]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e184      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d908      	bls.n	80022ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022a8:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4975      	ldr	r1, [pc, #468]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022d6:	4b6d      	ldr	r3, [pc, #436]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	496a      	ldr	r1, [pc, #424]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	4b64      	ldr	r3, [pc, #400]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002300:	429a      	cmp	r2, r3
 8002302:	d908      	bls.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	495e      	ldr	r1, [pc, #376]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800232e:	429a      	cmp	r2, r3
 8002330:	d908      	bls.n	8002344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002332:	4b56      	ldr	r3, [pc, #344]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4953      	ldr	r1, [pc, #332]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	429a      	cmp	r2, r3
 800235e:	d908      	bls.n	8002372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b4a      	ldr	r3, [pc, #296]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f023 020f 	bic.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4947      	ldr	r1, [pc, #284]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800236e:	4313      	orrs	r3, r2
 8002370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d055      	beq.n	800242a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800237e:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4940      	ldr	r1, [pc, #256]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800238c:	4313      	orrs	r3, r2
 800238e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002398:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0f6      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d115      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0ea      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023c8:	4b30      	ldr	r3, [pc, #192]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0de      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d8:	4b2c      	ldr	r3, [pc, #176]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d6      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e8:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4925      	ldr	r1, [pc, #148]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7fe ff59 	bl	80012b0 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	e00a      	b.n	8002418 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe ff55 	bl	80012b0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0be      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	429a      	cmp	r2, r3
 8002428:	d1eb      	bne.n	8002402 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b14      	ldr	r3, [pc, #80]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	429a      	cmp	r2, r3
 8002444:	d208      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	490e      	ldr	r1, [pc, #56]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002454:	4313      	orrs	r3, r2
 8002456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d214      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4906      	ldr	r1, [pc, #24]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e086      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
 8002488:	52002000 	.word	0x52002000
 800248c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d208      	bcs.n	80024be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024ac:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d208      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	492e      	ldr	r1, [pc, #184]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4922      	ldr	r1, [pc, #136]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002516:	4313      	orrs	r3, r2
 8002518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002532:	429a      	cmp	r2, r3
 8002534:	d208      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4917      	ldr	r1, [pc, #92]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002544:	4313      	orrs	r3, r2
 8002546:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002548:	f000 f834 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	4912      	ldr	r1, [pc, #72]	@ (80025a4 <HAL_RCC_ClockConfig+0x35c>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <HAL_RCC_ClockConfig+0x35c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x360>)
 800257e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002580:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x364>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x368>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fe46 	bl	800121c <HAL_InitTick>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	58024400 	.word	0x58024400
 80025a4:	08006508 	.word	0x08006508
 80025a8:	24000004 	.word	0x24000004
 80025ac:	24000000 	.word	0x24000000
 80025b0:	24000008 	.word	0x24000008

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4bb3      	ldr	r3, [pc, #716]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c2:	2b18      	cmp	r3, #24
 80025c4:	f200 8155 	bhi.w	8002872 <HAL_RCC_GetSysClockFreq+0x2be>
 80025c8:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	08002635 	.word	0x08002635
 80025d4:	08002873 	.word	0x08002873
 80025d8:	08002873 	.word	0x08002873
 80025dc:	08002873 	.word	0x08002873
 80025e0:	08002873 	.word	0x08002873
 80025e4:	08002873 	.word	0x08002873
 80025e8:	08002873 	.word	0x08002873
 80025ec:	08002873 	.word	0x08002873
 80025f0:	0800265b 	.word	0x0800265b
 80025f4:	08002873 	.word	0x08002873
 80025f8:	08002873 	.word	0x08002873
 80025fc:	08002873 	.word	0x08002873
 8002600:	08002873 	.word	0x08002873
 8002604:	08002873 	.word	0x08002873
 8002608:	08002873 	.word	0x08002873
 800260c:	08002873 	.word	0x08002873
 8002610:	08002661 	.word	0x08002661
 8002614:	08002873 	.word	0x08002873
 8002618:	08002873 	.word	0x08002873
 800261c:	08002873 	.word	0x08002873
 8002620:	08002873 	.word	0x08002873
 8002624:	08002873 	.word	0x08002873
 8002628:	08002873 	.word	0x08002873
 800262c:	08002873 	.word	0x08002873
 8002630:	08002667 	.word	0x08002667
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002634:	4b94      	ldr	r3, [pc, #592]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	4a90      	ldr	r2, [pc, #576]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002652:	e111      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002654:	4b8d      	ldr	r3, [pc, #564]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002656:	61bb      	str	r3, [r7, #24]
      break;
 8002658:	e10e      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800265a:	4b8d      	ldr	r3, [pc, #564]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800265c:	61bb      	str	r3, [r7, #24]
      break;
 800265e:	e10b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002660:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002662:	61bb      	str	r3, [r7, #24]
      break;
 8002664:	e108      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002666:	4b88      	ldr	r3, [pc, #544]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002670:	4b85      	ldr	r3, [pc, #532]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800267a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800267c:	4b82      	ldr	r3, [pc, #520]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002686:	4b80      	ldr	r3, [pc, #512]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80e1 	beq.w	800286c <HAL_RCC_GetSysClockFreq+0x2b8>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f000 8083 	beq.w	80027b8 <HAL_RCC_GetSysClockFreq+0x204>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f200 80a1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x248>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x114>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d056      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026c6:	e099      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	4a6b      	ldr	r2, [pc, #428]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fe:	4b62      	ldr	r3, [pc, #392]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002712:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800271a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800271e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800272e:	e087      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800289c <HAL_RCC_GetSysClockFreq+0x2e8>
 800273e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002742:	4b51      	ldr	r3, [pc, #324]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002752:	ed97 6a02 	vldr	s12, [r7, #8]
 8002756:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800275a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002772:	e065      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	ed97 6a02 	vldr	s12, [r7, #8]
 800279a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800279e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027b6:	e043      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027fa:	e021      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800283e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	0a5b      	lsrs	r3, r3, #9
 8002846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800284a:	3301      	adds	r3, #1
 800284c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002858:	edd7 6a07 	vldr	s13, [r7, #28]
 800285c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002864:	ee17 3a90 	vmov	r3, s15
 8002868:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002874:	61bb      	str	r3, [r7, #24]
      break;
 8002876:	bf00      	nop
  }

  return sysclockfreq;
 8002878:	69bb      	ldr	r3, [r7, #24]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
 800288c:	03d09000 	.word	0x03d09000
 8002890:	003d0900 	.word	0x003d0900
 8002894:	007a1200 	.word	0x007a1200
 8002898:	46000000 	.word	0x46000000
 800289c:	4c742400 	.word	0x4c742400
 80028a0:	4a742400 	.word	0x4a742400
 80028a4:	4af42400 	.word	0x4af42400

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028ae:	f7ff fe81 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490f      	ldr	r1, [pc, #60]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x54>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x54>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_GetHCLKFreq+0x58>)
 80028e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e6:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58024400 	.word	0x58024400
 80028fc:	08006508 	.word	0x08006508
 8002900:	24000004 	.word	0x24000004
 8002904:	24000000 	.word	0x24000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800290c:	f7ff ffcc 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4904      	ldr	r1, [pc, #16]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400
 8002930:	08006508 	.word	0x08006508

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002938:	f7ff ffb6 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4904      	ldr	r1, [pc, #16]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x28>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08006508 	.word	0x08006508

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002964:	b0ca      	sub	sp, #296	@ 0x128
 8002966:	af00      	add	r7, sp, #0
 8002968:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002984:	2500      	movs	r5, #0
 8002986:	ea54 0305 	orrs.w	r3, r4, r5
 800298a:	d049      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002996:	d02f      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800299c:	d828      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800299e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a2:	d01a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a8:	d822      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b2:	d007      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029b4:	e01c      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b6:	4bb8      	ldr	r3, [pc, #736]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	4ab7      	ldr	r2, [pc, #732]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029c2:	e01a      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c8:	3308      	adds	r3, #8
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fc8f 	bl	80042f0 <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029d8:	e00f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029de:	3328      	adds	r3, #40	@ 0x28
 80029e0:	2102      	movs	r1, #2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fd36 	bl	8004454 <RCCEx_PLL3_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ee:	e004      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a02:	4ba5      	ldr	r3, [pc, #660]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a10:	4aa1      	ldr	r2, [pc, #644]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a16:	e003      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a2c:	f04f 0900 	mov.w	r9, #0
 8002a30:	ea58 0309 	orrs.w	r3, r8, r9
 8002a34:	d047      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d82a      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a5d 	.word	0x08002a5d
 8002a4c:	08002a6b 	.word	0x08002a6b
 8002a50:	08002a81 	.word	0x08002a81
 8002a54:	08002a9f 	.word	0x08002a9f
 8002a58:	08002a9f 	.word	0x08002a9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	4a8d      	ldr	r2, [pc, #564]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a68:	e01a      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6e:	3308      	adds	r3, #8
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fc3c 	bl	80042f0 <RCCEx_PLL2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a7e:	e00f      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	3328      	adds	r3, #40	@ 0x28
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 fce3 	bl	8004454 <RCCEx_PLL3_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a94:	e004      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	f023 0107 	bic.w	r1, r3, #7
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	4a78      	ldr	r2, [pc, #480]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002ad2:	f04f 0b00 	mov.w	fp, #0
 8002ad6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ada:	d04c      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae6:	d030      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aec:	d829      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002af0:	d02d      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002af4:	d825      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002af6:	2b80      	cmp	r3, #128	@ 0x80
 8002af8:	d018      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002afa:	2b80      	cmp	r3, #128	@ 0x80
 8002afc:	d821      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b02:	2b40      	cmp	r3, #64	@ 0x40
 8002b04:	d007      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b06:	e01c      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b08:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	4a62      	ldr	r2, [pc, #392]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b14:	e01c      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 fbe6 	bl	80042f0 <RCCEx_PLL2_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b2a:	e011      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b30:	3328      	adds	r3, #40	@ 0x28
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fc8d 	bl	8004454 <RCCEx_PLL3_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b40:	e006      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b58:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	4a4c      	ldr	r2, [pc, #304]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b90:	460b      	mov	r3, r1
 8002b92:	4313      	orrs	r3, r2
 8002b94:	d053      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ba2:	d035      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ba4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ba8:	d82e      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002baa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bae:	d031      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002bb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bb4:	d828      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bba:	d01a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc0:	d822      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bca:	d007      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bce:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bda:	e01c      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	3308      	adds	r3, #8
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fb83 	bl	80042f0 <RCCEx_PLL2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bf0:	e011      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf6:	3328      	adds	r3, #40	@ 0x28
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fc2a 	bl	8004454 <RCCEx_PLL3_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c06:	e006      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c34:	e003      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	d056      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c6a:	d038      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c70:	d831      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c76:	d034      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c7c:	d82b      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c82:	d01d      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c88:	d825      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c94:	e01f      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c96:	bf00      	nop
 8002c98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c9c:	4ba2      	ldr	r3, [pc, #648]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	4aa1      	ldr	r2, [pc, #644]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cae:	3308      	adds	r3, #8
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fb1c 	bl	80042f0 <RCCEx_PLL2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002cbe:	e011      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc4:	3328      	adds	r3, #40	@ 0x28
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fbc3 	bl	8004454 <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cd4:	e006      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cec:	4b8e      	ldr	r3, [pc, #568]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cfc:	4a8a      	ldr	r2, [pc, #552]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d02:	e003      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d26:	460b      	mov	r3, r1
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	d03a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	2b30      	cmp	r3, #48	@ 0x30
 8002d34:	d01f      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d36:	2b30      	cmp	r3, #48	@ 0x30
 8002d38:	d819      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d815      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d111      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4a:	4b77      	ldr	r3, [pc, #476]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	4a76      	ldr	r2, [pc, #472]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d56:	e011      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fac5 	bl	80042f0 <RCCEx_PLL2_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d6c:	e006      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d74:	e002      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d84:	4b68      	ldr	r3, [pc, #416]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	4a65      	ldr	r2, [pc, #404]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002dae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002db8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	d051      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dcc:	d035      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd2:	d82e      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dd8:	d031      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002dda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dde:	d828      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002de4:	d01a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dea:	d822      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df4:	d007      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002df6:	e01c      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e04:	e01c      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fa6e 	bl	80042f0 <RCCEx_PLL2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e1a:	e011      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e20:	3328      	adds	r3, #40	@ 0x28
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 fb15 	bl	8004454 <RCCEx_PLL3_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e30:	e006      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e48:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e56:	4a34      	ldr	r2, [pc, #208]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e5c:	e003      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e80:	460b      	mov	r3, r1
 8002e82:	4313      	orrs	r3, r2
 8002e84:	d056      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e90:	d033      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e96:	d82c      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e9c:	d02f      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ea2:	d826      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ea8:	d02b      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002eaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eae:	d820      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eb4:	d012      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eba:	d81a      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d022      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec4:	d115      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eca:	3308      	adds	r3, #8
 8002ecc:	2101      	movs	r1, #1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 fa0e 	bl	80042f0 <RCCEx_PLL2_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002eda:	e015      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	3328      	adds	r3, #40	@ 0x28
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fab5 	bl	8004454 <RCCEx_PLL3_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002efa:	bf00      	nop
 8002efc:	e004      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f1e:	4a02      	ldr	r2, [pc, #8]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d055      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f60:	d033      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f66:	d82c      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6c:	d02f      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d826      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f78:	d02b      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f7e:	d820      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f84:	d012      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f8a:	d81a      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d022      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f94:	d115      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f9a6 	bl	80042f0 <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002faa:	e015      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb0:	3328      	adds	r3, #40	@ 0x28
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 fa4d 	bl	8004454 <RCCEx_PLL3_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ff0:	4a9f      	ldr	r2, [pc, #636]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800300c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d037      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800302a:	d00e      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003030:	d816      	bhi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800303a:	d111      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4b8c      	ldr	r3, [pc, #560]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	4a8b      	ldr	r2, [pc, #556]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003048:	e00f      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	3308      	adds	r3, #8
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f94c 	bl	80042f0 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800305e:	e004      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003076:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	4a7b      	ldr	r2, [pc, #492]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003082:	430b      	orrs	r3, r1
 8003084:	6513      	str	r3, [r2, #80]	@ 0x50
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800309c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	d039      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d81c      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030fd 	.word	0x080030fd
 80030c4:	080030d1 	.word	0x080030d1
 80030c8:	080030df 	.word	0x080030df
 80030cc:	080030fd 	.word	0x080030fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d0:	4b67      	ldr	r3, [pc, #412]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	4a66      	ldr	r2, [pc, #408]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030dc:	e00f      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e2:	3308      	adds	r3, #8
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f902 	bl	80042f0 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030f2:	e004      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030fa:	e000      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80030fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003106:	4b5a      	ldr	r3, [pc, #360]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	f023 0103 	bic.w	r1, r3, #3
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003116:	430b      	orrs	r3, r1
 8003118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800311a:	e003      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800313a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800313e:	460b      	mov	r3, r1
 8003140:	4313      	orrs	r3, r2
 8003142:	f000 809f 	beq.w	8003284 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003146:	4b4b      	ldr	r3, [pc, #300]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4a      	ldr	r2, [pc, #296]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003152:	f7fe f8ad 	bl	80012b0 <HAL_GetTick>
 8003156:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315a:	e00b      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe f8a8 	bl	80012b0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	@ 0x64
 800316a:	d903      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003174:	4b3f      	ldr	r3, [pc, #252]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ed      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003184:	2b00      	cmp	r3, #0
 8003186:	d179      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003188:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800318c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003190:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003194:	4053      	eors	r3, r2
 8003196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800319e:	4b34      	ldr	r3, [pc, #208]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031aa:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d6:	d118      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f86a 	bl	80012b0 <HAL_GetTick>
 80031dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e0:	e00d      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe f865 	bl	80012b0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031ec:	1ad2      	subs	r2, r2, r3
 80031ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d903      	bls.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80031fc:	e005      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0eb      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800320a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320e:	2b00      	cmp	r3, #0
 8003210:	d129      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800321a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003222:	d10e      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003224:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003234:	091a      	lsrs	r2, r3, #4
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003238:	4013      	ands	r3, r2
 800323a:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6113      	str	r3, [r2, #16]
 8003240:	e005      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800324c:	6113      	str	r3, [r2, #16]
 800324e:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003250:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800325a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325e:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003260:	430b      	orrs	r3, r1
 8003262:	6713      	str	r3, [r2, #112]	@ 0x70
 8003264:	e00e      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800326e:	e009      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003270:	58024400 	.word	0x58024400
 8003274:	58024800 	.word	0x58024800
 8003278:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f002 0301 	and.w	r3, r2, #1
 8003290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800329a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800329e:	460b      	mov	r3, r1
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f000 8089 	beq.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ac:	2b28      	cmp	r3, #40	@ 0x28
 80032ae:	d86b      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	08003391 	.word	0x08003391
 80032bc:	08003389 	.word	0x08003389
 80032c0:	08003389 	.word	0x08003389
 80032c4:	08003389 	.word	0x08003389
 80032c8:	08003389 	.word	0x08003389
 80032cc:	08003389 	.word	0x08003389
 80032d0:	08003389 	.word	0x08003389
 80032d4:	08003389 	.word	0x08003389
 80032d8:	0800335d 	.word	0x0800335d
 80032dc:	08003389 	.word	0x08003389
 80032e0:	08003389 	.word	0x08003389
 80032e4:	08003389 	.word	0x08003389
 80032e8:	08003389 	.word	0x08003389
 80032ec:	08003389 	.word	0x08003389
 80032f0:	08003389 	.word	0x08003389
 80032f4:	08003389 	.word	0x08003389
 80032f8:	08003373 	.word	0x08003373
 80032fc:	08003389 	.word	0x08003389
 8003300:	08003389 	.word	0x08003389
 8003304:	08003389 	.word	0x08003389
 8003308:	08003389 	.word	0x08003389
 800330c:	08003389 	.word	0x08003389
 8003310:	08003389 	.word	0x08003389
 8003314:	08003389 	.word	0x08003389
 8003318:	08003391 	.word	0x08003391
 800331c:	08003389 	.word	0x08003389
 8003320:	08003389 	.word	0x08003389
 8003324:	08003389 	.word	0x08003389
 8003328:	08003389 	.word	0x08003389
 800332c:	08003389 	.word	0x08003389
 8003330:	08003389 	.word	0x08003389
 8003334:	08003389 	.word	0x08003389
 8003338:	08003391 	.word	0x08003391
 800333c:	08003389 	.word	0x08003389
 8003340:	08003389 	.word	0x08003389
 8003344:	08003389 	.word	0x08003389
 8003348:	08003389 	.word	0x08003389
 800334c:	08003389 	.word	0x08003389
 8003350:	08003389 	.word	0x08003389
 8003354:	08003389 	.word	0x08003389
 8003358:	08003391 	.word	0x08003391
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 ffc3 	bl	80042f0 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	3328      	adds	r3, #40	@ 0x28
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f001 f86a 	bl	8004454 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800339a:	4bbf      	ldr	r3, [pc, #764]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a8:	4abb      	ldr	r2, [pc, #748]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f002 0302 	and.w	r3, r2, #2
 80033c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d041      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d824      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	08003435 	.word	0x08003435
 80033ec:	08003401 	.word	0x08003401
 80033f0:	08003417 	.word	0x08003417
 80033f4:	08003435 	.word	0x08003435
 80033f8:	08003435 	.word	0x08003435
 80033fc:	08003435 	.word	0x08003435
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	3308      	adds	r3, #8
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 ff71 	bl	80042f0 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003414:	e00f      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341a:	3328      	adds	r3, #40	@ 0x28
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f818 	bl	8004454 <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800343e:	4b96      	ldr	r3, [pc, #600]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003442:	f023 0107 	bic.w	r1, r3, #7
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800344c:	4a92      	ldr	r2, [pc, #584]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800344e:	430b      	orrs	r3, r1
 8003450:	6553      	str	r3, [r2, #84]	@ 0x54
 8003452:	e003      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800345c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f002 0304 	and.w	r3, r2, #4
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003472:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003476:	460b      	mov	r3, r1
 8003478:	4313      	orrs	r3, r2
 800347a:	d044      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003484:	2b05      	cmp	r3, #5
 8003486:	d825      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003488:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034a9 	.word	0x080034a9
 8003498:	080034bf 	.word	0x080034bf
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034dd 	.word	0x080034dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	3308      	adds	r3, #8
 80034ae:	2101      	movs	r1, #1
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 ff1d 	bl	80042f0 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034bc:	e00f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	3328      	adds	r3, #40	@ 0x28
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 ffc4 	bl	8004454 <RCCEx_PLL3_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034d2:	e004      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f023 0107 	bic.w	r1, r3, #7
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f6:	4a68      	ldr	r2, [pc, #416]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f002 0320 	and.w	r3, r2, #32
 8003512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800351c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d055      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003532:	d033      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003538:	d82c      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353e:	d02f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003544:	d826      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800354a:	d02b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800354c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003550:	d820      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003556:	d012      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800355c:	d81a      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d022      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003566:	d115      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3308      	adds	r3, #8
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f000 febd 	bl	80042f0 <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800357c:	e015      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3328      	adds	r3, #40	@ 0x28
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 ff64 	bl	8004454 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003592:	e00a      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359a:	e006      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800359c:	bf00      	nop
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b2:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	4a35      	ldr	r2, [pc, #212]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d058      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035fe:	d033      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003600:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003604:	d82c      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360a:	d02f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003610:	d826      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003616:	d02b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800361c:	d820      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800361e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003622:	d012      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003628:	d81a      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d022      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d115      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	3308      	adds	r3, #8
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fe57 	bl	80042f0 <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003648:	e015      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fefe 	bl	8004454 <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800365e:	e00a      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003666:	e006      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003668:	bf00      	nop
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10e      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800368e:	4a02      	ldr	r2, [pc, #8]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6593      	str	r3, [r2, #88]	@ 0x58
 8003694:	e006      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003696:	bf00      	nop
 8003698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d055      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036d0:	d033      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036d6:	d82c      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036dc:	d02f      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e2:	d826      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036e8:	d02b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036ee:	d820      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f4:	d012      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80036f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fa:	d81a      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d022      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003704:	d115      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	3308      	adds	r3, #8
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fdee 	bl	80042f0 <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800371a:	e015      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	3328      	adds	r3, #40	@ 0x28
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fe95 	bl	8004454 <RCCEx_PLL3_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003730:	e00a      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003738:	e006      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800373a:	bf00      	nop
 800373c:	e004      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003750:	4ba1      	ldr	r3, [pc, #644]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003760:	4a9d      	ldr	r2, [pc, #628]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003762:	430b      	orrs	r3, r1
 8003764:	6593      	str	r3, [r2, #88]	@ 0x58
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f002 0308 	and.w	r3, r2, #8
 800377c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003786:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d01e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	3328      	adds	r3, #40	@ 0x28
 80037a4:	2102      	movs	r1, #2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fe54 	bl	8004454 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037b8:	4b87      	ldr	r3, [pc, #540]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c8:	4a83      	ldr	r2, [pc, #524]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f002 0310 	and.w	r3, r2, #16
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d01e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fa:	d10c      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	3328      	adds	r3, #40	@ 0x28
 8003802:	2102      	movs	r1, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fe25 	bl	8004454 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003816:	4b70      	ldr	r3, [pc, #448]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003826:	4a6c      	ldr	r2, [pc, #432]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003842:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d03e      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003858:	d022      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800385a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800385e:	d81b      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003868:	d00b      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800386a:	e015      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	3308      	adds	r3, #8
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fd3b 	bl	80042f0 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003880:	e00f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	3328      	adds	r3, #40	@ 0x28
 8003888:	2102      	movs	r1, #2
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fde2 	bl	8004454 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038aa:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038ba:	4a47      	ldr	r2, [pc, #284]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c0:	e003      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80038d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d8:	2300      	movs	r3, #0
 80038da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d03b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038f2:	d01f      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80038f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038f8:	d818      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80038fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038fe:	d003      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003900:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003904:	d007      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003906:	e011      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003908:	4b33      	ldr	r3, [pc, #204]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	4a32      	ldr	r2, [pc, #200]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003914:	e00f      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	3328      	adds	r3, #40	@ 0x28
 800391c:	2101      	movs	r1, #1
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fd98 	bl	8004454 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800393e:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	4a22      	ldr	r2, [pc, #136]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6553      	str	r3, [r2, #84]	@ 0x54
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800396a:	673b      	str	r3, [r7, #112]	@ 0x70
 800396c:	2300      	movs	r3, #0
 800396e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003970:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d034      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003988:	d007      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	4a11      	ldr	r2, [pc, #68]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003998:	e00e      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	3308      	adds	r3, #8
 80039a0:	2102      	movs	r1, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fca4 	bl	80042f0 <RCCEx_PLL2_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039d4:	e006      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80039d6:	bf00      	nop
 80039d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80039f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f2:	2300      	movs	r3, #0
 80039f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d00c      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	3328      	adds	r3, #40	@ 0x28
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fd23 	bl	8004454 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a28:	2300      	movs	r3, #0
 8003a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d038      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a42:	d018      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a48:	d811      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a4e:	d014      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a54:	d80b      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a60:	4bc3      	ldr	r3, [pc, #780]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	4ac2      	ldr	r2, [pc, #776]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a6c:	e008      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a88:	4bb9      	ldr	r3, [pc, #740]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a98:	4ab5      	ldr	r2, [pc, #724]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac4:	4baa      	ldr	r3, [pc, #680]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad2:	4aa7      	ldr	r2, [pc, #668]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003af4:	4b9e      	ldr	r3, [pc, #632]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b04:	4a9a      	ldr	r2, [pc, #616]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b18:	2300      	movs	r3, #0
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d009      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b26:	4b92      	ldr	r3, [pc, #584]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b34:	4a8e      	ldr	r2, [pc, #568]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b48:	2300      	movs	r3, #0
 8003b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b56:	4b86      	ldr	r3, [pc, #536]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	4a85      	ldr	r2, [pc, #532]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b60:	6113      	str	r3, [r2, #16]
 8003b62:	4b83      	ldr	r3, [pc, #524]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b64:	6919      	ldr	r1, [r3, #16]
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b6e:	4a80      	ldr	r2, [pc, #512]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b82:	2300      	movs	r3, #0
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b90:	4b77      	ldr	r3, [pc, #476]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	4a74      	ldr	r2, [pc, #464]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd0:	4a67      	ldr	r2, [pc, #412]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	2100      	movs	r1, #0
 8003be0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb78 	bl	80042f0 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6239      	str	r1, [r7, #32]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d011      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3308      	adds	r3, #8
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb58 	bl	80042f0 <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	61b9      	str	r1, [r7, #24]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	d011      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3308      	adds	r3, #8
 8003c78:	2102      	movs	r1, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fb38 	bl	80042f0 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6139      	str	r1, [r7, #16]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cac:	460b      	mov	r3, r1
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fbca 	bl	8004454 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cec:	460b      	mov	r3, r1
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	d011      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	3328      	adds	r3, #40	@ 0x28
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fbaa 	bl	8004454 <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	3328      	adds	r3, #40	@ 0x28
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb8a 	bl	8004454 <RCCEx_PLL3_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003d56:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d70:	58024400 	.word	0x58024400

08003d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d78:	f7fe fd96 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4904      	ldr	r1, [pc, #16]	@ (8003d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	08006508 	.word	0x08006508

08003da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	@ 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003da8:	4ba1      	ldr	r3, [pc, #644]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003db2:	4b9f      	ldr	r3, [pc, #636]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	0b1b      	lsrs	r3, r3, #12
 8003db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003dca:	4b99      	ldr	r3, [pc, #612]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8111 	beq.w	8004010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f000 8083 	beq.w	8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f200 80a1 	bhi.w	8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d056      	beq.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e0a:	e099      	b.n	8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e0c:	4b88      	ldr	r3, [pc, #544]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02d      	beq.n	8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e18:	4b85      	ldr	r3, [pc, #532]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	4a84      	ldr	r2, [pc, #528]	@ (8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b7b      	ldr	r3, [pc, #492]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e72:	e087      	b.n	8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800403c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b6a      	ldr	r3, [pc, #424]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	e065      	b.n	8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ede:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efa:	e043      	b.n	8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3e:	e021      	b.n	8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f52:	4b37      	ldr	r3, [pc, #220]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f84:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003faa:	ee17 2a90 	vmov	r2, s15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	ee17 2a90 	vmov	r2, s15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fe0:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004006:	ee17 2a90 	vmov	r2, s15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
}
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	@ 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
 8004034:	03d09000 	.word	0x03d09000
 8004038:	46000000 	.word	0x46000000
 800403c:	4c742400 	.word	0x4c742400
 8004040:	4a742400 	.word	0x4a742400
 8004044:	4af42400 	.word	0x4af42400

08004048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	@ 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004050:	4ba1      	ldr	r3, [pc, #644]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800405a:	4b9f      	ldr	r3, [pc, #636]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	0d1b      	lsrs	r3, r3, #20
 8004060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004066:	4b9c      	ldr	r3, [pc, #624]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004072:	4b99      	ldr	r3, [pc, #612]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8111 	beq.w	80042b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b02      	cmp	r3, #2
 800409a:	f000 8083 	beq.w	80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	f200 80a1 	bhi.w	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d056      	beq.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80040b2:	e099      	b.n	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b4:	4b88      	ldr	r3, [pc, #544]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02d      	beq.n	800411c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c0:	4b85      	ldr	r3, [pc, #532]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	4a84      	ldr	r2, [pc, #528]	@ (80042dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b7b      	ldr	r3, [pc, #492]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800411a:	e087      	b.n	800422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	4b6a      	ldr	r3, [pc, #424]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004142:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415e:	e065      	b.n	800422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	4b59      	ldr	r3, [pc, #356]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004182:	ed97 6a03 	vldr	s12, [r7, #12]
 8004186:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a2:	e043      	b.n	800422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80041b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b6:	4b48      	ldr	r3, [pc, #288]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041e6:	e021      	b.n	800422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fa:	4b37      	ldr	r3, [pc, #220]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420a:	ed97 6a03 	vldr	s12, [r7, #12]
 800420e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800422c:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	0a5b      	lsrs	r3, r3, #9
 8004232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004246:	edd7 6a07 	vldr	s13, [r7, #28]
 800424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004252:	ee17 2a90 	vmov	r2, s15
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800425a:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004274:	edd7 6a07 	vldr	s13, [r7, #28]
 8004278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004280:	ee17 2a90 	vmov	r2, s15
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800429e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ae:	ee17 2a90 	vmov	r2, s15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80042b6:	e008      	b.n	80042ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
}
 80042ca:	bf00      	nop
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	03d09000 	.word	0x03d09000
 80042e0:	46000000 	.word	0x46000000
 80042e4:	4c742400 	.word	0x4c742400
 80042e8:	4a742400 	.word	0x4a742400
 80042ec:	4af42400 	.word	0x4af42400

080042f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042fe:	4b53      	ldr	r3, [pc, #332]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b03      	cmp	r3, #3
 8004308:	d101      	bne.n	800430e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e099      	b.n	8004442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800430e:	4b4f      	ldr	r3, [pc, #316]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4e      	ldr	r2, [pc, #312]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004314:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431a:	f7fc ffc9 	bl	80012b0 <HAL_GetTick>
 800431e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004320:	e008      	b.n	8004334 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004322:	f7fc ffc5 	bl	80012b0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e086      	b.n	8004442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004334:	4b45      	ldr	r3, [pc, #276]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004340:	4b42      	ldr	r3, [pc, #264]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	493f      	ldr	r1, [pc, #252]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	628b      	str	r3, [r1, #40]	@ 0x28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	3b01      	subs	r3, #1
 800435a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	3b01      	subs	r3, #1
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	b29b      	uxth	r3, r3
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	3b01      	subs	r3, #1
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004384:	4931      	ldr	r1, [pc, #196]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800438a:	4b30      	ldr	r3, [pc, #192]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	492d      	ldr	r1, [pc, #180]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	f023 0220 	bic.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4928      	ldr	r1, [pc, #160]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043ae:	4b27      	ldr	r3, [pc, #156]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	4a26      	ldr	r2, [pc, #152]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043b4:	f023 0310 	bic.w	r3, r3, #16
 80043b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043be:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <RCCEx_PLL2_Config+0x160>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	69d2      	ldr	r2, [r2, #28]
 80043c6:	00d2      	lsls	r2, r2, #3
 80043c8:	4920      	ldr	r1, [pc, #128]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043ce:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043d4:	f043 0310 	orr.w	r3, r3, #16
 80043d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043e0:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	4a19      	ldr	r2, [pc, #100]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043ec:	e00f      	b.n	800440e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043f4:	4b15      	ldr	r3, [pc, #84]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	4a14      	ldr	r2, [pc, #80]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 80043fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004400:	e005      	b.n	800440e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	4a11      	ldr	r2, [pc, #68]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004408:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800440c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0e      	ldr	r2, [pc, #56]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004414:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fc ff49 	bl	80012b0 <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004420:	e008      	b.n	8004434 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004422:	f7fc ff45 	bl	80012b0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <RCCEx_PLL2_Config+0x15c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
 8004450:	ffff0007 	.word	0xffff0007

08004454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004462:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b03      	cmp	r3, #3
 800446c:	d101      	bne.n	8004472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e099      	b.n	80045a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004472:	4b4f      	ldr	r3, [pc, #316]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4e      	ldr	r2, [pc, #312]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fc ff17 	bl	80012b0 <HAL_GetTick>
 8004482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004484:	e008      	b.n	8004498 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004486:	f7fc ff13 	bl	80012b0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e086      	b.n	80045a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004498:	4b45      	ldr	r3, [pc, #276]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044a4:	4b42      	ldr	r3, [pc, #264]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	051b      	lsls	r3, r3, #20
 80044b2:	493f      	ldr	r1, [pc, #252]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	3b01      	subs	r3, #1
 80044be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	025b      	lsls	r3, r3, #9
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044e8:	4931      	ldr	r1, [pc, #196]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044ee:	4b30      	ldr	r3, [pc, #192]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	492d      	ldr	r1, [pc, #180]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004500:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	4928      	ldr	r1, [pc, #160]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004512:	4b27      	ldr	r3, [pc, #156]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	4a26      	ldr	r2, [pc, #152]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800451e:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004522:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <RCCEx_PLL3_Config+0x160>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	69d2      	ldr	r2, [r2, #28]
 800452a:	00d2      	lsls	r2, r2, #3
 800452c:	4920      	ldr	r1, [pc, #128]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004532:	4b1f      	ldr	r3, [pc, #124]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800454a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800454e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004550:	e00f      	b.n	8004572 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800455e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004564:	e005      	b.n	8004572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	4a11      	ldr	r2, [pc, #68]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800456c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004570:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 8004578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457e:	f7fc fe97 	bl	80012b0 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004584:	e008      	b.n	8004598 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004586:	f7fc fe93 	bl	80012b0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <RCCEx_PLL3_Config+0x15c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
 80045b4:	ffff0007 	.word	0xffff0007

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e049      	b.n	800465e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fc7e 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fab8 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e049      	b.n	800470c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f841 	bl	8004714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fa61 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x24>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e03c      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b04      	cmp	r3, #4
 8004750:	d109      	bne.n	8004766 <HAL_TIM_PWM_Start+0x3e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e02f      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x58>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e022      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x72>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e015      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x8c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0a1      	b.n	8004912 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0xb6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047dc:	e023      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xc6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ec:	e01b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xd6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047fc:	e013      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b0c      	cmp	r3, #12
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xe6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800480c:	e00b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xf6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481c:	e003      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd18 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a38      	ldr	r2, [pc, #224]	@ (800491c <HAL_TIM_PWM_Start+0x1f4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a37      	ldr	r2, [pc, #220]	@ (8004920 <HAL_TIM_PWM_Start+0x1f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a35      	ldr	r2, [pc, #212]	@ (8004924 <HAL_TIM_PWM_Start+0x1fc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a34      	ldr	r2, [pc, #208]	@ (8004928 <HAL_TIM_PWM_Start+0x200>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a32      	ldr	r2, [pc, #200]	@ (800492c <HAL_TIM_PWM_Start+0x204>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_TIM_PWM_Start+0x142>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_TIM_PWM_Start+0x144>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800487e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <HAL_TIM_PWM_Start+0x1f4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d01d      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a25      	ldr	r2, [pc, #148]	@ (8004930 <HAL_TIM_PWM_Start+0x208>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a24      	ldr	r2, [pc, #144]	@ (8004934 <HAL_TIM_PWM_Start+0x20c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <HAL_TIM_PWM_Start+0x210>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004920 <HAL_TIM_PWM_Start+0x1f8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_TIM_PWM_Start+0x214>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x1a8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <HAL_TIM_PWM_Start+0x1fc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d115      	bne.n	80048fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <HAL_TIM_PWM_Start+0x218>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d015      	beq.n	800490e <HAL_TIM_PWM_Start+0x1e6>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e8:	d011      	beq.n	800490e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	e008      	b.n	800490e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e000      	b.n	8004910 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40001800 	.word	0x40001800
 8004940:	00010007 	.word	0x00010007

08004944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800495e:	2302      	movs	r3, #2
 8004960:	e0ff      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b14      	cmp	r3, #20
 800496e:	f200 80f0 	bhi.w	8004b52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004972:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004b53 	.word	0x08004b53
 8004980:	08004b53 	.word	0x08004b53
 8004984:	08004b53 	.word	0x08004b53
 8004988:	08004a0d 	.word	0x08004a0d
 800498c:	08004b53 	.word	0x08004b53
 8004990:	08004b53 	.word	0x08004b53
 8004994:	08004b53 	.word	0x08004b53
 8004998:	08004a4f 	.word	0x08004a4f
 800499c:	08004b53 	.word	0x08004b53
 80049a0:	08004b53 	.word	0x08004b53
 80049a4:	08004b53 	.word	0x08004b53
 80049a8:	08004a8f 	.word	0x08004a8f
 80049ac:	08004b53 	.word	0x08004b53
 80049b0:	08004b53 	.word	0x08004b53
 80049b4:	08004b53 	.word	0x08004b53
 80049b8:	08004ad1 	.word	0x08004ad1
 80049bc:	08004b53 	.word	0x08004b53
 80049c0:	08004b53 	.word	0x08004b53
 80049c4:	08004b53 	.word	0x08004b53
 80049c8:	08004b11 	.word	0x08004b11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f970 	bl	8004cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0204 	bic.w	r2, r2, #4
 80049f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6999      	ldr	r1, [r3, #24]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	619a      	str	r2, [r3, #24]
      break;
 8004a0a:	e0a5      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f9e0 	bl	8004dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]
      break;
 8004a4c:	e084      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa49 	bl	8004eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0208 	orr.w	r2, r2, #8
 8004a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69d9      	ldr	r1, [r3, #28]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	61da      	str	r2, [r3, #28]
      break;
 8004a8c:	e064      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fab1 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
      break;
 8004ace:	e043      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fafa 	bl	80050d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b0e:	e023      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fb3e 	bl	8005198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b50:	e002      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
      break;
 8004b56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop

08004b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a46      	ldr	r2, [pc, #280]	@ (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a43      	ldr	r2, [pc, #268]	@ (8004c9c <TIM_Base_SetConfig+0x130>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a42      	ldr	r2, [pc, #264]	@ (8004ca0 <TIM_Base_SetConfig+0x134>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a41      	ldr	r2, [pc, #260]	@ (8004ca4 <TIM_Base_SetConfig+0x138>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a40      	ldr	r2, [pc, #256]	@ (8004ca8 <TIM_Base_SetConfig+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a35      	ldr	r2, [pc, #212]	@ (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bcc:	d01b      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a32      	ldr	r2, [pc, #200]	@ (8004c9c <TIM_Base_SetConfig+0x130>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a31      	ldr	r2, [pc, #196]	@ (8004ca0 <TIM_Base_SetConfig+0x134>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a30      	ldr	r2, [pc, #192]	@ (8004ca4 <TIM_Base_SetConfig+0x138>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca8 <TIM_Base_SetConfig+0x13c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8004cac <TIM_Base_SetConfig+0x140>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8004cb0 <TIM_Base_SetConfig+0x144>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb4 <TIM_Base_SetConfig+0x148>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <TIM_Base_SetConfig+0x13c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	@ (8004cac <TIM_Base_SetConfig+0x140>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a16      	ldr	r2, [pc, #88]	@ (8004cb0 <TIM_Base_SetConfig+0x144>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a15      	ldr	r2, [pc, #84]	@ (8004cb4 <TIM_Base_SetConfig+0x148>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d103      	bne.n	8004c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40010400 	.word	0x40010400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800

08004cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f023 0201 	bic.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4b37      	ldr	r3, [pc, #220]	@ (8004dc0 <TIM_OC1_SetConfig+0x108>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0302 	bic.w	r3, r3, #2
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc4 <TIM_OC1_SetConfig+0x10c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC1_SetConfig+0x7c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc8 <TIM_OC1_SetConfig+0x110>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC1_SetConfig+0x7c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dcc <TIM_OC1_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC1_SetConfig+0x7c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <TIM_OC1_SetConfig+0x118>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC1_SetConfig+0x7c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a29      	ldr	r2, [pc, #164]	@ (8004dd4 <TIM_OC1_SetConfig+0x11c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10c      	bne.n	8004d4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0308 	bic.w	r3, r3, #8
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <TIM_OC1_SetConfig+0x10c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <TIM_OC1_SetConfig+0xbe>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <TIM_OC1_SetConfig+0x110>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_OC1_SetConfig+0xbe>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <TIM_OC1_SetConfig+0x114>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <TIM_OC1_SetConfig+0xbe>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <TIM_OC1_SetConfig+0x118>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_OC1_SetConfig+0xbe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <TIM_OC1_SetConfig+0x11c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d111      	bne.n	8004d9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	621a      	str	r2, [r3, #32]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	fffeff8f 	.word	0xfffeff8f
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f023 0210 	bic.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4b34      	ldr	r3, [pc, #208]	@ (8004ed4 <TIM_OC2_SetConfig+0xfc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0320 	bic.w	r3, r3, #32
 8004e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a29      	ldr	r2, [pc, #164]	@ (8004ed8 <TIM_OC2_SetConfig+0x100>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_OC2_SetConfig+0x68>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a28      	ldr	r2, [pc, #160]	@ (8004edc <TIM_OC2_SetConfig+0x104>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10d      	bne.n	8004e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <TIM_OC2_SetConfig+0x100>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00f      	beq.n	8004e84 <TIM_OC2_SetConfig+0xac>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <TIM_OC2_SetConfig+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_OC2_SetConfig+0xac>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee0 <TIM_OC2_SetConfig+0x108>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_OC2_SetConfig+0xac>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <TIM_OC2_SetConfig+0x10c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_OC2_SetConfig+0xac>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee8 <TIM_OC2_SetConfig+0x110>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d113      	bne.n	8004eac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	feff8fff 	.word	0xfeff8fff
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800

08004eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4b33      	ldr	r3, [pc, #204]	@ (8004fe4 <TIM_OC3_SetConfig+0xf8>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a28      	ldr	r2, [pc, #160]	@ (8004fe8 <TIM_OC3_SetConfig+0xfc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x66>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a27      	ldr	r2, [pc, #156]	@ (8004fec <TIM_OC3_SetConfig+0x100>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <TIM_OC3_SetConfig+0xfc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_OC3_SetConfig+0xaa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <TIM_OC3_SetConfig+0x100>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_OC3_SetConfig+0xaa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <TIM_OC3_SetConfig+0x104>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_OC3_SetConfig+0xaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff4 <TIM_OC3_SetConfig+0x108>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC3_SetConfig+0xaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <TIM_OC3_SetConfig+0x10c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d113      	bne.n	8004fbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	fffeff8f 	.word	0xfffeff8f
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4b24      	ldr	r3, [pc, #144]	@ (80050b8 <TIM_OC4_SetConfig+0xbc>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <TIM_OC4_SetConfig+0xc0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00f      	beq.n	800507c <TIM_OC4_SetConfig+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <TIM_OC4_SetConfig+0xc4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00b      	beq.n	800507c <TIM_OC4_SetConfig+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a17      	ldr	r2, [pc, #92]	@ (80050c4 <TIM_OC4_SetConfig+0xc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_OC4_SetConfig+0x80>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a16      	ldr	r2, [pc, #88]	@ (80050c8 <TIM_OC4_SetConfig+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_OC4_SetConfig+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a15      	ldr	r2, [pc, #84]	@ (80050cc <TIM_OC4_SetConfig+0xd0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d109      	bne.n	8005090 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	feff8fff 	.word	0xfeff8fff
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <TIM_OC5_SetConfig+0xb0>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a18      	ldr	r2, [pc, #96]	@ (8005184 <TIM_OC5_SetConfig+0xb4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_OC5_SetConfig+0x76>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a17      	ldr	r2, [pc, #92]	@ (8005188 <TIM_OC5_SetConfig+0xb8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_OC5_SetConfig+0x76>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <TIM_OC5_SetConfig+0xbc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_OC5_SetConfig+0x76>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <TIM_OC5_SetConfig+0xc0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC5_SetConfig+0x76>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a14      	ldr	r2, [pc, #80]	@ (8005194 <TIM_OC5_SetConfig+0xc4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d109      	bne.n	800515a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800514c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	fffeff8f 	.word	0xfffeff8f
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4b22      	ldr	r3, [pc, #136]	@ (800524c <TIM_OC6_SetConfig+0xb4>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	051b      	lsls	r3, r3, #20
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a19      	ldr	r2, [pc, #100]	@ (8005250 <TIM_OC6_SetConfig+0xb8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00f      	beq.n	8005210 <TIM_OC6_SetConfig+0x78>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a18      	ldr	r2, [pc, #96]	@ (8005254 <TIM_OC6_SetConfig+0xbc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_OC6_SetConfig+0x78>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <TIM_OC6_SetConfig+0xc0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_OC6_SetConfig+0x78>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a16      	ldr	r2, [pc, #88]	@ (800525c <TIM_OC6_SetConfig+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_OC6_SetConfig+0x78>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <TIM_OC6_SetConfig+0xc8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d109      	bne.n	8005224 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	029b      	lsls	r3, r3, #10
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	feff8fff 	.word	0xfeff8fff
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e042      	b.n	8005346 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fea2 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	@ 0x24
 80052dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fd91 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f826 	bl	8005350 <UART_SetConfig>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e01b      	b.n	8005346 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800531c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800532c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fe10 	bl	8005f64 <UART_CheckIdleState>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005354:	b092      	sub	sp, #72	@ 0x48
 8005356:	af00      	add	r7, sp, #0
 8005358:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	4313      	orrs	r3, r2
 8005376:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4bbe      	ldr	r3, [pc, #760]	@ (8005678 <UART_SetConfig+0x328>)
 8005380:	4013      	ands	r3, r2
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005388:	430b      	orrs	r3, r1
 800538a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4ab3      	ldr	r2, [pc, #716]	@ (800567c <UART_SetConfig+0x32c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b8:	4313      	orrs	r3, r2
 80053ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	4baf      	ldr	r3, [pc, #700]	@ (8005680 <UART_SetConfig+0x330>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	f023 010f 	bic.w	r1, r3, #15
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4aa6      	ldr	r2, [pc, #664]	@ (8005684 <UART_SetConfig+0x334>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d177      	bne.n	80054e0 <UART_SetConfig+0x190>
 80053f0:	4ba5      	ldr	r3, [pc, #660]	@ (8005688 <UART_SetConfig+0x338>)
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053f8:	2b28      	cmp	r3, #40	@ 0x28
 80053fa:	d86d      	bhi.n	80054d8 <UART_SetConfig+0x188>
 80053fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <UART_SetConfig+0xb4>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	080054a9 	.word	0x080054a9
 8005408:	080054d9 	.word	0x080054d9
 800540c:	080054d9 	.word	0x080054d9
 8005410:	080054d9 	.word	0x080054d9
 8005414:	080054d9 	.word	0x080054d9
 8005418:	080054d9 	.word	0x080054d9
 800541c:	080054d9 	.word	0x080054d9
 8005420:	080054d9 	.word	0x080054d9
 8005424:	080054b1 	.word	0x080054b1
 8005428:	080054d9 	.word	0x080054d9
 800542c:	080054d9 	.word	0x080054d9
 8005430:	080054d9 	.word	0x080054d9
 8005434:	080054d9 	.word	0x080054d9
 8005438:	080054d9 	.word	0x080054d9
 800543c:	080054d9 	.word	0x080054d9
 8005440:	080054d9 	.word	0x080054d9
 8005444:	080054b9 	.word	0x080054b9
 8005448:	080054d9 	.word	0x080054d9
 800544c:	080054d9 	.word	0x080054d9
 8005450:	080054d9 	.word	0x080054d9
 8005454:	080054d9 	.word	0x080054d9
 8005458:	080054d9 	.word	0x080054d9
 800545c:	080054d9 	.word	0x080054d9
 8005460:	080054d9 	.word	0x080054d9
 8005464:	080054c1 	.word	0x080054c1
 8005468:	080054d9 	.word	0x080054d9
 800546c:	080054d9 	.word	0x080054d9
 8005470:	080054d9 	.word	0x080054d9
 8005474:	080054d9 	.word	0x080054d9
 8005478:	080054d9 	.word	0x080054d9
 800547c:	080054d9 	.word	0x080054d9
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054c9 	.word	0x080054c9
 8005488:	080054d9 	.word	0x080054d9
 800548c:	080054d9 	.word	0x080054d9
 8005490:	080054d9 	.word	0x080054d9
 8005494:	080054d9 	.word	0x080054d9
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e222      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e21e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e21a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e216      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e212      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054d0:	2340      	movs	r3, #64	@ 0x40
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e20e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054d8:	2380      	movs	r3, #128	@ 0x80
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e20a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a69      	ldr	r2, [pc, #420]	@ (800568c <UART_SetConfig+0x33c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d130      	bne.n	800554c <UART_SetConfig+0x1fc>
 80054ea:	4b67      	ldr	r3, [pc, #412]	@ (8005688 <UART_SetConfig+0x338>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d826      	bhi.n	8005544 <UART_SetConfig+0x1f4>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <UART_SetConfig+0x1ac>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005515 	.word	0x08005515
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005525 	.word	0x08005525
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005535 	.word	0x08005535
 8005510:	0800553d 	.word	0x0800553d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e1ec      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e1e8      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e1e4      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e1e0      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005534:	2320      	movs	r3, #32
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e1dc      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800553c:	2340      	movs	r3, #64	@ 0x40
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e1d8      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005544:	2380      	movs	r3, #128	@ 0x80
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554a:	e1d4      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a4f      	ldr	r2, [pc, #316]	@ (8005690 <UART_SetConfig+0x340>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d130      	bne.n	80055b8 <UART_SetConfig+0x268>
 8005556:	4b4c      	ldr	r3, [pc, #304]	@ (8005688 <UART_SetConfig+0x338>)
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b05      	cmp	r3, #5
 8005560:	d826      	bhi.n	80055b0 <UART_SetConfig+0x260>
 8005562:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <UART_SetConfig+0x218>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005581 	.word	0x08005581
 800556c:	08005589 	.word	0x08005589
 8005570:	08005591 	.word	0x08005591
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005586:	e1b6      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005588:	2304      	movs	r3, #4
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558e:	e1b2      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005590:	2308      	movs	r3, #8
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e1ae      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005598:	2310      	movs	r3, #16
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e1aa      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055a0:	2320      	movs	r3, #32
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e1a6      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055a8:	2340      	movs	r3, #64	@ 0x40
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e1a2      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e19e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a35      	ldr	r2, [pc, #212]	@ (8005694 <UART_SetConfig+0x344>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d130      	bne.n	8005624 <UART_SetConfig+0x2d4>
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <UART_SetConfig+0x338>)
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d826      	bhi.n	800561c <UART_SetConfig+0x2cc>
 80055ce:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <UART_SetConfig+0x284>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055ed 	.word	0x080055ed
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	08005605 	.word	0x08005605
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e180      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e17c      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e178      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e174      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800560c:	2320      	movs	r3, #32
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e170      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005614:	2340      	movs	r3, #64	@ 0x40
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e16c      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e168      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <UART_SetConfig+0x348>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d142      	bne.n	80056b4 <UART_SetConfig+0x364>
 800562e:	4b16      	ldr	r3, [pc, #88]	@ (8005688 <UART_SetConfig+0x338>)
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b05      	cmp	r3, #5
 8005638:	d838      	bhi.n	80056ac <UART_SetConfig+0x35c>
 800563a:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <UART_SetConfig+0x2f0>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005659 	.word	0x08005659
 8005644:	08005661 	.word	0x08005661
 8005648:	08005669 	.word	0x08005669
 800564c:	08005671 	.word	0x08005671
 8005650:	0800569d 	.word	0x0800569d
 8005654:	080056a5 	.word	0x080056a5
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e14a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e146      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e142      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e13e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005678:	cfff69f3 	.word	0xcfff69f3
 800567c:	58000c00 	.word	0x58000c00
 8005680:	11fff4ff 	.word	0x11fff4ff
 8005684:	40011000 	.word	0x40011000
 8005688:	58024400 	.word	0x58024400
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	40004c00 	.word	0x40004c00
 8005698:	40005000 	.word	0x40005000
 800569c:	2320      	movs	r3, #32
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e128      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80056a4:	2340      	movs	r3, #64	@ 0x40
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e124      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e120      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4acb      	ldr	r2, [pc, #812]	@ (80059e8 <UART_SetConfig+0x698>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d176      	bne.n	80057ac <UART_SetConfig+0x45c>
 80056be:	4bcb      	ldr	r3, [pc, #812]	@ (80059ec <UART_SetConfig+0x69c>)
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056c6:	2b28      	cmp	r3, #40	@ 0x28
 80056c8:	d86c      	bhi.n	80057a4 <UART_SetConfig+0x454>
 80056ca:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <UART_SetConfig+0x380>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	08005775 	.word	0x08005775
 80056d4:	080057a5 	.word	0x080057a5
 80056d8:	080057a5 	.word	0x080057a5
 80056dc:	080057a5 	.word	0x080057a5
 80056e0:	080057a5 	.word	0x080057a5
 80056e4:	080057a5 	.word	0x080057a5
 80056e8:	080057a5 	.word	0x080057a5
 80056ec:	080057a5 	.word	0x080057a5
 80056f0:	0800577d 	.word	0x0800577d
 80056f4:	080057a5 	.word	0x080057a5
 80056f8:	080057a5 	.word	0x080057a5
 80056fc:	080057a5 	.word	0x080057a5
 8005700:	080057a5 	.word	0x080057a5
 8005704:	080057a5 	.word	0x080057a5
 8005708:	080057a5 	.word	0x080057a5
 800570c:	080057a5 	.word	0x080057a5
 8005710:	08005785 	.word	0x08005785
 8005714:	080057a5 	.word	0x080057a5
 8005718:	080057a5 	.word	0x080057a5
 800571c:	080057a5 	.word	0x080057a5
 8005720:	080057a5 	.word	0x080057a5
 8005724:	080057a5 	.word	0x080057a5
 8005728:	080057a5 	.word	0x080057a5
 800572c:	080057a5 	.word	0x080057a5
 8005730:	0800578d 	.word	0x0800578d
 8005734:	080057a5 	.word	0x080057a5
 8005738:	080057a5 	.word	0x080057a5
 800573c:	080057a5 	.word	0x080057a5
 8005740:	080057a5 	.word	0x080057a5
 8005744:	080057a5 	.word	0x080057a5
 8005748:	080057a5 	.word	0x080057a5
 800574c:	080057a5 	.word	0x080057a5
 8005750:	08005795 	.word	0x08005795
 8005754:	080057a5 	.word	0x080057a5
 8005758:	080057a5 	.word	0x080057a5
 800575c:	080057a5 	.word	0x080057a5
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057a5 	.word	0x080057a5
 8005768:	080057a5 	.word	0x080057a5
 800576c:	080057a5 	.word	0x080057a5
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e0bc      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e0b8      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e0b4      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e0b0      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e0ac      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800579c:	2340      	movs	r3, #64	@ 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e0a8      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e0a4      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a8f      	ldr	r2, [pc, #572]	@ (80059f0 <UART_SetConfig+0x6a0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d130      	bne.n	8005818 <UART_SetConfig+0x4c8>
 80057b6:	4b8d      	ldr	r3, [pc, #564]	@ (80059ec <UART_SetConfig+0x69c>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d826      	bhi.n	8005810 <UART_SetConfig+0x4c0>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x478>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e086      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ee:	e082      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e07e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e07a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e076      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005808:	2340      	movs	r3, #64	@ 0x40
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580e:	e072      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e06e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a75      	ldr	r2, [pc, #468]	@ (80059f4 <UART_SetConfig+0x6a4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d130      	bne.n	8005884 <UART_SetConfig+0x534>
 8005822:	4b72      	ldr	r3, [pc, #456]	@ (80059ec <UART_SetConfig+0x69c>)
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b05      	cmp	r3, #5
 800582c:	d826      	bhi.n	800587c <UART_SetConfig+0x52c>
 800582e:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <UART_SetConfig+0x4e4>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800584d 	.word	0x0800584d
 8005838:	08005855 	.word	0x08005855
 800583c:	0800585d 	.word	0x0800585d
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005852:	e050      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585a:	e04c      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e048      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e044      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800586c:	2320      	movs	r3, #32
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e040      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005874:	2340      	movs	r3, #64	@ 0x40
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e03c      	b.n	80058f6 <UART_SetConfig+0x5a6>
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e038      	b.n	80058f6 <UART_SetConfig+0x5a6>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5b      	ldr	r2, [pc, #364]	@ (80059f8 <UART_SetConfig+0x6a8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d130      	bne.n	80058f0 <UART_SetConfig+0x5a0>
 800588e:	4b57      	ldr	r3, [pc, #348]	@ (80059ec <UART_SetConfig+0x69c>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b05      	cmp	r3, #5
 8005898:	d826      	bhi.n	80058e8 <UART_SetConfig+0x598>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x550>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e01a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e016      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e012      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e00e      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058d8:	2320      	movs	r3, #32
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e00a      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058e0:	2340      	movs	r3, #64	@ 0x40
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e006      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e002      	b.n	80058f6 <UART_SetConfig+0x5a6>
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3f      	ldr	r2, [pc, #252]	@ (80059f8 <UART_SetConfig+0x6a8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	f040 80f8 	bne.w	8005af2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005902:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005906:	2b20      	cmp	r3, #32
 8005908:	dc46      	bgt.n	8005998 <UART_SetConfig+0x648>
 800590a:	2b02      	cmp	r3, #2
 800590c:	f2c0 8082 	blt.w	8005a14 <UART_SetConfig+0x6c4>
 8005910:	3b02      	subs	r3, #2
 8005912:	2b1e      	cmp	r3, #30
 8005914:	d87e      	bhi.n	8005a14 <UART_SetConfig+0x6c4>
 8005916:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <UART_SetConfig+0x5cc>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	0800599f 	.word	0x0800599f
 8005920:	08005a15 	.word	0x08005a15
 8005924:	080059a7 	.word	0x080059a7
 8005928:	08005a15 	.word	0x08005a15
 800592c:	08005a15 	.word	0x08005a15
 8005930:	08005a15 	.word	0x08005a15
 8005934:	080059b7 	.word	0x080059b7
 8005938:	08005a15 	.word	0x08005a15
 800593c:	08005a15 	.word	0x08005a15
 8005940:	08005a15 	.word	0x08005a15
 8005944:	08005a15 	.word	0x08005a15
 8005948:	08005a15 	.word	0x08005a15
 800594c:	08005a15 	.word	0x08005a15
 8005950:	08005a15 	.word	0x08005a15
 8005954:	080059c7 	.word	0x080059c7
 8005958:	08005a15 	.word	0x08005a15
 800595c:	08005a15 	.word	0x08005a15
 8005960:	08005a15 	.word	0x08005a15
 8005964:	08005a15 	.word	0x08005a15
 8005968:	08005a15 	.word	0x08005a15
 800596c:	08005a15 	.word	0x08005a15
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a15 	.word	0x08005a15
 8005978:	08005a15 	.word	0x08005a15
 800597c:	08005a15 	.word	0x08005a15
 8005980:	08005a15 	.word	0x08005a15
 8005984:	08005a15 	.word	0x08005a15
 8005988:	08005a15 	.word	0x08005a15
 800598c:	08005a15 	.word	0x08005a15
 8005990:	08005a15 	.word	0x08005a15
 8005994:	08005a07 	.word	0x08005a07
 8005998:	2b40      	cmp	r3, #64	@ 0x40
 800599a:	d037      	beq.n	8005a0c <UART_SetConfig+0x6bc>
 800599c:	e03a      	b.n	8005a14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800599e:	f7fe f9e9 	bl	8003d74 <HAL_RCCEx_GetD3PCLK1Freq>
 80059a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059a4:	e03c      	b.n	8005a20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe f9f8 	bl	8003da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b4:	e034      	b.n	8005a20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b6:	f107 0318 	add.w	r3, r7, #24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fb44 	bl	8004048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c4:	e02c      	b.n	8005a20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <UART_SetConfig+0x69c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <UART_SetConfig+0x69c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	4a07      	ldr	r2, [pc, #28]	@ (80059fc <UART_SetConfig+0x6ac>)
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059e4:	e01c      	b.n	8005a20 <UART_SetConfig+0x6d0>
 80059e6:	bf00      	nop
 80059e8:	40011400 	.word	0x40011400
 80059ec:	58024400 	.word	0x58024400
 80059f0:	40007800 	.word	0x40007800
 80059f4:	40007c00 	.word	0x40007c00
 80059f8:	58000c00 	.word	0x58000c00
 80059fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a00:	4b9d      	ldr	r3, [pc, #628]	@ (8005c78 <UART_SetConfig+0x928>)
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a04:	e00c      	b.n	8005a20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a06:	4b9d      	ldr	r3, [pc, #628]	@ (8005c7c <UART_SetConfig+0x92c>)
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0a:	e009      	b.n	8005a20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a12:	e005      	b.n	8005a20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 81de 	beq.w	8005de4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	4a94      	ldr	r2, [pc, #592]	@ (8005c80 <UART_SetConfig+0x930>)
 8005a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d305      	bcc.n	8005a58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a5e:	e1c1      	b.n	8005de4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a62:	2200      	movs	r2, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	60fa      	str	r2, [r7, #12]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	4a84      	ldr	r2, [pc, #528]	@ (8005c80 <UART_SetConfig+0x930>)
 8005a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a82:	f7fa fc29 	bl	80002d8 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	020b      	lsls	r3, r1, #8
 8005a98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a9c:	0202      	lsls	r2, r0, #8
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	6849      	ldr	r1, [r1, #4]
 8005aa2:	0849      	lsrs	r1, r1, #1
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	eb12 0804 	adds.w	r8, r2, r4
 8005aae:	eb43 0905 	adc.w	r9, r3, r5
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	469a      	mov	sl, r3
 8005aba:	4693      	mov	fp, r2
 8005abc:	4652      	mov	r2, sl
 8005abe:	465b      	mov	r3, fp
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fa fc08 	bl	80002d8 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad6:	d308      	bcc.n	8005aea <UART_SetConfig+0x79a>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ade:	d204      	bcs.n	8005aea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e17c      	b.n	8005de4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005af0:	e178      	b.n	8005de4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	f040 80c5 	bne.w	8005c88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005afe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	dc48      	bgt.n	8005b98 <UART_SetConfig+0x848>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db7b      	blt.n	8005c02 <UART_SetConfig+0x8b2>
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d879      	bhi.n	8005c02 <UART_SetConfig+0x8b2>
 8005b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <UART_SetConfig+0x7c4>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b9f 	.word	0x08005b9f
 8005b18:	08005ba7 	.word	0x08005ba7
 8005b1c:	08005c03 	.word	0x08005c03
 8005b20:	08005c03 	.word	0x08005c03
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005c03 	.word	0x08005c03
 8005b2c:	08005c03 	.word	0x08005c03
 8005b30:	08005c03 	.word	0x08005c03
 8005b34:	08005bbf 	.word	0x08005bbf
 8005b38:	08005c03 	.word	0x08005c03
 8005b3c:	08005c03 	.word	0x08005c03
 8005b40:	08005c03 	.word	0x08005c03
 8005b44:	08005c03 	.word	0x08005c03
 8005b48:	08005c03 	.word	0x08005c03
 8005b4c:	08005c03 	.word	0x08005c03
 8005b50:	08005c03 	.word	0x08005c03
 8005b54:	08005bcf 	.word	0x08005bcf
 8005b58:	08005c03 	.word	0x08005c03
 8005b5c:	08005c03 	.word	0x08005c03
 8005b60:	08005c03 	.word	0x08005c03
 8005b64:	08005c03 	.word	0x08005c03
 8005b68:	08005c03 	.word	0x08005c03
 8005b6c:	08005c03 	.word	0x08005c03
 8005b70:	08005c03 	.word	0x08005c03
 8005b74:	08005c03 	.word	0x08005c03
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c03 	.word	0x08005c03
 8005b80:	08005c03 	.word	0x08005c03
 8005b84:	08005c03 	.word	0x08005c03
 8005b88:	08005c03 	.word	0x08005c03
 8005b8c:	08005c03 	.word	0x08005c03
 8005b90:	08005c03 	.word	0x08005c03
 8005b94:	08005bf5 	.word	0x08005bf5
 8005b98:	2b40      	cmp	r3, #64	@ 0x40
 8005b9a:	d02e      	beq.n	8005bfa <UART_SetConfig+0x8aa>
 8005b9c:	e031      	b.n	8005c02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7fc feb3 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e033      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba6:	f7fc fec5 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8005baa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bac:	e02f      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe f8f4 	bl	8003da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bbc:	e027      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bbe:	f107 0318 	add.w	r3, r7, #24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fa40 	bl	8004048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bcc:	e01f      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bce:	4b2d      	ldr	r3, [pc, #180]	@ (8005c84 <UART_SetConfig+0x934>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bda:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <UART_SetConfig+0x934>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	08db      	lsrs	r3, r3, #3
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	4a24      	ldr	r2, [pc, #144]	@ (8005c78 <UART_SetConfig+0x928>)
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bec:	e00f      	b.n	8005c0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bee:	4b22      	ldr	r3, [pc, #136]	@ (8005c78 <UART_SetConfig+0x928>)
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf2:	e00c      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <UART_SetConfig+0x92c>)
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf8:	e009      	b.n	8005c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c00:	e005      	b.n	8005c0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80e7 	beq.w	8005de4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	4a19      	ldr	r2, [pc, #100]	@ (8005c80 <UART_SetConfig+0x930>)
 8005c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c28:	005a      	lsls	r2, r3, #1
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	441a      	add	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d916      	bls.n	8005c70 <UART_SetConfig+0x920>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d212      	bcs.n	8005c70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f023 030f 	bic.w	r3, r3, #15
 8005c52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c62:	4313      	orrs	r3, r2
 8005c64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e0b9      	b.n	8005de4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c76:	e0b5      	b.n	8005de4 <UART_SetConfig+0xa94>
 8005c78:	03d09000 	.word	0x03d09000
 8005c7c:	003d0900 	.word	0x003d0900
 8005c80:	08006518 	.word	0x08006518
 8005c84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	dc49      	bgt.n	8005d24 <UART_SetConfig+0x9d4>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db7c      	blt.n	8005d8e <UART_SetConfig+0xa3e>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d87a      	bhi.n	8005d8e <UART_SetConfig+0xa3e>
 8005c98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0x950>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d33 	.word	0x08005d33
 8005ca8:	08005d8f 	.word	0x08005d8f
 8005cac:	08005d8f 	.word	0x08005d8f
 8005cb0:	08005d3b 	.word	0x08005d3b
 8005cb4:	08005d8f 	.word	0x08005d8f
 8005cb8:	08005d8f 	.word	0x08005d8f
 8005cbc:	08005d8f 	.word	0x08005d8f
 8005cc0:	08005d4b 	.word	0x08005d4b
 8005cc4:	08005d8f 	.word	0x08005d8f
 8005cc8:	08005d8f 	.word	0x08005d8f
 8005ccc:	08005d8f 	.word	0x08005d8f
 8005cd0:	08005d8f 	.word	0x08005d8f
 8005cd4:	08005d8f 	.word	0x08005d8f
 8005cd8:	08005d8f 	.word	0x08005d8f
 8005cdc:	08005d8f 	.word	0x08005d8f
 8005ce0:	08005d5b 	.word	0x08005d5b
 8005ce4:	08005d8f 	.word	0x08005d8f
 8005ce8:	08005d8f 	.word	0x08005d8f
 8005cec:	08005d8f 	.word	0x08005d8f
 8005cf0:	08005d8f 	.word	0x08005d8f
 8005cf4:	08005d8f 	.word	0x08005d8f
 8005cf8:	08005d8f 	.word	0x08005d8f
 8005cfc:	08005d8f 	.word	0x08005d8f
 8005d00:	08005d8f 	.word	0x08005d8f
 8005d04:	08005d8f 	.word	0x08005d8f
 8005d08:	08005d8f 	.word	0x08005d8f
 8005d0c:	08005d8f 	.word	0x08005d8f
 8005d10:	08005d8f 	.word	0x08005d8f
 8005d14:	08005d8f 	.word	0x08005d8f
 8005d18:	08005d8f 	.word	0x08005d8f
 8005d1c:	08005d8f 	.word	0x08005d8f
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	2b40      	cmp	r3, #64	@ 0x40
 8005d26:	d02e      	beq.n	8005d86 <UART_SetConfig+0xa36>
 8005d28:	e031      	b.n	8005d8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2a:	f7fc fded 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8005d2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d30:	e033      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d32:	f7fc fdff 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8005d36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d38:	e02f      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe f82e 	bl	8003da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d48:	e027      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4a:	f107 0318 	add.w	r3, r7, #24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe f97a 	bl	8004048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d58:	e01f      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e10 <UART_SetConfig+0xac0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d66:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <UART_SetConfig+0xac0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	4a28      	ldr	r2, [pc, #160]	@ (8005e14 <UART_SetConfig+0xac4>)
 8005d72:	fa22 f303 	lsr.w	r3, r2, r3
 8005d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d78:	e00f      	b.n	8005d9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d7a:	4b26      	ldr	r3, [pc, #152]	@ (8005e14 <UART_SetConfig+0xac4>)
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7e:	e00c      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d80:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <UART_SetConfig+0xac8>)
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d98:	bf00      	nop
    }

    if (pclk != 0U)
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d021      	beq.n	8005de4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <UART_SetConfig+0xacc>)
 8005da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	d909      	bls.n	8005dde <UART_SetConfig+0xa8e>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d205      	bcs.n	8005dde <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	e002      	b.n	8005de4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e00:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3748      	adds	r7, #72	@ 0x48
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	003d0900 	.word	0x003d0900
 8005e1c:	08006518 	.word	0x08006518

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b098      	sub	sp, #96	@ 0x60
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f74:	f7fb f99c 	bl	80012b0 <HAL_GetTick>
 8005f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d12f      	bne.n	8005fe8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f88e 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d022      	beq.n	8005fe8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e063      	b.n	80060b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d149      	bne.n	800608a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffe:	2200      	movs	r2, #0
 8006000:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f857 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d03c      	beq.n	800608a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	623b      	str	r3, [r7, #32]
   return(result);
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006030:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	60fb      	str	r3, [r7, #12]
   return(result);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006062:	61fa      	str	r2, [r7, #28]
 8006064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	617b      	str	r3, [r7, #20]
   return(result);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e012      	b.n	80060b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3758      	adds	r7, #88	@ 0x58
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	e04f      	b.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d04b      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d2:	f7fb f8ed 	bl	80012b0 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e04e      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d037      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b80      	cmp	r3, #128	@ 0x80
 80060fe:	d034      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d031      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d110      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2208      	movs	r2, #8
 800611a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f839 	bl	8006194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2208      	movs	r2, #8
 8006126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e029      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006144:	d111      	bne.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800614e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f81f 	bl	8006194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e00f      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d0a0      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b095      	sub	sp, #84	@ 0x54
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80061bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	4b1e      	ldr	r3, [pc, #120]	@ (800625c <UART_EndRxTransfer+0xc8>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d118      	bne.n	800623c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	60bb      	str	r3, [r7, #8]
   return(result);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	613b      	str	r3, [r7, #16]
   return(result);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e6      	bne.n	800620a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006250:	bf00      	nop
 8006252:	3754      	adds	r7, #84	@ 0x54
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	effffffe 	.word	0xeffffffe

08006260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_UARTEx_DisableFifoMode+0x16>
 8006272:	2302      	movs	r3, #2
 8006274:	e027      	b.n	80062c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2224      	movs	r2, #36	@ 0x24
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e02d      	b.n	8006346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2224      	movs	r2, #36	@ 0x24
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f850 	bl	80063cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006362:	2302      	movs	r3, #2
 8006364:	e02d      	b.n	80063c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2224      	movs	r2, #36	@ 0x24
 8006372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f812 	bl	80063cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d108      	bne.n	80063ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063ec:	e031      	b.n	8006452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ee:	2310      	movs	r3, #16
 80063f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063f2:	2310      	movs	r3, #16
 80063f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	0e5b      	lsrs	r3, r3, #25
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	0f5b      	lsrs	r3, r3, #29
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	7b3a      	ldrb	r2, [r7, #12]
 800641a:	4911      	ldr	r1, [pc, #68]	@ (8006460 <UARTEx_SetNbDataToProcess+0x94>)
 800641c:	5c8a      	ldrb	r2, [r1, r2]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006422:	7b3a      	ldrb	r2, [r7, #12]
 8006424:	490f      	ldr	r1, [pc, #60]	@ (8006464 <UARTEx_SetNbDataToProcess+0x98>)
 8006426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006428:	fb93 f3f2 	sdiv	r3, r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	7b7a      	ldrb	r2, [r7, #13]
 8006438:	4909      	ldr	r1, [pc, #36]	@ (8006460 <UARTEx_SetNbDataToProcess+0x94>)
 800643a:	5c8a      	ldrb	r2, [r1, r2]
 800643c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006440:	7b7a      	ldrb	r2, [r7, #13]
 8006442:	4908      	ldr	r1, [pc, #32]	@ (8006464 <UARTEx_SetNbDataToProcess+0x98>)
 8006444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006446:	fb93 f3f2 	sdiv	r3, r3, r2
 800644a:	b29a      	uxth	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	08006530 	.word	0x08006530
 8006464:	08006538 	.word	0x08006538

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <__libc_init_array>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4d0d      	ldr	r5, [pc, #52]	@ (80064b0 <__libc_init_array+0x38>)
 800647c:	4c0d      	ldr	r4, [pc, #52]	@ (80064b4 <__libc_init_array+0x3c>)
 800647e:	1b64      	subs	r4, r4, r5
 8006480:	10a4      	asrs	r4, r4, #2
 8006482:	2600      	movs	r6, #0
 8006484:	42a6      	cmp	r6, r4
 8006486:	d109      	bne.n	800649c <__libc_init_array+0x24>
 8006488:	4d0b      	ldr	r5, [pc, #44]	@ (80064b8 <__libc_init_array+0x40>)
 800648a:	4c0c      	ldr	r4, [pc, #48]	@ (80064bc <__libc_init_array+0x44>)
 800648c:	f000 f818 	bl	80064c0 <_init>
 8006490:	1b64      	subs	r4, r4, r5
 8006492:	10a4      	asrs	r4, r4, #2
 8006494:	2600      	movs	r6, #0
 8006496:	42a6      	cmp	r6, r4
 8006498:	d105      	bne.n	80064a6 <__libc_init_array+0x2e>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a0:	4798      	blx	r3
 80064a2:	3601      	adds	r6, #1
 80064a4:	e7ee      	b.n	8006484 <__libc_init_array+0xc>
 80064a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064aa:	4798      	blx	r3
 80064ac:	3601      	adds	r6, #1
 80064ae:	e7f2      	b.n	8006496 <__libc_init_array+0x1e>
 80064b0:	08006548 	.word	0x08006548
 80064b4:	08006548 	.word	0x08006548
 80064b8:	08006548 	.word	0x08006548
 80064bc:	0800654c 	.word	0x0800654c

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
