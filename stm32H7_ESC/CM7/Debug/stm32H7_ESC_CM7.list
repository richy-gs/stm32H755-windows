
stm32H7_ESC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080062f0  080062f0  000072f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006334  08006334  00007334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006338  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  08006348  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  08006348  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013097  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002194  00000000  00000000  0001b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdb  00000000  00000000  0001e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a063  00000000  00000000  0001ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013631  00000000  00000000  00058dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185b37  00000000  00000000  0006c40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1f46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  001f1f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f6010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062d8 	.word	0x080062d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080062d8 	.word	0x080062d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <Motor_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Definiciones de dirección de los motores
void Motor_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <Motor_Init+0x24>)
 80006fc:	f003 ff20 	bl	8004540 <HAL_TIM_PWM_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <Motor_Init+0x16>
	  {
	  	  Error_Handler();
 8000706:	f000 faf1 	bl	8000cec <Error_Handler>
	  }
	  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 1500);
 800070a:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <Motor_Init+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000078 	.word	0x24000078

0800071c <Motor_SetSpeed2>:
//	}
//	HAL_Delay(delayTime);
//}

void Motor_SetSpeed2(int speed, int delayTime) // Range from -100 to 100
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	const uint32_t change = 10;
 8000726:	230a      	movs	r3, #10
 8000728:	613b      	str	r3, [r7, #16]
	uint32_t delay = 10;
 800072a:	230a      	movs	r3, #10
 800072c:	60fb      	str	r3, [r7, #12]
	uint32_t x = TIM14->CCR1;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <Motor_SetSpeed2+0x8c>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000732:	617b      	str	r3, [r7, #20]

	if(speed > 100) speed = 100;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b64      	cmp	r3, #100	@ 0x64
 8000738:	dd02      	ble.n	8000740 <Motor_SetSpeed2+0x24>
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e006      	b.n	800074e <Motor_SetSpeed2+0x32>
	else if (speed < -100) speed = -100;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000746:	da02      	bge.n	800074e <Motor_SetSpeed2+0x32>
 8000748:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800074c:	607b      	str	r3, [r7, #4]

	int newSpeed = 1500 + (speed*4);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f203 1377 	addw	r3, r3, #375	@ 0x177
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	60bb      	str	r3, [r7, #8]

	while(abs(newSpeed - x) > 10)
 8000758:	e016      	b.n	8000788 <Motor_SetSpeed2+0x6c>
	{
		if (newSpeed > x) x += change;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	429a      	cmp	r2, r3
 8000760:	d204      	bcs.n	800076c <Motor_SetSpeed2+0x50>
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	4413      	add	r3, r2
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e007      	b.n	800077c <Motor_SetSpeed2+0x60>
		else if (newSpeed < x) x -= change;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	429a      	cmp	r2, r3
 8000772:	d903      	bls.n	800077c <Motor_SetSpeed2+0x60>
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]

		TIM14->CCR1 = (uint32_t) x;
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <Motor_SetSpeed2+0x8c>)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(delay);
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f000 fcc6 	bl	8001114 <HAL_Delay>
	while(abs(newSpeed - x) > 10)
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b0a      	cmp	r3, #10
 8000796:	dce0      	bgt.n	800075a <Motor_SetSpeed2+0x3e>
	}
	HAL_Delay(delayTime);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fcba 	bl	8001114 <HAL_Delay>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002000 	.word	0x40002000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <main+0xe8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fa89 	bl	8000cec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fc09 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f85d 	bl	800089c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <main+0xe8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000894 <main+0xe8>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <main+0xe8>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 ff4b 	bl	800169c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff61 	bl	80016d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <main+0xe8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fa5b 	bl	8000cec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f993 	bl	8000b60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f945 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800083e:	f000 f8f5 	bl	8000a2c <MX_TIM14_Init>
  MX_TIM13_Init();
 8000842:	f000 f8a5 	bl	8000990 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <main+0xec>)
 800084a:	f003 fe79 	bl	8004540 <HAL_TIM_PWM_Start>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <main+0xac>
  {
  	  Error_Handler();
 8000854:	f000 fa4a 	bl	8000cec <Error_Handler>
  }
  __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, 1500);
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <main+0xec>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34

  Motor_Init();
 8000862:	f7ff ff47 	bl	80006f4 <Motor_Init>
  HAL_Delay(1500);
 8000866:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800086a:	f000 fc53 	bl	8001114 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Motor_SetSpeed2(100,1000);
 800086e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000872:	2064      	movs	r0, #100	@ 0x64
 8000874:	f7ff ff52 	bl	800071c <Motor_SetSpeed2>
	  Motor_SetSpeed2(-100,1000);
 8000878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800087c:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8000880:	f7ff ff4c 	bl	800071c <Motor_SetSpeed2>
	  Motor_SetSpeed2(0,1000);
 8000884:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ff47 	bl	800071c <Motor_SetSpeed2>
	  Motor_SetSpeed2(100,1000);
 800088e:	bf00      	nop
 8000890:	e7ed      	b.n	800086e <main+0xc2>
 8000892:	bf00      	nop
 8000894:	58024400 	.word	0x58024400
 8000898:	2400002c 	.word	0x2400002c

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	@ 0x70
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a6:	224c      	movs	r2, #76	@ 0x4c
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fce8 	bl	8006280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2220      	movs	r2, #32
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fce2 	bl	8006280 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008bc:	2004      	movs	r0, #4
 80008be:	f000 ff1b 	bl	80016f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <SystemClock_Config+0xec>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000988 <SystemClock_Config+0xec>)
 80008cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <SystemClock_Config+0xec>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <SystemClock_Config+0xf0>)
 80008de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e0:	4a2a      	ldr	r2, [pc, #168]	@ (800098c <SystemClock_Config+0xf0>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008e8:	4b28      	ldr	r3, [pc, #160]	@ (800098c <SystemClock_Config+0xf0>)
 80008ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f4:	bf00      	nop
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <SystemClock_Config+0xec>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000902:	d1f8      	bne.n	80008f6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000908:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800091a:	23f0      	movs	r3, #240	@ 0xf0
 800091c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000922:	2305      	movs	r3, #5
 8000924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800092a:	2308      	movs	r3, #8
 800092c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092e:	2300      	movs	r3, #0
 8000930:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093a:	4618      	mov	r0, r3
 800093c:	f000 ff36 	bl	80017ac <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000946:	f000 f9d1 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	233f      	movs	r3, #63	@ 0x3f
 800094c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000956:	2308      	movs	r3, #8
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb75 	bl	8002060 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800097c:	f000 f9b6 	bl	8000cec <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3770      	adds	r7, #112	@ 0x70
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	58024800 	.word	0x58024800
 800098c:	58000400 	.word	0x58000400

08000990 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a28 <MX_TIM13_Init+0x98>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009b0:	22ef      	movs	r2, #239	@ 0xef
 80009b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009bc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009d0:	f003 fcfe 	bl	80043d0 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009da:	f000 f987 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_TIM13_Init+0x94>)
 80009e0:	f003 fd4d 	bl	800447e <HAL_TIM_PWM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 f97f 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80009f2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <MX_TIM13_Init+0x94>)
 8000a08:	f003 fea8 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000a12:	f000 f96b 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a16:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <MX_TIM13_Init+0x94>)
 8000a18:	f000 f9c2 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2400002c 	.word	0x2400002c
 8000a28:	40001c00 	.word	0x40001c00

08000a2c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <MX_TIM14_Init+0x98>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a4c:	22ef      	movs	r2, #239	@ 0xef
 8000a4e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a58:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a5c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a6a:	4815      	ldr	r0, [pc, #84]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a6c:	f003 fcb0 	bl	80043d0 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a76:	f000 f939 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a7a:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000a7c:	f003 fcff 	bl	800447e <HAL_TIM_PWM_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f000 f931 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8a:	2360      	movs	r3, #96	@ 0x60
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a8e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000aa4:	f003 fe5a 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000aae:	f000 f91d 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ab2:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <MX_TIM14_Init+0x94>)
 8000ab4:	f000 f974 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	24000078 	.word	0x24000078
 8000ac4:	40002000 	.word	0x40002000

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_USART3_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ad4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b12:	f004 fad8 	bl	80050c6 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f8e6 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b24:	f005 fae1 	bl	80060ea <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 f8dd 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fb16 	bl	8006166 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 f8d4 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b46:	f005 fa97 	bl	8006078 <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f8cc 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240000c4 	.word	0x240000c4
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b58      	ldr	r3, [pc, #352]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a56      	ldr	r2, [pc, #344]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b54      	ldr	r3, [pc, #336]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b50      	ldr	r3, [pc, #320]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b49      	ldr	r3, [pc, #292]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a47      	ldr	r2, [pc, #284]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b45      	ldr	r3, [pc, #276]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a40      	ldr	r2, [pc, #256]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a38      	ldr	r2, [pc, #224]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b36      	ldr	r3, [pc, #216]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0c:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a31      	ldr	r2, [pc, #196]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd8 <MX_GPIO_Init+0x178>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c2a:	2332      	movs	r3, #50	@ 0x32
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <MX_GPIO_Init+0x17c>)
 8000c46:	f000 fb79 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c4a:	2386      	movs	r3, #134	@ 0x86
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <MX_GPIO_Init+0x180>)
 8000c66:	f000 fb69 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0x184>)
 8000c88:	f000 fb58 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c8c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_GPIO_Init+0x180>)
 8000caa:	f000 fb47 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <MX_GPIO_Init+0x188>)
 8000ccc:	f000 fb36 	bl	800133c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3730      	adds	r7, #48	@ 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58021800 	.word	0x58021800

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	58024400 	.word	0x58024400

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <HAL_TIM_Base_MspInit+0x68>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10f      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d5c:	e013      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <HAL_TIM_Base_MspInit+0x70>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d10e      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_TIM_Base_MspInit+0x6c>)
 8000d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40001c00 	.word	0x40001c00
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	40002000 	.word	0x40002000

08000da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <HAL_TIM_MspPostInit+0xb8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d120      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a24      	ldr	r2, [pc, #144]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000df2:	2309      	movs	r3, #9
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4818      	ldr	r0, [pc, #96]	@ (8000e60 <HAL_TIM_MspPostInit+0xc0>)
 8000dfe:	f000 fa9d 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000e02:	e024      	b.n	8000e4e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a16      	ldr	r2, [pc, #88]	@ (8000e64 <HAL_TIM_MspPostInit+0xc4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d11f      	bne.n	8000e4e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a11      	ldr	r2, [pc, #68]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_TIM_MspPostInit+0xbc>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8000e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000e3e:	2309      	movs	r3, #9
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_TIM_MspPostInit+0xc0>)
 8000e4a:	f000 fa77 	bl	800133c <HAL_GPIO_Init>
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40001c00 	.word	0x40001c00
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58021400 	.word	0x58021400
 8000e64:	40002000 	.word	0x40002000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	22c0      	movs	r2, #192	@ 0xc0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f9f9 	bl	8006280 <memset>
  if(huart->Instance==USART3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a27      	ldr	r2, [pc, #156]	@ (8000f30 <HAL_UART_MspInit+0xc8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d146      	bne.n	8000f26 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e98:	f04f 0202 	mov.w	r2, #2
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fc62 	bl	8002778 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eba:	f7ff ff17 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_UART_MspInit+0xcc>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RT_Pin|STLINK_TX_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_UART_MspInit+0xd0>)
 8000f22:	f000 fa0b 	bl	800133c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	37e8      	adds	r7, #232	@ 0xe8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004800 	.word	0x40004800
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020c00 	.word	0x58020c00

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f89f 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa0:	f7ff fb12 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	@ (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f005 f961 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fbed 	bl	80007ac <main>
  bx  lr
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fdc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe0:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 8000fe4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fe8:	2400015c 	.word	0x2400015c

08000fec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC3_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f000 f96e 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ffc:	f001 f9e6 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8001000:	4602      	mov	r2, r0
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	4913      	ldr	r1, [pc, #76]	@ (800105c <HAL_Init+0x6c>)
 800100e:	5ccb      	ldrb	r3, [r1, r3]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	4a0e      	ldr	r2, [pc, #56]	@ (800105c <HAL_Init+0x6c>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <HAL_Init+0x70>)
 8001032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_Init+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f814 	bl	8001068 <HAL_InitTick>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e002      	b.n	8001050 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800104a:	f7ff fe55 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58024400 	.word	0x58024400
 800105c:	080062f0 	.word	0x080062f0
 8001060:	24000004 	.word	0x24000004
 8001064:	24000000 	.word	0x24000000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e021      	b.n	80010c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <HAL_InitTick+0x64>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f945 	bl	8001322 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f91d 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	@ (80010d0 <HAL_InitTick+0x68>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2400000c 	.word	0x2400000c
 80010cc:	24000000 	.word	0x24000000
 80010d0:	24000008 	.word	0x24000008

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2400000c 	.word	0x2400000c
 80010f8:	24000158 	.word	0x24000158

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	24000158 	.word	0x24000158

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400000c 	.word	0x2400000c

0800115c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetREVID+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0c1b      	lsrs	r3, r3, #16
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	5c001000 	.word	0x5c001000

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	05fa0000 	.word	0x05fa0000

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff47 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff5e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb2 	bl	8001294 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800134a:	4b89      	ldr	r3, [pc, #548]	@ (8001570 <HAL_GPIO_Init+0x234>)
 800134c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800134e:	e194      	b.n	800167a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8186 	beq.w	8001674 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <HAL_GPIO_Init+0x44>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d130      	bne.n	80013e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b6:	2201      	movs	r2, #1
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 0201 	and.w	r2, r3, #1
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d017      	beq.n	800141e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d123      	bne.n	8001472 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0203 	and.w	r2, r3, #3
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80e0 	beq.w	8001674 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <HAL_GPIO_Init+0x238>)
 80014b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001574 <HAL_GPIO_Init+0x238>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <HAL_GPIO_Init+0x238>)
 80014c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a29      	ldr	r2, [pc, #164]	@ (8001578 <HAL_GPIO_Init+0x23c>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <HAL_GPIO_Init+0x240>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d052      	beq.n	80015a4 <HAL_GPIO_Init+0x268>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <HAL_GPIO_Init+0x244>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d031      	beq.n	800156a <HAL_GPIO_Init+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_GPIO_Init+0x248>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d02b      	beq.n	8001566 <HAL_GPIO_Init+0x22a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_GPIO_Init+0x24c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d025      	beq.n	8001562 <HAL_GPIO_Init+0x226>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <HAL_GPIO_Init+0x250>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01f      	beq.n	800155e <HAL_GPIO_Init+0x222>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_GPIO_Init+0x254>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x21e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <HAL_GPIO_Init+0x258>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x21a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <HAL_GPIO_Init+0x25c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x216>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a18      	ldr	r2, [pc, #96]	@ (800159c <HAL_GPIO_Init+0x260>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x212>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_GPIO_Init+0x264>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x20e>
 8001546:	2309      	movs	r3, #9
 8001548:	e02d      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800154a:	230a      	movs	r3, #10
 800154c:	e02b      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800154e:	2308      	movs	r3, #8
 8001550:	e029      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 8001552:	2307      	movs	r3, #7
 8001554:	e027      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 8001556:	2306      	movs	r3, #6
 8001558:	e025      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800155a:	2305      	movs	r3, #5
 800155c:	e023      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800155e:	2304      	movs	r3, #4
 8001560:	e021      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 8001562:	2303      	movs	r3, #3
 8001564:	e01f      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 8001566:	2302      	movs	r3, #2
 8001568:	e01d      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800156a:	2301      	movs	r3, #1
 800156c:	e01b      	b.n	80015a6 <HAL_GPIO_Init+0x26a>
 800156e:	bf00      	nop
 8001570:	58000080 	.word	0x58000080
 8001574:	58024400 	.word	0x58024400
 8001578:	58000400 	.word	0x58000400
 800157c:	58020000 	.word	0x58020000
 8001580:	58020400 	.word	0x58020400
 8001584:	58020800 	.word	0x58020800
 8001588:	58020c00 	.word	0x58020c00
 800158c:	58021000 	.word	0x58021000
 8001590:	58021400 	.word	0x58021400
 8001594:	58021800 	.word	0x58021800
 8001598:	58021c00 	.word	0x58021c00
 800159c:	58022000 	.word	0x58022000
 80015a0:	58022400 	.word	0x58022400
 80015a4:	2300      	movs	r3, #0
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b6:	4938      	ldr	r1, [pc, #224]	@ (8001698 <HAL_GPIO_Init+0x35c>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3301      	adds	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f ae63 	bne.w	8001350 <HAL_GPIO_Init+0x14>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3724      	adds	r7, #36	@ 0x24
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	58000400 	.word	0x58000400

0800169c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_HSEM_FastTake+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3320      	adds	r3, #32
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_HSEM_FastTake+0x30>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	58026400 	.word	0x58026400
 80016cc:	80000300 	.word	0x80000300

080016d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016da:	4906      	ldr	r1, [pc, #24]	@ (80016f4 <HAL_HSEM_Release+0x24>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58026400 	.word	0x58026400

080016f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b06      	cmp	r3, #6
 800170a:	d00a      	beq.n	8001722 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e040      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e03e      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800172a:	491f      	ldr	r1, [pc, #124]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001732:	f7ff fce3 	bl	80010fc <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001738:	e009      	b.n	800174e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800173a:	f7ff fcdf 	bl	80010fc <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001748:	d901      	bls.n	800174e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e028      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175a:	d1ee      	bne.n	800173a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b1e      	cmp	r3, #30
 8001760:	d008      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b2e      	cmp	r3, #46	@ 0x2e
 8001766:	d005      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b1d      	cmp	r3, #29
 800176c:	d002      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b2d      	cmp	r3, #45	@ 0x2d
 8001772:	d114      	bne.n	800179e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001774:	f7ff fcc2 	bl	80010fc <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800177a:	e009      	b.n	8001790 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800177c:	f7ff fcbe 	bl	80010fc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800178a:	d901      	bls.n	8001790 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e007      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d1ee      	bne.n	800177c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024800 	.word	0x58024800

080017ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f000 bc48 	b.w	8002050 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8088 	beq.w	80018de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4b99      	ldr	r3, [pc, #612]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017d8:	4b96      	ldr	r3, [pc, #600]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d007      	beq.n	80017f4 <HAL_RCC_OscConfig+0x48>
 80017e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e6:	2b18      	cmp	r3, #24
 80017e8:	d111      	bne.n	800180e <HAL_RCC_OscConfig+0x62>
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d06d      	beq.n	80018dc <HAL_RCC_OscConfig+0x130>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d169      	bne.n	80018dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f000 bc21 	b.w	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x7a>
 8001818:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a85      	ldr	r2, [pc, #532]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x9c>
 800182e:	4b81      	ldr	r3, [pc, #516]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a80      	ldr	r2, [pc, #512]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xc0>
 8001852:	4b78      	ldr	r3, [pc, #480]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a77      	ldr	r2, [pc, #476]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b75      	ldr	r3, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a74      	ldr	r2, [pc, #464]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 800186c:	4b71      	ldr	r3, [pc, #452]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a70      	ldr	r2, [pc, #448]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6d      	ldr	r2, [pc, #436]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fc36 	bl	80010fc <HAL_GetTick>
 8001890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc32 	bl	80010fc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e3d4      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xe8>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc22 	bl	80010fc <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fc1e 	bl	80010fc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e3c0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ce:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x110>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80ca 	beq.w	8001a80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_RCC_OscConfig+0x166>
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2b18      	cmp	r3, #24
 8001906:	d156      	bne.n	80019b6 <HAL_RCC_OscConfig+0x20a>
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d151      	bne.n	80019b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001912:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x17e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e392      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800192a:	4b42      	ldr	r3, [pc, #264]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0219 	bic.w	r2, r3, #25
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	493f      	ldr	r1, [pc, #252]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fbde 	bl	80010fc <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fbda 	bl	80010fc <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e37c      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	f7ff fbfb 	bl	800115c <HAL_GetREVID>
 8001966:	4603      	mov	r3, r0
 8001968:	f241 0203 	movw	r2, #4099	@ 0x1003
 800196c:	4293      	cmp	r3, r2
 800196e:	d817      	bhi.n	80019a0 <HAL_RCC_OscConfig+0x1f4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b40      	cmp	r3, #64	@ 0x40
 8001976:	d108      	bne.n	800198a <HAL_RCC_OscConfig+0x1de>
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001980:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001986:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	e07a      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	031b      	lsls	r3, r3, #12
 8001998:	4926      	ldr	r1, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199e:	e06f      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4921      	ldr	r1, [pc, #132]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	e064      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d047      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0219 	bic.w	r2, r3, #25
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	491a      	ldr	r1, [pc, #104]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb94 	bl	80010fc <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb90 	bl	80010fc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e332      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	f7ff fbb1 	bl	800115c <HAL_GetREVID>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d819      	bhi.n	8001a38 <HAL_RCC_OscConfig+0x28c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b40      	cmp	r3, #64	@ 0x40
 8001a0a:	d108      	bne.n	8001a1e <HAL_RCC_OscConfig+0x272>
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1a:	6053      	str	r3, [r2, #4]
 8001a1c:	e030      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	031b      	lsls	r3, r3, #12
 8001a2c:	4901      	ldr	r1, [pc, #4]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
 8001a32:	e025      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
 8001a34:	58024400 	.word	0x58024400
 8001a38:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	4997      	ldr	r1, [pc, #604]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b95      	ldr	r3, [pc, #596]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a94      	ldr	r2, [pc, #592]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb4f 	bl	80010fc <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fb4b 	bl	80010fc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e2ed      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a74:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a9 	beq.w	8001be0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a98:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d007      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x308>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b18      	cmp	r3, #24
 8001aa8:	d13a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x374>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d135      	bne.n	8001b20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x320>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b80      	cmp	r3, #128	@ 0x80
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e2c1      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001acc:	f7ff fb46 	bl	800115c <HAL_GetREVID>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d817      	bhi.n	8001b0a <HAL_RCC_OscConfig+0x35e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x348>
 8001ae2:	4b70      	ldr	r3, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001aea:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001af0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af2:	e075      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	4968      	ldr	r1, [pc, #416]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b08:	e06a      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	061b      	lsls	r3, r3, #24
 8001b18:	4962      	ldr	r1, [pc, #392]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b1e:	e05f      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d042      	beq.n	8001bae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fae2 	bl	80010fc <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fade 	bl	80010fc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e280      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5a:	f7ff faff 	bl	800115c <HAL_GetREVID>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d817      	bhi.n	8001b98 <HAL_RCC_OscConfig+0x3ec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d108      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3d6>
 8001b70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b7e:	6053      	str	r3, [r2, #4]
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
 8001b82:	4b48      	ldr	r3, [pc, #288]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	069b      	lsls	r3, r3, #26
 8001b90:	4944      	ldr	r1, [pc, #272]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	e023      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
 8001b98:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e018      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fa9f 	bl	80010fc <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fa9b 	bl	80010fc <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e23d      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d036      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d019      	beq.n	8001c28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa7c 	bl	80010fc <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fa78 	bl	80010fc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e21a      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x45c>
 8001c26:	e018      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fa62 	bl	80010fc <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fa5e 	bl	80010fc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e200      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d039      	beq.n	8001cda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fa3f 	bl	80010fc <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c82:	f7ff fa3b 	bl	80010fc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1dd      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
 8001ca0:	e01b      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001ca2:	bf00      	nop
 8001ca4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a9a      	ldr	r2, [pc, #616]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fa22 	bl	80010fc <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cbc:	f7ff fa1e 	bl	80010fc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1c0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cce:	4b92      	ldr	r3, [pc, #584]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8081 	beq.w	8001dea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a8b      	ldr	r2, [pc, #556]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fa02 	bl	80010fc <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7ff f9fe 	bl	80010fc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1a0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0e:	4b83      	ldr	r3, [pc, #524]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0x584>
 8001d22:	4b7d      	ldr	r3, [pc, #500]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	4a7c      	ldr	r2, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2e:	e02d      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5a6>
 8001d38:	4b77      	ldr	r3, [pc, #476]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a76      	ldr	r2, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	4b74      	ldr	r3, [pc, #464]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a73      	ldr	r2, [pc, #460]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	f023 0304 	bic.w	r3, r3, #4
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c8>
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d74:	4b68      	ldr	r3, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	4b65      	ldr	r3, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a64      	ldr	r2, [pc, #400]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f9b2 	bl	80010fc <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f9ae 	bl	80010fc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e14e      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001db2:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5f0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f99c 	bl	80010fc <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f998 	bl	80010fc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e138      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dde:	4b4e      	ldr	r3, [pc, #312]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 812d 	beq.w	800204e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001df4:	4b48      	ldr	r3, [pc, #288]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	f000 80bd 	beq.w	8001f7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 809e 	bne.w	8001f48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f970 	bl	80010fc <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f96c 	bl	80010fc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e10e      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <HAL_RCC_OscConfig+0x774>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	4931      	ldr	r1, [pc, #196]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e66:	3b01      	subs	r3, #1
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	3b01      	subs	r3, #1
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e80:	3b01      	subs	r3, #1
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e88:	4923      	ldr	r1, [pc, #140]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ea6:	00d2      	lsls	r2, r2, #3
 8001ea8:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f023 020c 	bic.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4917      	ldr	r1, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f023 0202 	bic.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	4912      	ldr	r1, [pc, #72]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f8f5 	bl	80010fc <HAL_GetTick>
 8001f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f14:	e011      	b.n	8001f3a <HAL_RCC_OscConfig+0x78e>
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58024800 	.word	0x58024800
 8001f20:	fffffc0c 	.word	0xfffffc0c
 8001f24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff f8e8 	bl	80010fc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e08a      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x77c>
 8001f46:	e082      	b.n	800204e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8d2 	bl	80010fc <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8ce 	bl	80010fc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e070      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7b0>
 8001f7a:	e068      	b.n	800204e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f7c:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f82:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d031      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0203 	and.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d12a      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d122      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11a      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d111      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0e1b      	lsrs	r3, r3, #24
 8001fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e02b      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002002:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d01f      	beq.n	800204e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800201a:	f7ff f86f 	bl	80010fc <HAL_GetTick>
 800201e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002020:	bf00      	nop
 8002022:	f7ff f86b 	bl	80010fc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	4293      	cmp	r3, r2
 800202c:	d0f9      	beq.n	8002022 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_RCC_OscConfig+0x8b0>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	4906      	ldr	r1, [pc, #24]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 800203e:	4313      	orrs	r3, r2
 8002040:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3730      	adds	r7, #48	@ 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	58024400 	.word	0x58024400
 800205c:	ffff0007 	.word	0xffff0007

08002060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e19c      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b8a      	ldr	r3, [pc, #552]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b87      	ldr	r3, [pc, #540]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	4985      	ldr	r1, [pc, #532]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b83      	ldr	r3, [pc, #524]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e184      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	4b7b      	ldr	r3, [pc, #492]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020bc:	429a      	cmp	r2, r3
 80020be:	d908      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c0:	4b78      	ldr	r3, [pc, #480]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4975      	ldr	r1, [pc, #468]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d908      	bls.n	8002100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ee:	4b6d      	ldr	r3, [pc, #436]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	496a      	ldr	r1, [pc, #424]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	4b64      	ldr	r3, [pc, #400]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800211c:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	495e      	ldr	r1, [pc, #376]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800212a:	4313      	orrs	r3, r2
 800212c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002146:	429a      	cmp	r2, r3
 8002148:	d908      	bls.n	800215c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800214a:	4b56      	ldr	r3, [pc, #344]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4953      	ldr	r1, [pc, #332]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002158:	4313      	orrs	r3, r2
 800215a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b4d      	ldr	r3, [pc, #308]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	429a      	cmp	r2, r3
 8002176:	d908      	bls.n	800218a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f023 020f 	bic.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4947      	ldr	r1, [pc, #284]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002186:	4313      	orrs	r3, r2
 8002188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d055      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002196:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4940      	ldr	r1, [pc, #256]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b0:	4b3c      	ldr	r3, [pc, #240]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0f6      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c8:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0ea      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0de      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f0:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0d6      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f023 0207 	bic.w	r2, r3, #7
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800220e:	4313      	orrs	r3, r2
 8002210:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002212:	f7fe ff73 	bl	80010fc <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002218:	e00a      	b.n	8002230 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7fe ff6f 	bl	80010fc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0be      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	429a      	cmp	r2, r3
 8002240:	d1eb      	bne.n	800221a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	429a      	cmp	r2, r3
 800225c:	d208      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	490e      	ldr	r1, [pc, #56]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800226c:	4313      	orrs	r3, r2
 800226e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d214      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e086      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
 80022a0:	52002000 	.word	0x52002000
 80022a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	4b3f      	ldr	r3, [pc, #252]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d208      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022c4:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4939      	ldr	r1, [pc, #228]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d208      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022f2:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	492e      	ldr	r1, [pc, #184]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002300:	4313      	orrs	r3, r2
 8002302:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 800232e:	4313      	orrs	r3, r2
 8002330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800234a:	429a      	cmp	r2, r3
 800234c:	d208      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4917      	ldr	r1, [pc, #92]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 800235c:	4313      	orrs	r3, r2
 800235e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002360:	f000 f834 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	4912      	ldr	r1, [pc, #72]	@ (80023bc <HAL_RCC_ClockConfig+0x35c>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_RCC_ClockConfig+0x35c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_RCC_ClockConfig+0x360>)
 8002396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002398:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_RCC_ClockConfig+0x364>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_RCC_ClockConfig+0x368>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fe60 	bl	8001068 <HAL_InitTick>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	58024400 	.word	0x58024400
 80023bc:	080062f0 	.word	0x080062f0
 80023c0:	24000004 	.word	0x24000004
 80023c4:	24000000 	.word	0x24000000
 80023c8:	24000008 	.word	0x24000008

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4bb3      	ldr	r3, [pc, #716]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023da:	2b18      	cmp	r3, #24
 80023dc:	f200 8155 	bhi.w	800268a <HAL_RCC_GetSysClockFreq+0x2be>
 80023e0:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	0800244d 	.word	0x0800244d
 80023ec:	0800268b 	.word	0x0800268b
 80023f0:	0800268b 	.word	0x0800268b
 80023f4:	0800268b 	.word	0x0800268b
 80023f8:	0800268b 	.word	0x0800268b
 80023fc:	0800268b 	.word	0x0800268b
 8002400:	0800268b 	.word	0x0800268b
 8002404:	0800268b 	.word	0x0800268b
 8002408:	08002473 	.word	0x08002473
 800240c:	0800268b 	.word	0x0800268b
 8002410:	0800268b 	.word	0x0800268b
 8002414:	0800268b 	.word	0x0800268b
 8002418:	0800268b 	.word	0x0800268b
 800241c:	0800268b 	.word	0x0800268b
 8002420:	0800268b 	.word	0x0800268b
 8002424:	0800268b 	.word	0x0800268b
 8002428:	08002479 	.word	0x08002479
 800242c:	0800268b 	.word	0x0800268b
 8002430:	0800268b 	.word	0x0800268b
 8002434:	0800268b 	.word	0x0800268b
 8002438:	0800268b 	.word	0x0800268b
 800243c:	0800268b 	.word	0x0800268b
 8002440:	0800268b 	.word	0x0800268b
 8002444:	0800268b 	.word	0x0800268b
 8002448:	0800247f 	.word	0x0800247f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800244c:	4b94      	ldr	r3, [pc, #592]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002458:	4b91      	ldr	r3, [pc, #580]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	4a90      	ldr	r2, [pc, #576]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800246a:	e111      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800246c:	4b8d      	ldr	r3, [pc, #564]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800246e:	61bb      	str	r3, [r7, #24]
      break;
 8002470:	e10e      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002472:	4b8d      	ldr	r3, [pc, #564]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002474:	61bb      	str	r3, [r7, #24]
      break;
 8002476:	e10b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002478:	4b8c      	ldr	r3, [pc, #560]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800247a:	61bb      	str	r3, [r7, #24]
      break;
 800247c:	e108      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800247e:	4b88      	ldr	r3, [pc, #544]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002488:	4b85      	ldr	r3, [pc, #532]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002492:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002494:	4b82      	ldr	r3, [pc, #520]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800249e:	4b80      	ldr	r3, [pc, #512]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80e1 	beq.w	8002684 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	f000 8083 	beq.w	80025d0 <HAL_RCC_GetSysClockFreq+0x204>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f200 80a1 	bhi.w	8002614 <HAL_RCC_GetSysClockFreq+0x248>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x114>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d056      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x1c0>
 80024de:	e099      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024e0:	4b6f      	ldr	r3, [pc, #444]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024ec:	4b6c      	ldr	r3, [pc, #432]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	08db      	lsrs	r3, r3, #3
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	4a6b      	ldr	r2, [pc, #428]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002516:	4b62      	ldr	r3, [pc, #392]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002526:	ed97 6a02 	vldr	s12, [r7, #8]
 800252a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800252e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800253a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002546:	e087      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255a:	4b51      	ldr	r3, [pc, #324]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256a:	ed97 6a02 	vldr	s12, [r7, #8]
 800256e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800257e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800258a:	e065      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002596:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800259a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800259e:	4b40      	ldr	r3, [pc, #256]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80025b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ce:	e043      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80025de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e2:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002612:	e021      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002636:	ed97 6a02 	vldr	s12, [r7, #8]
 800263a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800263e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800264a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002656:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	0a5b      	lsrs	r3, r3, #9
 800265e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002662:	3301      	adds	r3, #1
 8002664:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002670:	edd7 6a07 	vldr	s13, [r7, #28]
 8002674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267c:	ee17 3a90 	vmov	r3, s15
 8002680:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002682:	e005      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
      break;
 8002688:	e002      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800268c:	61bb      	str	r3, [r7, #24]
      break;
 800268e:	bf00      	nop
  }

  return sysclockfreq;
 8002690:	69bb      	ldr	r3, [r7, #24]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	58024400 	.word	0x58024400
 80026a4:	03d09000 	.word	0x03d09000
 80026a8:	003d0900 	.word	0x003d0900
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	46000000 	.word	0x46000000
 80026b4:	4c742400 	.word	0x4c742400
 80026b8:	4a742400 	.word	0x4a742400
 80026bc:	4af42400 	.word	0x4af42400

080026c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026c6:	f7ff fe81 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490f      	ldr	r1, [pc, #60]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x54>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <HAL_RCC_GetHCLKFreq+0x50>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x58>)
 80026fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026fe:	4a07      	ldr	r2, [pc, #28]	@ (800271c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x58>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	58024400 	.word	0x58024400
 8002714:	080062f0 	.word	0x080062f0
 8002718:	24000004 	.word	0x24000004
 800271c:	24000000 	.word	0x24000000

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002724:	f7ff ffcc 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4904      	ldr	r1, [pc, #16]	@ (8002748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	58024400 	.word	0x58024400
 8002748:	080062f0 	.word	0x080062f0

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002750:	f7ff ffb6 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4904      	ldr	r1, [pc, #16]	@ (8002774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	58024400 	.word	0x58024400
 8002774:	080062f0 	.word	0x080062f0

08002778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800277c:	b0ca      	sub	sp, #296	@ 0x128
 800277e:	af00      	add	r7, sp, #0
 8002780:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800279c:	2500      	movs	r5, #0
 800279e:	ea54 0305 	orrs.w	r3, r4, r5
 80027a2:	d049      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80027a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027ae:	d02f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027b4:	d828      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ba:	d01a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027c0:	d822      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027ca:	d007      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027cc:	e01c      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	4ab7      	ldr	r2, [pc, #732]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027da:	e01a      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e0:	3308      	adds	r3, #8
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fc8f 	bl	8004108 <RCCEx_PLL2_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027f0:	e00f      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f6:	3328      	adds	r3, #40	@ 0x28
 80027f8:	2102      	movs	r1, #2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fd36 	bl	800426c <RCCEx_PLL3_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002806:	e004      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800281a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002828:	4aa1      	ldr	r2, [pc, #644]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800282a:	430b      	orrs	r3, r1
 800282c:	6513      	str	r3, [r2, #80]	@ 0x50
 800282e:	e003      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002844:	f04f 0900 	mov.w	r9, #0
 8002848:	ea58 0309 	orrs.w	r3, r8, r9
 800284c:	d047      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	2b04      	cmp	r3, #4
 8002856:	d82a      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002858:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002875 	.word	0x08002875
 8002864:	08002883 	.word	0x08002883
 8002868:	08002899 	.word	0x08002899
 800286c:	080028b7 	.word	0x080028b7
 8002870:	080028b7 	.word	0x080028b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002874:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	4a8d      	ldr	r2, [pc, #564]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002880:	e01a      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002886:	3308      	adds	r3, #8
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fc3c 	bl	8004108 <RCCEx_PLL2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002896:	e00f      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289c:	3328      	adds	r3, #40	@ 0x28
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fce3 	bl	800426c <RCCEx_PLL3_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028ac:	e004      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c4:	f023 0107 	bic.w	r1, r3, #7
 80028c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	4a78      	ldr	r2, [pc, #480]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80028ea:	f04f 0b00 	mov.w	fp, #0
 80028ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80028f2:	d04c      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028fe:	d030      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002904:	d829      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002906:	2bc0      	cmp	r3, #192	@ 0xc0
 8002908:	d02d      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800290a:	2bc0      	cmp	r3, #192	@ 0xc0
 800290c:	d825      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800290e:	2b80      	cmp	r3, #128	@ 0x80
 8002910:	d018      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002912:	2b80      	cmp	r3, #128	@ 0x80
 8002914:	d821      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800291a:	2b40      	cmp	r3, #64	@ 0x40
 800291c:	d007      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800291e:	e01c      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002920:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	4a62      	ldr	r2, [pc, #392]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800292c:	e01c      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800292e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002932:	3308      	adds	r3, #8
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f001 fbe6 	bl	8004108 <RCCEx_PLL2_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002948:	3328      	adds	r3, #40	@ 0x28
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f001 fc8d 	bl	800426c <RCCEx_PLL3_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002960:	e002      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002970:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002974:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6513      	str	r3, [r2, #80]	@ 0x50
 8002984:	e003      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800298a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800298e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800299a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80029a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80029a8:	460b      	mov	r3, r1
 80029aa:	4313      	orrs	r3, r2
 80029ac:	d053      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029ba:	d035      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c0:	d82e      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029c6:	d031      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80029cc:	d828      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d2:	d01a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d8:	d822      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80029de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029e2:	d007      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80029e4:	e01c      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e6:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	4a31      	ldr	r2, [pc, #196]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f2:	e01c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	3308      	adds	r3, #8
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fb83 	bl	8004108 <RCCEx_PLL2_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a08:	e011      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0e:	3328      	adds	r3, #40	@ 0x28
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fc2a 	bl	800426c <RCCEx_PLL3_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a1e:	e006      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002a62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002a70:	460b      	mov	r3, r1
 8002a72:	4313      	orrs	r3, r2
 8002a74:	d056      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a82:	d038      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a88:	d831      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a8e:	d034      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a94:	d82b      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a9a:	d01d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aa0:	d825      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002aac:	e01f      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab4:	4ba2      	ldr	r3, [pc, #648]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac0:	e01c      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 fb1c 	bl	8004108 <RCCEx_PLL2_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002adc:	3328      	adds	r3, #40	@ 0x28
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fbc3 	bl	800426c <RCCEx_PLL3_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002af4:	e002      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b04:	4b8e      	ldr	r3, [pc, #568]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b14:	4a8a      	ldr	r2, [pc, #552]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1a:	e003      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4313      	orrs	r3, r2
 8002b42:	d03a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4a:	2b30      	cmp	r3, #48	@ 0x30
 8002b4c:	d01f      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b4e:	2b30      	cmp	r3, #48	@ 0x30
 8002b50:	d819      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d815      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d111      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b62:	4b77      	ldr	r3, [pc, #476]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	4a76      	ldr	r2, [pc, #472]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b74:	3308      	adds	r3, #8
 8002b76:	2102      	movs	r1, #2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 fac5 	bl	8004108 <RCCEx_PLL2_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b84:	e006      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b8c:	e002      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b9c:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	4a65      	ldr	r2, [pc, #404]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002bd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	d051      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be4:	d035      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bea:	d82e      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bf0:	d031      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bf6:	d828      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bfc:	d01a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c02:	d822      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c0e:	e01c      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c10:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	4a4a      	ldr	r2, [pc, #296]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c22:	3308      	adds	r3, #8
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fa6e 	bl	8004108 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c38:	3328      	adds	r3, #40	@ 0x28
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fb15 	bl	800426c <RCCEx_PLL3_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c48:	e006      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c60:	4b37      	ldr	r3, [pc, #220]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	4a34      	ldr	r2, [pc, #208]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c74:	e003      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	d056      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cae:	d82c      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cb4:	d02f      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cba:	d826      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cc0:	d02b      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cc6:	d820      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ccc:	d012      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cd2:	d81a      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d022      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fa0e 	bl	8004108 <RCCEx_PLL2_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cf2:	e015      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	3328      	adds	r3, #40	@ 0x28
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fab5 	bl	800426c <RCCEx_PLL3_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d08:	e00a      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d36:	4a02      	ldr	r2, [pc, #8]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	d055      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d78:	d033      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d7e:	d82c      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d84:	d02f      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8a:	d826      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d90:	d02b      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d96:	d820      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9c:	d012      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002da2:	d81a      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d022      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dac:	d115      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db2:	3308      	adds	r3, #8
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 f9a6 	bl	8004108 <RCCEx_PLL2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e015      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc8:	3328      	adds	r3, #40	@ 0x28
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fa4d 	bl	800426c <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002de2:	bf00      	nop
 8002de4:	e004      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002de6:	bf00      	nop
 8002de8:	e002      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002df8:	4ba3      	ldr	r3, [pc, #652]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e08:	4a9f      	ldr	r2, [pc, #636]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0e:	e003      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d037      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e42:	d00e      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e48:	d816      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e52:	d111      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e54:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4a8b      	ldr	r2, [pc, #556]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e60:	e00f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e66:	3308      	adds	r3, #8
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f94c 	bl	8004108 <RCCEx_PLL2_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a7b      	ldr	r2, [pc, #492]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e9e:	e003      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ebe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d039      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d81c      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f15 	.word	0x08002f15
 8002edc:	08002ee9 	.word	0x08002ee9
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	08002f15 	.word	0x08002f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	4a66      	ldr	r2, [pc, #408]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ef4:	e00f      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	3308      	adds	r3, #8
 8002efc:	2102      	movs	r1, #2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 f902 	bl	8004108 <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f0a:	e004      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	f023 0103 	bic.w	r1, r3, #3
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f32:	e003      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f000 809f 	beq.w	800309c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f6a:	f7fe f8c7 	bl	80010fc <HAL_GetTick>
 8002f6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f72:	e00b      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f74:	f7fe f8c2 	bl	80010fc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	@ 0x64
 8002f82:	d903      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ed      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d179      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fac:	4053      	eors	r3, r2
 8002fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb6:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a30      	ldr	r2, [pc, #192]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b2e      	ldr	r3, [pc, #184]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fda:	4a2b      	ldr	r2, [pc, #172]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fee:	d118      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f884 	bl	80010fc <HAL_GetTick>
 8002ff4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff8:	e00d      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe f87f 	bl	80010fc <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800300a:	429a      	cmp	r2, r3
 800300c:	d903      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003014:	e005      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003016:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0eb      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003026:	2b00      	cmp	r3, #0
 8003028:	d129      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303a:	d10e      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800304c:	091a      	lsrs	r2, r3, #4
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003050:	4013      	ands	r3, r2
 8003052:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6113      	str	r3, [r2, #16]
 8003058:	e005      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800305a:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003064:	6113      	str	r3, [r2, #16]
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003068:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003078:	430b      	orrs	r3, r1
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
 800307c:	e00e      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800307e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003086:	e009      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003088:	58024400 	.word	0x58024400
 800308c:	58024800 	.word	0x58024800
 8003090:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f002 0301 	and.w	r3, r2, #1
 80030a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f000 8089 	beq.w	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c4:	2b28      	cmp	r3, #40	@ 0x28
 80030c6:	d86b      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080031a9 	.word	0x080031a9
 80030d4:	080031a1 	.word	0x080031a1
 80030d8:	080031a1 	.word	0x080031a1
 80030dc:	080031a1 	.word	0x080031a1
 80030e0:	080031a1 	.word	0x080031a1
 80030e4:	080031a1 	.word	0x080031a1
 80030e8:	080031a1 	.word	0x080031a1
 80030ec:	080031a1 	.word	0x080031a1
 80030f0:	08003175 	.word	0x08003175
 80030f4:	080031a1 	.word	0x080031a1
 80030f8:	080031a1 	.word	0x080031a1
 80030fc:	080031a1 	.word	0x080031a1
 8003100:	080031a1 	.word	0x080031a1
 8003104:	080031a1 	.word	0x080031a1
 8003108:	080031a1 	.word	0x080031a1
 800310c:	080031a1 	.word	0x080031a1
 8003110:	0800318b 	.word	0x0800318b
 8003114:	080031a1 	.word	0x080031a1
 8003118:	080031a1 	.word	0x080031a1
 800311c:	080031a1 	.word	0x080031a1
 8003120:	080031a1 	.word	0x080031a1
 8003124:	080031a1 	.word	0x080031a1
 8003128:	080031a1 	.word	0x080031a1
 800312c:	080031a1 	.word	0x080031a1
 8003130:	080031a9 	.word	0x080031a9
 8003134:	080031a1 	.word	0x080031a1
 8003138:	080031a1 	.word	0x080031a1
 800313c:	080031a1 	.word	0x080031a1
 8003140:	080031a1 	.word	0x080031a1
 8003144:	080031a1 	.word	0x080031a1
 8003148:	080031a1 	.word	0x080031a1
 800314c:	080031a1 	.word	0x080031a1
 8003150:	080031a9 	.word	0x080031a9
 8003154:	080031a1 	.word	0x080031a1
 8003158:	080031a1 	.word	0x080031a1
 800315c:	080031a1 	.word	0x080031a1
 8003160:	080031a1 	.word	0x080031a1
 8003164:	080031a1 	.word	0x080031a1
 8003168:	080031a1 	.word	0x080031a1
 800316c:	080031a1 	.word	0x080031a1
 8003170:	080031a9 	.word	0x080031a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003178:	3308      	adds	r3, #8
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ffc3 	bl	8004108 <RCCEx_PLL2_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003188:	e00f      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800318a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318e:	3328      	adds	r3, #40	@ 0x28
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f001 f86a 	bl	800426c <RCCEx_PLL3_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80031a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031b2:	4bbf      	ldr	r3, [pc, #764]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031c0:	4abb      	ldr	r2, [pc, #748]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f002 0302 	and.w	r3, r2, #2
 80031dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80031ea:	460b      	mov	r3, r1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	d041      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d824      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	0800324d 	.word	0x0800324d
 8003204:	08003219 	.word	0x08003219
 8003208:	0800322f 	.word	0x0800322f
 800320c:	0800324d 	.word	0x0800324d
 8003210:	0800324d 	.word	0x0800324d
 8003214:	0800324d 	.word	0x0800324d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321c:	3308      	adds	r3, #8
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ff71 	bl	8004108 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800322c:	e00f      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003232:	3328      	adds	r3, #40	@ 0x28
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f818 	bl	800426c <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003256:	4b96      	ldr	r3, [pc, #600]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	f023 0107 	bic.w	r1, r3, #7
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003264:	4a92      	ldr	r2, [pc, #584]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003266:	430b      	orrs	r3, r1
 8003268:	6553      	str	r3, [r2, #84]	@ 0x54
 800326a:	e003      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f002 0304 	and.w	r3, r2, #4
 8003280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800328a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800328e:	460b      	mov	r3, r1
 8003290:	4313      	orrs	r3, r2
 8003292:	d044      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800329c:	2b05      	cmp	r3, #5
 800329e:	d825      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032d7 	.word	0x080032d7
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	3308      	adds	r3, #8
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 ff1d 	bl	8004108 <RCCEx_PLL2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032d4:	e00f      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032da:	3328      	adds	r3, #40	@ 0x28
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffc4 	bl	800426c <RCCEx_PLL3_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032fe:	4b6c      	ldr	r3, [pc, #432]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f023 0107 	bic.w	r1, r3, #7
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330e:	4a68      	ldr	r2, [pc, #416]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0320 	and.w	r3, r2, #32
 800332a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d055      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800334a:	d033      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003350:	d82c      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003356:	d02f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335c:	d826      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800335e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003368:	d820      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800336a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800336e:	d012      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003374:	d81a      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800337e:	d115      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 febd 	bl	8004108 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003394:	e015      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	3328      	adds	r3, #40	@ 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 ff64 	bl	800426c <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033aa:	e00a      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b2:	e006      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ca:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	4a35      	ldr	r2, [pc, #212]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033dc:	430b      	orrs	r3, r1
 80033de:	6553      	str	r3, [r2, #84]	@ 0x54
 80033e0:	e003      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003400:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003404:	460b      	mov	r3, r1
 8003406:	4313      	orrs	r3, r2
 8003408:	d058      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003412:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003416:	d033      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003418:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800341c:	d82c      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003422:	d02f      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003428:	d826      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800342a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800342e:	d02b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003430:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003434:	d820      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343a:	d012      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003440:	d81a      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344a:	d115      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003450:	3308      	adds	r3, #8
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fe57 	bl	8004108 <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003460:	e015      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	3328      	adds	r3, #40	@ 0x28
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fefe 	bl	800426c <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003476:	e00a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800347e:	e006      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003480:	bf00      	nop
 8003482:	e004      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003484:	bf00      	nop
 8003486:	e002      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034a6:	4a02      	ldr	r2, [pc, #8]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d055      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034e8:	d033      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80034ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034ee:	d82c      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f4:	d02f      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fa:	d826      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003500:	d02b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003502:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003506:	d820      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800350c:	d012      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800350e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003512:	d81a      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d022      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351c:	d115      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	3308      	adds	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fdee 	bl	8004108 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003532:	e015      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	3328      	adds	r3, #40	@ 0x28
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fe95 	bl	800426c <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003548:	e00a      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003550:	e006      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800355e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003568:	4ba1      	ldr	r3, [pc, #644]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003578:	4a9d      	ldr	r2, [pc, #628]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800357a:	430b      	orrs	r3, r1
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
 800357e:	e003      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f002 0308 	and.w	r3, r2, #8
 8003594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800359e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d01e      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	3328      	adds	r3, #40	@ 0x28
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fe54 	bl	800426c <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035d0:	4b87      	ldr	r3, [pc, #540]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035e0:	4a83      	ldr	r2, [pc, #524]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f002 0310 	and.w	r3, r2, #16
 80035f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d01e      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800360e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003612:	d10c      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3328      	adds	r3, #40	@ 0x28
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fe25 	bl	800426c <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800362e:	4b70      	ldr	r3, [pc, #448]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363e:	4a6c      	ldr	r2, [pc, #432]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800365a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d03e      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800366c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003670:	d022      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003676:	d81b      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d00b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003682:	e015      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003688:	3308      	adds	r3, #8
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fd3b 	bl	8004108 <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003698:	e00f      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	3328      	adds	r3, #40	@ 0x28
 80036a0:	2102      	movs	r1, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fde2 	bl	800426c <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036ae:	e004      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80036b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c2:	4b4b      	ldr	r3, [pc, #300]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036d2:	4a47      	ldr	r2, [pc, #284]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80036ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036f0:	2300      	movs	r3, #0
 80036f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80036f8:	460b      	mov	r3, r1
 80036fa:	4313      	orrs	r3, r2
 80036fc:	d03b      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800370a:	d01f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800370c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003710:	d818      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800371c:	d007      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800371e:	e011      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003720:	4b33      	ldr	r3, [pc, #204]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	4a32      	ldr	r2, [pc, #200]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800372c:	e00f      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	3328      	adds	r3, #40	@ 0x28
 8003734:	2101      	movs	r1, #1
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fd98 	bl	800426c <RCCEx_PLL3_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003742:	e004      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800374c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003768:	430b      	orrs	r3, r1
 800376a:	6553      	str	r3, [r2, #84]	@ 0x54
 800376c:	e003      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003782:	673b      	str	r3, [r7, #112]	@ 0x70
 8003784:	2300      	movs	r3, #0
 8003786:	677b      	str	r3, [r7, #116]	@ 0x74
 8003788:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800378c:	460b      	mov	r3, r1
 800378e:	4313      	orrs	r3, r2
 8003790:	d034      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d007      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80037a2:	e011      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4a11      	ldr	r2, [pc, #68]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037b0:	e00e      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	3308      	adds	r3, #8
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fca4 	bl	8004108 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e6:	4a02      	ldr	r2, [pc, #8]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800380a:	2300      	movs	r3, #0
 800380c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800380e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d00c      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	3328      	adds	r3, #40	@ 0x28
 800381e:	2102      	movs	r1, #2
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fd23 	bl	800426c <RCCEx_PLL3_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800383e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003840:	2300      	movs	r3, #0
 8003842:	667b      	str	r3, [r7, #100]	@ 0x64
 8003844:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d038      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800385a:	d018      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800385c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003860:	d811      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003866:	d014      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	d80b      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d011      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003876:	d106      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4bc3      	ldr	r3, [pc, #780]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	4ac2      	ldr	r2, [pc, #776]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a0:	4bb9      	ldr	r3, [pc, #740]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b0:	4ab5      	ldr	r2, [pc, #724]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80038cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038ce:	2300      	movs	r3, #0
 80038d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038dc:	4baa      	ldr	r3, [pc, #680]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80038fe:	2300      	movs	r3, #0
 8003900:	657b      	str	r3, [r7, #84]	@ 0x54
 8003902:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800390c:	4b9e      	ldr	r3, [pc, #632]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800391c:	4a9a      	ldr	r2, [pc, #616]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800392e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003930:	2300      	movs	r3, #0
 8003932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003934:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800393e:	4b92      	ldr	r3, [pc, #584]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003942:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394c:	4a8e      	ldr	r2, [pc, #568]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800395e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003960:	2300      	movs	r3, #0
 8003962:	647b      	str	r3, [r7, #68]	@ 0x44
 8003964:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800396e:	4b86      	ldr	r3, [pc, #536]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4a85      	ldr	r2, [pc, #532]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003974:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003978:	6113      	str	r3, [r2, #16]
 800397a:	4b83      	ldr	r3, [pc, #524]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397c:	6919      	ldr	r1, [r3, #16]
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003986:	4a80      	ldr	r2, [pc, #512]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003988:	430b      	orrs	r3, r1
 800398a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800399a:	2300      	movs	r3, #0
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039a8:	4b77      	ldr	r3, [pc, #476]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	4a74      	ldr	r2, [pc, #464]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ca:	2300      	movs	r3, #0
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e8:	4a67      	ldr	r2, [pc, #412]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	2100      	movs	r1, #0
 80039f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d011      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	3308      	adds	r3, #8
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fb78 	bl	8004108 <RCCEx_PLL2_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	2100      	movs	r1, #0
 8003a38:	6239      	str	r1, [r7, #32]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a44:	460b      	mov	r3, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	d011      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	3308      	adds	r3, #8
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb58 	bl	8004108 <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	2100      	movs	r1, #0
 8003a78:	61b9      	str	r1, [r7, #24]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a84:	460b      	mov	r3, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	d011      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2102      	movs	r1, #2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fb38 	bl	8004108 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	6139      	str	r1, [r7, #16]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	d011      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	3328      	adds	r3, #40	@ 0x28
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fbca 	bl	800426c <RCCEx_PLL3_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	2100      	movs	r1, #0
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d011      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	3328      	adds	r3, #40	@ 0x28
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fbaa 	bl	800426c <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	2100      	movs	r1, #0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b44:	460b      	mov	r3, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d011      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	3328      	adds	r3, #40	@ 0x28
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb8a 	bl	800426c <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003b6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003b82:	46bd      	mov	sp, r7
 8003b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b88:	58024400 	.word	0x58024400

08003b8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b90:	f7fe fd96 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	@ (8003bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	58024400 	.word	0x58024400
 8003bb4:	080062f0 	.word	0x080062f0

08003bb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	@ 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bc0:	4ba1      	ldr	r3, [pc, #644]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003bca:	4b9f      	ldr	r3, [pc, #636]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	0b1b      	lsrs	r3, r3, #12
 8003bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003be2:	4b99      	ldr	r3, [pc, #612]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8111 	beq.w	8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f000 8083 	beq.w	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	f200 80a1 	bhi.w	8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d056      	beq.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c22:	e099      	b.n	8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c24:	4b88      	ldr	r3, [pc, #544]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02d      	beq.n	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c30:	4b85      	ldr	r3, [pc, #532]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	4a84      	ldr	r2, [pc, #528]	@ (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c8a:	e087      	b.n	8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	e065      	b.n	8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b59      	ldr	r3, [pc, #356]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d12:	e043      	b.n	8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d26:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d56:	e021      	b.n	8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	0a5b      	lsrs	r3, r3, #9
 8003da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003dca:	4b1f      	ldr	r3, [pc, #124]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df0:	ee17 2a90 	vmov	r2, s15
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003df8:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1e:	ee17 2a90 	vmov	r2, s15
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e26:	e008      	b.n	8003e3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
}
 8003e3a:	bf00      	nop
 8003e3c:	3724      	adds	r7, #36	@ 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	03d09000 	.word	0x03d09000
 8003e50:	46000000 	.word	0x46000000
 8003e54:	4c742400 	.word	0x4c742400
 8003e58:	4a742400 	.word	0x4a742400
 8003e5c:	4af42400 	.word	0x4af42400

08003e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	@ 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e68:	4ba1      	ldr	r3, [pc, #644]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e72:	4b9f      	ldr	r3, [pc, #636]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	0d1b      	lsrs	r3, r3, #20
 8003e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e8a:	4b99      	ldr	r3, [pc, #612]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	08db      	lsrs	r3, r3, #3
 8003e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8111 	beq.w	80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f000 8083 	beq.w	8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f200 80a1 	bhi.w	8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d056      	beq.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003eca:	e099      	b.n	8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ecc:	4b88      	ldr	r3, [pc, #544]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02d      	beq.n	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ed8:	4b85      	ldr	r3, [pc, #532]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	4a84      	ldr	r2, [pc, #528]	@ (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f02:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f32:	e087      	b.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f46:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f76:	e065      	b.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8a:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fba:	e043      	b.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ffe:	e021      	b.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004012:	4b37      	ldr	r3, [pc, #220]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a03 	vldr	s12, [r7, #12]
 8004026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004044:	4b2a      	ldr	r3, [pc, #168]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800405a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800405e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406a:	ee17 2a90 	vmov	r2, s15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004072:	4b1f      	ldr	r3, [pc, #124]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800408c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004098:	ee17 2a90 	vmov	r2, s15
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	0e1b      	lsrs	r3, r3, #24
 80040a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80040be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c6:	ee17 2a90 	vmov	r2, s15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
}
 80040e2:	bf00      	nop
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	03d09000 	.word	0x03d09000
 80040f8:	46000000 	.word	0x46000000
 80040fc:	4c742400 	.word	0x4c742400
 8004100:	4a742400 	.word	0x4a742400
 8004104:	4af42400 	.word	0x4af42400

08004108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004116:	4b53      	ldr	r3, [pc, #332]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d101      	bne.n	8004126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e099      	b.n	800425a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004126:	4b4f      	ldr	r3, [pc, #316]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a4e      	ldr	r2, [pc, #312]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800412c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004132:	f7fc ffe3 	bl	80010fc <HAL_GetTick>
 8004136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004138:	e008      	b.n	800414c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800413a:	f7fc ffdf 	bl	80010fc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e086      	b.n	800425a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800414c:	4b45      	ldr	r3, [pc, #276]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004158:	4b42      	ldr	r3, [pc, #264]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	031b      	lsls	r3, r3, #12
 8004166:	493f      	ldr	r1, [pc, #252]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	628b      	str	r3, [r1, #40]	@ 0x28
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	3b01      	subs	r3, #1
 8004172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	3b01      	subs	r3, #1
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	b29b      	uxth	r3, r3
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	3b01      	subs	r3, #1
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800419c:	4931      	ldr	r1, [pc, #196]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041a2:	4b30      	ldr	r3, [pc, #192]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	492d      	ldr	r1, [pc, #180]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f023 0220 	bic.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	4928      	ldr	r1, [pc, #160]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041c6:	4b27      	ldr	r3, [pc, #156]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4a26      	ldr	r2, [pc, #152]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	f023 0310 	bic.w	r3, r3, #16
 80041d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041d2:	4b24      	ldr	r3, [pc, #144]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <RCCEx_PLL2_Config+0x160>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	69d2      	ldr	r2, [r2, #28]
 80041de:	00d2      	lsls	r2, r2, #3
 80041e0:	4920      	ldr	r1, [pc, #128]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	f043 0310 	orr.w	r3, r3, #16
 80041f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 80041fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004204:	e00f      	b.n	8004226 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800420c:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	4a14      	ldr	r2, [pc, #80]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004218:	e005      	b.n	8004226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	4a11      	ldr	r2, [pc, #68]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004224:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004226:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a0e      	ldr	r2, [pc, #56]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800422c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004232:	f7fc ff63 	bl	80010fc <HAL_GetTick>
 8004236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004238:	e008      	b.n	800424c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800423a:	f7fc ff5f 	bl	80010fc <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <RCCEx_PLL2_Config+0x15c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
 8004268:	ffff0007 	.word	0xffff0007

0800426c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800427a:	4b53      	ldr	r3, [pc, #332]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b03      	cmp	r3, #3
 8004284:	d101      	bne.n	800428a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e099      	b.n	80043be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800428a:	4b4f      	ldr	r3, [pc, #316]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4e      	ldr	r2, [pc, #312]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004296:	f7fc ff31 	bl	80010fc <HAL_GetTick>
 800429a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800429c:	e008      	b.n	80042b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800429e:	f7fc ff2d 	bl	80010fc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e086      	b.n	80043be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042b0:	4b45      	ldr	r3, [pc, #276]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042bc:	4b42      	ldr	r3, [pc, #264]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	051b      	lsls	r3, r3, #20
 80042ca:	493f      	ldr	r1, [pc, #252]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	3b01      	subs	r3, #1
 80042e0:	025b      	lsls	r3, r3, #9
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004300:	4931      	ldr	r1, [pc, #196]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004306:	4b30      	ldr	r3, [pc, #192]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	492d      	ldr	r1, [pc, #180]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004318:	4b2b      	ldr	r3, [pc, #172]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4928      	ldr	r1, [pc, #160]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800432a:	4b27      	ldr	r3, [pc, #156]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800433a:	4b24      	ldr	r3, [pc, #144]	@ (80043cc <RCCEx_PLL3_Config+0x160>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	69d2      	ldr	r2, [r2, #28]
 8004342:	00d2      	lsls	r2, r2, #3
 8004344:	4920      	ldr	r1, [pc, #128]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800434a:	4b1f      	ldr	r3, [pc, #124]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800435c:	4b1a      	ldr	r3, [pc, #104]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004362:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004368:	e00f      	b.n	800438a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d106      	bne.n	800437e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004370:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004376:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800437a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800437c:	e005      	b.n	800438a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800437e:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	4a11      	ldr	r2, [pc, #68]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004384:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800438a:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a0e      	ldr	r2, [pc, #56]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fc feb1 	bl	80010fc <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800439c:	e008      	b.n	80043b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800439e:	f7fc fead 	bl	80010fc <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e006      	b.n	80043be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <RCCEx_PLL3_Config+0x15c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	58024400 	.word	0x58024400
 80043cc:	ffff0007 	.word	0xffff0007

080043d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e049      	b.n	8004476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fc98 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 fab8 	bl	8004984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e049      	b.n	8004524 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f841 	bl	800452c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f000 fa61 	bl	8004984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_TIM_PWM_Start+0x24>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e03c      	b.n	80045de <HAL_TIM_PWM_Start+0x9e>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b04      	cmp	r3, #4
 8004568:	d109      	bne.n	800457e <HAL_TIM_PWM_Start+0x3e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e02f      	b.n	80045de <HAL_TIM_PWM_Start+0x9e>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d109      	bne.n	8004598 <HAL_TIM_PWM_Start+0x58>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e022      	b.n	80045de <HAL_TIM_PWM_Start+0x9e>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d109      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x72>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e015      	b.n	80045de <HAL_TIM_PWM_Start+0x9e>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d109      	bne.n	80045cc <HAL_TIM_PWM_Start+0x8c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	bf14      	ite	ne
 80045c4:	2301      	movne	r3, #1
 80045c6:	2300      	moveq	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e008      	b.n	80045de <HAL_TIM_PWM_Start+0x9e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0a1      	b.n	800472a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Start+0xb6>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f4:	e023      	b.n	800463e <HAL_TIM_PWM_Start+0xfe>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_PWM_Start+0xc6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004604:	e01b      	b.n	800463e <HAL_TIM_PWM_Start+0xfe>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start+0xd6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004614:	e013      	b.n	800463e <HAL_TIM_PWM_Start+0xfe>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d104      	bne.n	8004626 <HAL_TIM_PWM_Start+0xe6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004624:	e00b      	b.n	800463e <HAL_TIM_PWM_Start+0xfe>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b10      	cmp	r3, #16
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0xf6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004634:	e003      	b.n	800463e <HAL_TIM_PWM_Start+0xfe>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fd18 	bl	800507c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <HAL_TIM_PWM_Start+0x1f4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_TIM_PWM_Start+0x13e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a37      	ldr	r2, [pc, #220]	@ (8004738 <HAL_TIM_PWM_Start+0x1f8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_TIM_PWM_Start+0x13e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	@ (800473c <HAL_TIM_PWM_Start+0x1fc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_TIM_PWM_Start+0x13e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a34      	ldr	r2, [pc, #208]	@ (8004740 <HAL_TIM_PWM_Start+0x200>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIM_PWM_Start+0x13e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <HAL_TIM_PWM_Start+0x204>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_Start+0x142>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_TIM_PWM_Start+0x144>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a25      	ldr	r2, [pc, #148]	@ (8004734 <HAL_TIM_PWM_Start+0x1f4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d01d      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a25      	ldr	r2, [pc, #148]	@ (8004748 <HAL_TIM_PWM_Start+0x208>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a24      	ldr	r2, [pc, #144]	@ (800474c <HAL_TIM_PWM_Start+0x20c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a22      	ldr	r2, [pc, #136]	@ (8004750 <HAL_TIM_PWM_Start+0x210>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004738 <HAL_TIM_PWM_Start+0x1f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004754 <HAL_TIM_PWM_Start+0x214>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x1a8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_TIM_PWM_Start+0x1fc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d115      	bne.n	8004714 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <HAL_TIM_PWM_Start+0x218>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d015      	beq.n	8004726 <HAL_TIM_PWM_Start+0x1e6>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004700:	d011      	beq.n	8004726 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e008      	b.n	8004726 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e000      	b.n	8004728 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40010400 	.word	0x40010400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40001800 	.word	0x40001800
 8004758:	00010007 	.word	0x00010007

0800475c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004776:	2302      	movs	r3, #2
 8004778:	e0ff      	b.n	800497a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b14      	cmp	r3, #20
 8004786:	f200 80f0 	bhi.w	800496a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047e5 	.word	0x080047e5
 8004794:	0800496b 	.word	0x0800496b
 8004798:	0800496b 	.word	0x0800496b
 800479c:	0800496b 	.word	0x0800496b
 80047a0:	08004825 	.word	0x08004825
 80047a4:	0800496b 	.word	0x0800496b
 80047a8:	0800496b 	.word	0x0800496b
 80047ac:	0800496b 	.word	0x0800496b
 80047b0:	08004867 	.word	0x08004867
 80047b4:	0800496b 	.word	0x0800496b
 80047b8:	0800496b 	.word	0x0800496b
 80047bc:	0800496b 	.word	0x0800496b
 80047c0:	080048a7 	.word	0x080048a7
 80047c4:	0800496b 	.word	0x0800496b
 80047c8:	0800496b 	.word	0x0800496b
 80047cc:	0800496b 	.word	0x0800496b
 80047d0:	080048e9 	.word	0x080048e9
 80047d4:	0800496b 	.word	0x0800496b
 80047d8:	0800496b 	.word	0x0800496b
 80047dc:	0800496b 	.word	0x0800496b
 80047e0:	08004929 	.word	0x08004929
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f970 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
      break;
 8004822:	e0a5      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f9e0 	bl	8004bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6999      	ldr	r1, [r3, #24]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
      break;
 8004864:	e084      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fa49 	bl	8004d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0208 	orr.w	r2, r2, #8
 8004880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0204 	bic.w	r2, r2, #4
 8004890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	61da      	str	r2, [r3, #28]
      break;
 80048a4:	e064      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fab1 	bl	8004e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	021a      	lsls	r2, r3, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	61da      	str	r2, [r3, #28]
      break;
 80048e6:	e043      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fafa 	bl	8004ee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004926:	e023      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb3e 	bl	8004fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004968:	e002      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
      break;
 800496e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a46      	ldr	r2, [pc, #280]	@ (8004ab0 <TIM_Base_SetConfig+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a2:	d00f      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a43      	ldr	r2, [pc, #268]	@ (8004ab4 <TIM_Base_SetConfig+0x130>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a42      	ldr	r2, [pc, #264]	@ (8004ab8 <TIM_Base_SetConfig+0x134>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a41      	ldr	r2, [pc, #260]	@ (8004abc <TIM_Base_SetConfig+0x138>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a40      	ldr	r2, [pc, #256]	@ (8004ac0 <TIM_Base_SetConfig+0x13c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a35      	ldr	r2, [pc, #212]	@ (8004ab0 <TIM_Base_SetConfig+0x12c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e4:	d01b      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d017      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a31      	ldr	r2, [pc, #196]	@ (8004ab8 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a30      	ldr	r2, [pc, #192]	@ (8004abc <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac0 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <TIM_Base_SetConfig+0x140>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac8 <TIM_Base_SetConfig+0x144>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	@ (8004acc <TIM_Base_SetConfig+0x148>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <TIM_Base_SetConfig+0x12c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00f      	beq.n	8004a7c <TIM_Base_SetConfig+0xf8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <TIM_Base_SetConfig+0x13c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_Base_SetConfig+0xf8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <TIM_Base_SetConfig+0x140>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <TIM_Base_SetConfig+0xf8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <TIM_Base_SetConfig+0x144>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_Base_SetConfig+0xf8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <TIM_Base_SetConfig+0x148>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4b37      	ldr	r3, [pc, #220]	@ (8004bd8 <TIM_OC1_SetConfig+0x108>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0302 	bic.w	r3, r3, #2
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a2d      	ldr	r2, [pc, #180]	@ (8004bdc <TIM_OC1_SetConfig+0x10c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00f      	beq.n	8004b4c <TIM_OC1_SetConfig+0x7c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004be0 <TIM_OC1_SetConfig+0x110>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <TIM_OC1_SetConfig+0x7c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	@ (8004be4 <TIM_OC1_SetConfig+0x114>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <TIM_OC1_SetConfig+0x7c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004be8 <TIM_OC1_SetConfig+0x118>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_OC1_SetConfig+0x7c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a29      	ldr	r2, [pc, #164]	@ (8004bec <TIM_OC1_SetConfig+0x11c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10c      	bne.n	8004b66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0308 	bic.w	r3, r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <TIM_OC1_SetConfig+0x10c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00f      	beq.n	8004b8e <TIM_OC1_SetConfig+0xbe>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1b      	ldr	r2, [pc, #108]	@ (8004be0 <TIM_OC1_SetConfig+0x110>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00b      	beq.n	8004b8e <TIM_OC1_SetConfig+0xbe>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1a      	ldr	r2, [pc, #104]	@ (8004be4 <TIM_OC1_SetConfig+0x114>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <TIM_OC1_SetConfig+0xbe>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <TIM_OC1_SetConfig+0x118>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_OC1_SetConfig+0xbe>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <TIM_OC1_SetConfig+0x11c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	fffeff8f 	.word	0xfffeff8f
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800

08004bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f023 0210 	bic.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <TIM_OC2_SetConfig+0xfc>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0320 	bic.w	r3, r3, #32
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a29      	ldr	r2, [pc, #164]	@ (8004cf0 <TIM_OC2_SetConfig+0x100>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC2_SetConfig+0x68>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a28      	ldr	r2, [pc, #160]	@ (8004cf4 <TIM_OC2_SetConfig+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10d      	bne.n	8004c74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <TIM_OC2_SetConfig+0x100>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_OC2_SetConfig+0xac>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <TIM_OC2_SetConfig+0x104>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_OC2_SetConfig+0xac>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf8 <TIM_OC2_SetConfig+0x108>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_OC2_SetConfig+0xac>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cfc <TIM_OC2_SetConfig+0x10c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_OC2_SetConfig+0xac>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1a      	ldr	r2, [pc, #104]	@ (8004d00 <TIM_OC2_SetConfig+0x110>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d113      	bne.n	8004cc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	feff8fff 	.word	0xfeff8fff
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40010400 	.word	0x40010400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40014400 	.word	0x40014400
 8004d00:	40014800 	.word	0x40014800

08004d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <TIM_OC3_SetConfig+0xf8>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <TIM_OC3_SetConfig+0xfc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_OC3_SetConfig+0x66>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a27      	ldr	r2, [pc, #156]	@ (8004e04 <TIM_OC3_SetConfig+0x100>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10d      	bne.n	8004d86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <TIM_OC3_SetConfig+0xfc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_OC3_SetConfig+0xaa>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <TIM_OC3_SetConfig+0x100>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_OC3_SetConfig+0xaa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <TIM_OC3_SetConfig+0x104>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_OC3_SetConfig+0xaa>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <TIM_OC3_SetConfig+0x108>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_OC3_SetConfig+0xaa>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <TIM_OC3_SetConfig+0x10c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d113      	bne.n	8004dd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	fffeff8f 	.word	0xfffeff8f
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40010400 	.word	0x40010400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <TIM_OC4_SetConfig+0xbc>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <TIM_OC4_SetConfig+0xc0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_OC4_SetConfig+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <TIM_OC4_SetConfig+0xc4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC4_SetConfig+0x80>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <TIM_OC4_SetConfig+0xc8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC4_SetConfig+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a16      	ldr	r2, [pc, #88]	@ (8004ee0 <TIM_OC4_SetConfig+0xcc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC4_SetConfig+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ee4 <TIM_OC4_SetConfig+0xd0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d109      	bne.n	8004ea8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	feff8fff 	.word	0xfeff8fff
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4b21      	ldr	r3, [pc, #132]	@ (8004f98 <TIM_OC5_SetConfig+0xb0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a18      	ldr	r2, [pc, #96]	@ (8004f9c <TIM_OC5_SetConfig+0xb4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_OC5_SetConfig+0x76>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a17      	ldr	r2, [pc, #92]	@ (8004fa0 <TIM_OC5_SetConfig+0xb8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_OC5_SetConfig+0x76>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a16      	ldr	r2, [pc, #88]	@ (8004fa4 <TIM_OC5_SetConfig+0xbc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_OC5_SetConfig+0x76>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a15      	ldr	r2, [pc, #84]	@ (8004fa8 <TIM_OC5_SetConfig+0xc0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC5_SetConfig+0x76>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <TIM_OC5_SetConfig+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d109      	bne.n	8004f72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	fffeff8f 	.word	0xfffeff8f
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <TIM_OC6_SetConfig+0xb4>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <TIM_OC6_SetConfig+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_OC6_SetConfig+0x78>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a18      	ldr	r2, [pc, #96]	@ (800506c <TIM_OC6_SetConfig+0xbc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_OC6_SetConfig+0x78>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <TIM_OC6_SetConfig+0xc0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC6_SetConfig+0x78>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <TIM_OC6_SetConfig+0xc4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC6_SetConfig+0x78>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <TIM_OC6_SetConfig+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	feff8fff 	.word	0xfeff8fff
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2201      	movs	r2, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e042      	b.n	800515e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fb febc 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2224      	movs	r2, #36	@ 0x24
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0201 	bic.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd91 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f826 	bl	8005168 <UART_SetConfig>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e01b      	b.n	800515e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fe10 	bl	8005d7c <UART_CheckIdleState>
 800515c:	4603      	mov	r3, r0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b092      	sub	sp, #72	@ 0x48
 800516e:	af00      	add	r7, sp, #0
 8005170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4bbe      	ldr	r3, [pc, #760]	@ (8005490 <UART_SetConfig+0x328>)
 8005198:	4013      	ands	r3, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4ab3      	ldr	r2, [pc, #716]	@ (8005494 <UART_SetConfig+0x32c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d0:	4313      	orrs	r3, r2
 80051d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4baf      	ldr	r3, [pc, #700]	@ (8005498 <UART_SetConfig+0x330>)
 80051dc:	4013      	ands	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	f023 010f 	bic.w	r1, r3, #15
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4aa6      	ldr	r2, [pc, #664]	@ (800549c <UART_SetConfig+0x334>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d177      	bne.n	80052f8 <UART_SetConfig+0x190>
 8005208:	4ba5      	ldr	r3, [pc, #660]	@ (80054a0 <UART_SetConfig+0x338>)
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005210:	2b28      	cmp	r3, #40	@ 0x28
 8005212:	d86d      	bhi.n	80052f0 <UART_SetConfig+0x188>
 8005214:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0xb4>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	080052c1 	.word	0x080052c1
 8005220:	080052f1 	.word	0x080052f1
 8005224:	080052f1 	.word	0x080052f1
 8005228:	080052f1 	.word	0x080052f1
 800522c:	080052f1 	.word	0x080052f1
 8005230:	080052f1 	.word	0x080052f1
 8005234:	080052f1 	.word	0x080052f1
 8005238:	080052f1 	.word	0x080052f1
 800523c:	080052c9 	.word	0x080052c9
 8005240:	080052f1 	.word	0x080052f1
 8005244:	080052f1 	.word	0x080052f1
 8005248:	080052f1 	.word	0x080052f1
 800524c:	080052f1 	.word	0x080052f1
 8005250:	080052f1 	.word	0x080052f1
 8005254:	080052f1 	.word	0x080052f1
 8005258:	080052f1 	.word	0x080052f1
 800525c:	080052d1 	.word	0x080052d1
 8005260:	080052f1 	.word	0x080052f1
 8005264:	080052f1 	.word	0x080052f1
 8005268:	080052f1 	.word	0x080052f1
 800526c:	080052f1 	.word	0x080052f1
 8005270:	080052f1 	.word	0x080052f1
 8005274:	080052f1 	.word	0x080052f1
 8005278:	080052f1 	.word	0x080052f1
 800527c:	080052d9 	.word	0x080052d9
 8005280:	080052f1 	.word	0x080052f1
 8005284:	080052f1 	.word	0x080052f1
 8005288:	080052f1 	.word	0x080052f1
 800528c:	080052f1 	.word	0x080052f1
 8005290:	080052f1 	.word	0x080052f1
 8005294:	080052f1 	.word	0x080052f1
 8005298:	080052f1 	.word	0x080052f1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052f1 	.word	0x080052f1
 80052a4:	080052f1 	.word	0x080052f1
 80052a8:	080052f1 	.word	0x080052f1
 80052ac:	080052f1 	.word	0x080052f1
 80052b0:	080052f1 	.word	0x080052f1
 80052b4:	080052f1 	.word	0x080052f1
 80052b8:	080052f1 	.word	0x080052f1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e222      	b.n	800570e <UART_SetConfig+0x5a6>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e21e      	b.n	800570e <UART_SetConfig+0x5a6>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e21a      	b.n	800570e <UART_SetConfig+0x5a6>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e216      	b.n	800570e <UART_SetConfig+0x5a6>
 80052e0:	2320      	movs	r3, #32
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e212      	b.n	800570e <UART_SetConfig+0x5a6>
 80052e8:	2340      	movs	r3, #64	@ 0x40
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e20e      	b.n	800570e <UART_SetConfig+0x5a6>
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e20a      	b.n	800570e <UART_SetConfig+0x5a6>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a69      	ldr	r2, [pc, #420]	@ (80054a4 <UART_SetConfig+0x33c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d130      	bne.n	8005364 <UART_SetConfig+0x1fc>
 8005302:	4b67      	ldr	r3, [pc, #412]	@ (80054a0 <UART_SetConfig+0x338>)
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b05      	cmp	r3, #5
 800530c:	d826      	bhi.n	800535c <UART_SetConfig+0x1f4>
 800530e:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <UART_SetConfig+0x1ac>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	0800532d 	.word	0x0800532d
 8005318:	08005335 	.word	0x08005335
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e1ec      	b.n	800570e <UART_SetConfig+0x5a6>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e1e8      	b.n	800570e <UART_SetConfig+0x5a6>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e1e4      	b.n	800570e <UART_SetConfig+0x5a6>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e1e0      	b.n	800570e <UART_SetConfig+0x5a6>
 800534c:	2320      	movs	r3, #32
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e1dc      	b.n	800570e <UART_SetConfig+0x5a6>
 8005354:	2340      	movs	r3, #64	@ 0x40
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e1d8      	b.n	800570e <UART_SetConfig+0x5a6>
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005362:	e1d4      	b.n	800570e <UART_SetConfig+0x5a6>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a4f      	ldr	r2, [pc, #316]	@ (80054a8 <UART_SetConfig+0x340>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d130      	bne.n	80053d0 <UART_SetConfig+0x268>
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <UART_SetConfig+0x338>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b05      	cmp	r3, #5
 8005378:	d826      	bhi.n	80053c8 <UART_SetConfig+0x260>
 800537a:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <UART_SetConfig+0x218>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005399 	.word	0x08005399
 8005384:	080053a1 	.word	0x080053a1
 8005388:	080053a9 	.word	0x080053a9
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e1b6      	b.n	800570e <UART_SetConfig+0x5a6>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e1b2      	b.n	800570e <UART_SetConfig+0x5a6>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e1ae      	b.n	800570e <UART_SetConfig+0x5a6>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e1aa      	b.n	800570e <UART_SetConfig+0x5a6>
 80053b8:	2320      	movs	r3, #32
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e1a6      	b.n	800570e <UART_SetConfig+0x5a6>
 80053c0:	2340      	movs	r3, #64	@ 0x40
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e1a2      	b.n	800570e <UART_SetConfig+0x5a6>
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e19e      	b.n	800570e <UART_SetConfig+0x5a6>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	@ (80054ac <UART_SetConfig+0x344>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d130      	bne.n	800543c <UART_SetConfig+0x2d4>
 80053da:	4b31      	ldr	r3, [pc, #196]	@ (80054a0 <UART_SetConfig+0x338>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d826      	bhi.n	8005434 <UART_SetConfig+0x2cc>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0x284>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e180      	b.n	800570e <UART_SetConfig+0x5a6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e17c      	b.n	800570e <UART_SetConfig+0x5a6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e178      	b.n	800570e <UART_SetConfig+0x5a6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e174      	b.n	800570e <UART_SetConfig+0x5a6>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e170      	b.n	800570e <UART_SetConfig+0x5a6>
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e16c      	b.n	800570e <UART_SetConfig+0x5a6>
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e168      	b.n	800570e <UART_SetConfig+0x5a6>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <UART_SetConfig+0x348>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d142      	bne.n	80054cc <UART_SetConfig+0x364>
 8005446:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <UART_SetConfig+0x338>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b05      	cmp	r3, #5
 8005450:	d838      	bhi.n	80054c4 <UART_SetConfig+0x35c>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x2f0>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005471 	.word	0x08005471
 800545c:	08005479 	.word	0x08005479
 8005460:	08005481 	.word	0x08005481
 8005464:	08005489 	.word	0x08005489
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054bd 	.word	0x080054bd
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e14a      	b.n	800570e <UART_SetConfig+0x5a6>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e146      	b.n	800570e <UART_SetConfig+0x5a6>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e142      	b.n	800570e <UART_SetConfig+0x5a6>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e13e      	b.n	800570e <UART_SetConfig+0x5a6>
 8005490:	cfff69f3 	.word	0xcfff69f3
 8005494:	58000c00 	.word	0x58000c00
 8005498:	11fff4ff 	.word	0x11fff4ff
 800549c:	40011000 	.word	0x40011000
 80054a0:	58024400 	.word	0x58024400
 80054a4:	40004400 	.word	0x40004400
 80054a8:	40004800 	.word	0x40004800
 80054ac:	40004c00 	.word	0x40004c00
 80054b0:	40005000 	.word	0x40005000
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e128      	b.n	800570e <UART_SetConfig+0x5a6>
 80054bc:	2340      	movs	r3, #64	@ 0x40
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e124      	b.n	800570e <UART_SetConfig+0x5a6>
 80054c4:	2380      	movs	r3, #128	@ 0x80
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e120      	b.n	800570e <UART_SetConfig+0x5a6>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4acb      	ldr	r2, [pc, #812]	@ (8005800 <UART_SetConfig+0x698>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d176      	bne.n	80055c4 <UART_SetConfig+0x45c>
 80054d6:	4bcb      	ldr	r3, [pc, #812]	@ (8005804 <UART_SetConfig+0x69c>)
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054de:	2b28      	cmp	r3, #40	@ 0x28
 80054e0:	d86c      	bhi.n	80055bc <UART_SetConfig+0x454>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <UART_SetConfig+0x380>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	080055bd 	.word	0x080055bd
 80054f0:	080055bd 	.word	0x080055bd
 80054f4:	080055bd 	.word	0x080055bd
 80054f8:	080055bd 	.word	0x080055bd
 80054fc:	080055bd 	.word	0x080055bd
 8005500:	080055bd 	.word	0x080055bd
 8005504:	080055bd 	.word	0x080055bd
 8005508:	08005595 	.word	0x08005595
 800550c:	080055bd 	.word	0x080055bd
 8005510:	080055bd 	.word	0x080055bd
 8005514:	080055bd 	.word	0x080055bd
 8005518:	080055bd 	.word	0x080055bd
 800551c:	080055bd 	.word	0x080055bd
 8005520:	080055bd 	.word	0x080055bd
 8005524:	080055bd 	.word	0x080055bd
 8005528:	0800559d 	.word	0x0800559d
 800552c:	080055bd 	.word	0x080055bd
 8005530:	080055bd 	.word	0x080055bd
 8005534:	080055bd 	.word	0x080055bd
 8005538:	080055bd 	.word	0x080055bd
 800553c:	080055bd 	.word	0x080055bd
 8005540:	080055bd 	.word	0x080055bd
 8005544:	080055bd 	.word	0x080055bd
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055bd 	.word	0x080055bd
 8005550:	080055bd 	.word	0x080055bd
 8005554:	080055bd 	.word	0x080055bd
 8005558:	080055bd 	.word	0x080055bd
 800555c:	080055bd 	.word	0x080055bd
 8005560:	080055bd 	.word	0x080055bd
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055ad 	.word	0x080055ad
 800556c:	080055bd 	.word	0x080055bd
 8005570:	080055bd 	.word	0x080055bd
 8005574:	080055bd 	.word	0x080055bd
 8005578:	080055bd 	.word	0x080055bd
 800557c:	080055bd 	.word	0x080055bd
 8005580:	080055bd 	.word	0x080055bd
 8005584:	080055bd 	.word	0x080055bd
 8005588:	080055b5 	.word	0x080055b5
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e0bc      	b.n	800570e <UART_SetConfig+0x5a6>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e0b8      	b.n	800570e <UART_SetConfig+0x5a6>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e0b4      	b.n	800570e <UART_SetConfig+0x5a6>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e0b0      	b.n	800570e <UART_SetConfig+0x5a6>
 80055ac:	2320      	movs	r3, #32
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e0ac      	b.n	800570e <UART_SetConfig+0x5a6>
 80055b4:	2340      	movs	r3, #64	@ 0x40
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e0a8      	b.n	800570e <UART_SetConfig+0x5a6>
 80055bc:	2380      	movs	r3, #128	@ 0x80
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e0a4      	b.n	800570e <UART_SetConfig+0x5a6>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a8f      	ldr	r2, [pc, #572]	@ (8005808 <UART_SetConfig+0x6a0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d130      	bne.n	8005630 <UART_SetConfig+0x4c8>
 80055ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005804 <UART_SetConfig+0x69c>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d826      	bhi.n	8005628 <UART_SetConfig+0x4c0>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0x478>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f9 	.word	0x080055f9
 80055e4:	08005601 	.word	0x08005601
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e086      	b.n	800570e <UART_SetConfig+0x5a6>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e082      	b.n	800570e <UART_SetConfig+0x5a6>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e07e      	b.n	800570e <UART_SetConfig+0x5a6>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e07a      	b.n	800570e <UART_SetConfig+0x5a6>
 8005618:	2320      	movs	r3, #32
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e076      	b.n	800570e <UART_SetConfig+0x5a6>
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e072      	b.n	800570e <UART_SetConfig+0x5a6>
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e06e      	b.n	800570e <UART_SetConfig+0x5a6>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a75      	ldr	r2, [pc, #468]	@ (800580c <UART_SetConfig+0x6a4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d130      	bne.n	800569c <UART_SetConfig+0x534>
 800563a:	4b72      	ldr	r3, [pc, #456]	@ (8005804 <UART_SetConfig+0x69c>)
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b05      	cmp	r3, #5
 8005644:	d826      	bhi.n	8005694 <UART_SetConfig+0x52c>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0x4e4>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005665 	.word	0x08005665
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005675 	.word	0x08005675
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e050      	b.n	800570e <UART_SetConfig+0x5a6>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e04c      	b.n	800570e <UART_SetConfig+0x5a6>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e048      	b.n	800570e <UART_SetConfig+0x5a6>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e044      	b.n	800570e <UART_SetConfig+0x5a6>
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e040      	b.n	800570e <UART_SetConfig+0x5a6>
 800568c:	2340      	movs	r3, #64	@ 0x40
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e03c      	b.n	800570e <UART_SetConfig+0x5a6>
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e038      	b.n	800570e <UART_SetConfig+0x5a6>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5b      	ldr	r2, [pc, #364]	@ (8005810 <UART_SetConfig+0x6a8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d130      	bne.n	8005708 <UART_SetConfig+0x5a0>
 80056a6:	4b57      	ldr	r3, [pc, #348]	@ (8005804 <UART_SetConfig+0x69c>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d826      	bhi.n	8005700 <UART_SetConfig+0x598>
 80056b2:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <UART_SetConfig+0x550>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056e1 	.word	0x080056e1
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e01a      	b.n	800570e <UART_SetConfig+0x5a6>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e016      	b.n	800570e <UART_SetConfig+0x5a6>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e012      	b.n	800570e <UART_SetConfig+0x5a6>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e00e      	b.n	800570e <UART_SetConfig+0x5a6>
 80056f0:	2320      	movs	r3, #32
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e00a      	b.n	800570e <UART_SetConfig+0x5a6>
 80056f8:	2340      	movs	r3, #64	@ 0x40
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e006      	b.n	800570e <UART_SetConfig+0x5a6>
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e002      	b.n	800570e <UART_SetConfig+0x5a6>
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3f      	ldr	r2, [pc, #252]	@ (8005810 <UART_SetConfig+0x6a8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	f040 80f8 	bne.w	800590a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800571a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800571e:	2b20      	cmp	r3, #32
 8005720:	dc46      	bgt.n	80057b0 <UART_SetConfig+0x648>
 8005722:	2b02      	cmp	r3, #2
 8005724:	f2c0 8082 	blt.w	800582c <UART_SetConfig+0x6c4>
 8005728:	3b02      	subs	r3, #2
 800572a:	2b1e      	cmp	r3, #30
 800572c:	d87e      	bhi.n	800582c <UART_SetConfig+0x6c4>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x5cc>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	080057b7 	.word	0x080057b7
 8005738:	0800582d 	.word	0x0800582d
 800573c:	080057bf 	.word	0x080057bf
 8005740:	0800582d 	.word	0x0800582d
 8005744:	0800582d 	.word	0x0800582d
 8005748:	0800582d 	.word	0x0800582d
 800574c:	080057cf 	.word	0x080057cf
 8005750:	0800582d 	.word	0x0800582d
 8005754:	0800582d 	.word	0x0800582d
 8005758:	0800582d 	.word	0x0800582d
 800575c:	0800582d 	.word	0x0800582d
 8005760:	0800582d 	.word	0x0800582d
 8005764:	0800582d 	.word	0x0800582d
 8005768:	0800582d 	.word	0x0800582d
 800576c:	080057df 	.word	0x080057df
 8005770:	0800582d 	.word	0x0800582d
 8005774:	0800582d 	.word	0x0800582d
 8005778:	0800582d 	.word	0x0800582d
 800577c:	0800582d 	.word	0x0800582d
 8005780:	0800582d 	.word	0x0800582d
 8005784:	0800582d 	.word	0x0800582d
 8005788:	0800582d 	.word	0x0800582d
 800578c:	0800582d 	.word	0x0800582d
 8005790:	0800582d 	.word	0x0800582d
 8005794:	0800582d 	.word	0x0800582d
 8005798:	0800582d 	.word	0x0800582d
 800579c:	0800582d 	.word	0x0800582d
 80057a0:	0800582d 	.word	0x0800582d
 80057a4:	0800582d 	.word	0x0800582d
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	0800581f 	.word	0x0800581f
 80057b0:	2b40      	cmp	r3, #64	@ 0x40
 80057b2:	d037      	beq.n	8005824 <UART_SetConfig+0x6bc>
 80057b4:	e03a      	b.n	800582c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057b6:	f7fe f9e9 	bl	8003b8c <HAL_RCCEx_GetD3PCLK1Freq>
 80057ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057bc:	e03c      	b.n	8005838 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f9f8 	bl	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057cc:	e034      	b.n	8005838 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fb44 	bl	8003e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057dc:	e02c      	b.n	8005838 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057de:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <UART_SetConfig+0x69c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ea:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <UART_SetConfig+0x69c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	4a07      	ldr	r2, [pc, #28]	@ (8005814 <UART_SetConfig+0x6ac>)
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057fc:	e01c      	b.n	8005838 <UART_SetConfig+0x6d0>
 80057fe:	bf00      	nop
 8005800:	40011400 	.word	0x40011400
 8005804:	58024400 	.word	0x58024400
 8005808:	40007800 	.word	0x40007800
 800580c:	40007c00 	.word	0x40007c00
 8005810:	58000c00 	.word	0x58000c00
 8005814:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005818:	4b9d      	ldr	r3, [pc, #628]	@ (8005a90 <UART_SetConfig+0x928>)
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800581e:	4b9d      	ldr	r3, [pc, #628]	@ (8005a94 <UART_SetConfig+0x92c>)
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005822:	e009      	b.n	8005838 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582a:	e005      	b.n	8005838 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005836:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 81de 	beq.w	8005bfc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	4a94      	ldr	r2, [pc, #592]	@ (8005a98 <UART_SetConfig+0x930>)
 8005846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584a:	461a      	mov	r2, r3
 800584c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800584e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005860:	429a      	cmp	r2, r3
 8005862:	d305      	bcc.n	8005870 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005876:	e1c1      	b.n	8005bfc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587a:	2200      	movs	r2, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	60fa      	str	r2, [r7, #12]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	4a84      	ldr	r2, [pc, #528]	@ (8005a98 <UART_SetConfig+0x930>)
 8005886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800588a:	b29b      	uxth	r3, r3
 800588c:	2200      	movs	r2, #0
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800589a:	f7fa fd1d 	bl	80002d8 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	020b      	lsls	r3, r1, #8
 80058b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058b4:	0202      	lsls	r2, r0, #8
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	6849      	ldr	r1, [r1, #4]
 80058ba:	0849      	lsrs	r1, r1, #1
 80058bc:	2000      	movs	r0, #0
 80058be:	460c      	mov	r4, r1
 80058c0:	4605      	mov	r5, r0
 80058c2:	eb12 0804 	adds.w	r8, r2, r4
 80058c6:	eb43 0905 	adc.w	r9, r3, r5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	469a      	mov	sl, r3
 80058d2:	4693      	mov	fp, r2
 80058d4:	4652      	mov	r2, sl
 80058d6:	465b      	mov	r3, fp
 80058d8:	4640      	mov	r0, r8
 80058da:	4649      	mov	r1, r9
 80058dc:	f7fa fcfc 	bl	80002d8 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ee:	d308      	bcc.n	8005902 <UART_SetConfig+0x79a>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f6:	d204      	bcs.n	8005902 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	e17c      	b.n	8005bfc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005908:	e178      	b.n	8005bfc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005912:	f040 80c5 	bne.w	8005aa0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800591a:	2b20      	cmp	r3, #32
 800591c:	dc48      	bgt.n	80059b0 <UART_SetConfig+0x848>
 800591e:	2b00      	cmp	r3, #0
 8005920:	db7b      	blt.n	8005a1a <UART_SetConfig+0x8b2>
 8005922:	2b20      	cmp	r3, #32
 8005924:	d879      	bhi.n	8005a1a <UART_SetConfig+0x8b2>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x7c4>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	080059b7 	.word	0x080059b7
 8005930:	080059bf 	.word	0x080059bf
 8005934:	08005a1b 	.word	0x08005a1b
 8005938:	08005a1b 	.word	0x08005a1b
 800593c:	080059c7 	.word	0x080059c7
 8005940:	08005a1b 	.word	0x08005a1b
 8005944:	08005a1b 	.word	0x08005a1b
 8005948:	08005a1b 	.word	0x08005a1b
 800594c:	080059d7 	.word	0x080059d7
 8005950:	08005a1b 	.word	0x08005a1b
 8005954:	08005a1b 	.word	0x08005a1b
 8005958:	08005a1b 	.word	0x08005a1b
 800595c:	08005a1b 	.word	0x08005a1b
 8005960:	08005a1b 	.word	0x08005a1b
 8005964:	08005a1b 	.word	0x08005a1b
 8005968:	08005a1b 	.word	0x08005a1b
 800596c:	080059e7 	.word	0x080059e7
 8005970:	08005a1b 	.word	0x08005a1b
 8005974:	08005a1b 	.word	0x08005a1b
 8005978:	08005a1b 	.word	0x08005a1b
 800597c:	08005a1b 	.word	0x08005a1b
 8005980:	08005a1b 	.word	0x08005a1b
 8005984:	08005a1b 	.word	0x08005a1b
 8005988:	08005a1b 	.word	0x08005a1b
 800598c:	08005a1b 	.word	0x08005a1b
 8005990:	08005a1b 	.word	0x08005a1b
 8005994:	08005a1b 	.word	0x08005a1b
 8005998:	08005a1b 	.word	0x08005a1b
 800599c:	08005a1b 	.word	0x08005a1b
 80059a0:	08005a1b 	.word	0x08005a1b
 80059a4:	08005a1b 	.word	0x08005a1b
 80059a8:	08005a1b 	.word	0x08005a1b
 80059ac:	08005a0d 	.word	0x08005a0d
 80059b0:	2b40      	cmp	r3, #64	@ 0x40
 80059b2:	d02e      	beq.n	8005a12 <UART_SetConfig+0x8aa>
 80059b4:	e031      	b.n	8005a1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b6:	f7fc feb3 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 80059ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059bc:	e033      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059be:	f7fc fec5 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 80059c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059c4:	e02f      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f8f4 	bl	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d4:	e027      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d6:	f107 0318 	add.w	r3, r7, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fa40 	bl	8003e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e4:	e01f      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a9c <UART_SetConfig+0x934>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <UART_SetConfig+0x934>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a24      	ldr	r2, [pc, #144]	@ (8005a90 <UART_SetConfig+0x928>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a04:	e00f      	b.n	8005a26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a06:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <UART_SetConfig+0x928>)
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0a:	e00c      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a0c:	4b21      	ldr	r3, [pc, #132]	@ (8005a94 <UART_SetConfig+0x92c>)
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80e7 	beq.w	8005bfc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	4a19      	ldr	r2, [pc, #100]	@ (8005a98 <UART_SetConfig+0x930>)
 8005a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d916      	bls.n	8005a88 <UART_SetConfig+0x920>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d212      	bcs.n	8005a88 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f023 030f 	bic.w	r3, r3, #15
 8005a6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e0b9      	b.n	8005bfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a8e:	e0b5      	b.n	8005bfc <UART_SetConfig+0xa94>
 8005a90:	03d09000 	.word	0x03d09000
 8005a94:	003d0900 	.word	0x003d0900
 8005a98:	08006300 	.word	0x08006300
 8005a9c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	dc49      	bgt.n	8005b3c <UART_SetConfig+0x9d4>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db7c      	blt.n	8005ba6 <UART_SetConfig+0xa3e>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d87a      	bhi.n	8005ba6 <UART_SetConfig+0xa3e>
 8005ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab8 <UART_SetConfig+0x950>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005b43 	.word	0x08005b43
 8005abc:	08005b4b 	.word	0x08005b4b
 8005ac0:	08005ba7 	.word	0x08005ba7
 8005ac4:	08005ba7 	.word	0x08005ba7
 8005ac8:	08005b53 	.word	0x08005b53
 8005acc:	08005ba7 	.word	0x08005ba7
 8005ad0:	08005ba7 	.word	0x08005ba7
 8005ad4:	08005ba7 	.word	0x08005ba7
 8005ad8:	08005b63 	.word	0x08005b63
 8005adc:	08005ba7 	.word	0x08005ba7
 8005ae0:	08005ba7 	.word	0x08005ba7
 8005ae4:	08005ba7 	.word	0x08005ba7
 8005ae8:	08005ba7 	.word	0x08005ba7
 8005aec:	08005ba7 	.word	0x08005ba7
 8005af0:	08005ba7 	.word	0x08005ba7
 8005af4:	08005ba7 	.word	0x08005ba7
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005ba7 	.word	0x08005ba7
 8005b00:	08005ba7 	.word	0x08005ba7
 8005b04:	08005ba7 	.word	0x08005ba7
 8005b08:	08005ba7 	.word	0x08005ba7
 8005b0c:	08005ba7 	.word	0x08005ba7
 8005b10:	08005ba7 	.word	0x08005ba7
 8005b14:	08005ba7 	.word	0x08005ba7
 8005b18:	08005ba7 	.word	0x08005ba7
 8005b1c:	08005ba7 	.word	0x08005ba7
 8005b20:	08005ba7 	.word	0x08005ba7
 8005b24:	08005ba7 	.word	0x08005ba7
 8005b28:	08005ba7 	.word	0x08005ba7
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005ba7 	.word	0x08005ba7
 8005b34:	08005ba7 	.word	0x08005ba7
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d02e      	beq.n	8005b9e <UART_SetConfig+0xa36>
 8005b40:	e031      	b.n	8005ba6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fc fded 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8005b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b48:	e033      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4a:	f7fc fdff 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8005b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b50:	e02f      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe f82e 	bl	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b60:	e027      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b62:	f107 0318 	add.w	r3, r7, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe f97a 	bl	8003e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b70:	e01f      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b72:	4b2d      	ldr	r3, [pc, #180]	@ (8005c28 <UART_SetConfig+0xac0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c28 <UART_SetConfig+0xac0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	08db      	lsrs	r3, r3, #3
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	4a28      	ldr	r2, [pc, #160]	@ (8005c2c <UART_SetConfig+0xac4>)
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b90:	e00f      	b.n	8005bb2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005b92:	4b26      	ldr	r3, [pc, #152]	@ (8005c2c <UART_SetConfig+0xac4>)
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b96:	e00c      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b98:	4b25      	ldr	r3, [pc, #148]	@ (8005c30 <UART_SetConfig+0xac8>)
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d021      	beq.n	8005bfc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <UART_SetConfig+0xacc>)
 8005bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	441a      	add	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d909      	bls.n	8005bf6 <UART_SetConfig+0xa8e>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be8:	d205      	bcs.n	8005bf6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
 8005bf4:	e002      	b.n	8005bfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c18:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3748      	adds	r7, #72	@ 0x48
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	03d09000 	.word	0x03d09000
 8005c30:	003d0900 	.word	0x003d0900
 8005c34:	08006300 	.word	0x08006300

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d36:	d10a      	bne.n	8005d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b098      	sub	sp, #96	@ 0x60
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d8c:	f7fb f9b6 	bl	80010fc <HAL_GetTick>
 8005d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d12f      	bne.n	8005e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da8:	2200      	movs	r2, #0
 8005daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f88e 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d022      	beq.n	8005e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e063      	b.n	8005ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d149      	bne.n	8005ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f857 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03c      	beq.n	8005ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	623b      	str	r3, [r7, #32]
   return(result);
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e7a:	61fa      	str	r2, [r7, #28]
 8005e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	69b9      	ldr	r1, [r7, #24]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	617b      	str	r3, [r7, #20]
   return(result);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e012      	b.n	8005ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3758      	adds	r7, #88	@ 0x58
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	e04f      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d04b      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fb f907 	bl	80010fc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e04e      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d037      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b80      	cmp	r3, #128	@ 0x80
 8005f16:	d034      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d031      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d110      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f839 	bl	8005fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e029      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f5c:	d111      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f81f 	bl	8005fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00f      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d0a0      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	@ 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8006074 <UART_EndRxTransfer+0xc8>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800600c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d118      	bne.n	8006054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	647b      	str	r3, [r7, #68]	@ 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006068:	bf00      	nop
 800606a:	3754      	adds	r7, #84	@ 0x54
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	effffffe 	.word	0xeffffffe

08006078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UARTEx_DisableFifoMode+0x16>
 800608a:	2302      	movs	r3, #2
 800608c:	e027      	b.n	80060de <HAL_UARTEx_DisableFifoMode+0x66>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	@ 0x24
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060fe:	2302      	movs	r3, #2
 8006100:	e02d      	b.n	800615e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	@ 0x24
 800610e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f850 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800617a:	2302      	movs	r3, #2
 800617c:	e02d      	b.n	80061da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	@ 0x24
 800618a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f812 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006204:	e031      	b.n	800626a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006206:	2310      	movs	r3, #16
 8006208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800620a:	2310      	movs	r3, #16
 800620c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0f5b      	lsrs	r3, r3, #29
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	7b3a      	ldrb	r2, [r7, #12]
 8006232:	4911      	ldr	r1, [pc, #68]	@ (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006234:	5c8a      	ldrb	r2, [r1, r2]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800623a:	7b3a      	ldrb	r2, [r7, #12]
 800623c:	490f      	ldr	r1, [pc, #60]	@ (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006240:	fb93 f3f2 	sdiv	r3, r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	7b7a      	ldrb	r2, [r7, #13]
 8006250:	4909      	ldr	r1, [pc, #36]	@ (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006252:	5c8a      	ldrb	r2, [r1, r2]
 8006254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006258:	7b7a      	ldrb	r2, [r7, #13]
 800625a:	4908      	ldr	r1, [pc, #32]	@ (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800625c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800625e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	08006318 	.word	0x08006318
 800627c:	08006320 	.word	0x08006320

08006280 <memset>:
 8006280:	4402      	add	r2, r0
 8006282:	4603      	mov	r3, r0
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	f803 1b01 	strb.w	r1, [r3], #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4d0d      	ldr	r5, [pc, #52]	@ (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	@ (80062cc <__libc_init_array+0x3c>)
 8006296:	1b64      	subs	r4, r4, r5
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2600      	movs	r6, #0
 800629c:	42a6      	cmp	r6, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4d0b      	ldr	r5, [pc, #44]	@ (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	@ (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 f818 	bl	80062d8 <_init>
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2600      	movs	r6, #0
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b8:	4798      	blx	r3
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c2:	4798      	blx	r3
 80062c4:	3601      	adds	r6, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08006330 	.word	0x08006330
 80062cc:	08006330 	.word	0x08006330
 80062d0:	08006330 	.word	0x08006330
 80062d4:	08006334 	.word	0x08006334

080062d8 <_init>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr

080062e4 <_fini>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr
