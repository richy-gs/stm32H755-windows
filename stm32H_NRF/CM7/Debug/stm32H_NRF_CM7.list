
stm32H_NRF_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a34  08003a34  00004a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a44  08003a44  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003a44  08003a44  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a44  08003a44  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00004a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a48  08003a48  00004a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08003a4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  24000010  08003a5c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000b8  08003a5c  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68f  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aee  00000000  00000000  000106cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  000121c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000747  00000000  00000000  00012b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038b3e  00000000  00000000  000132c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c61b  00000000  00000000  0004be05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176fd2  00000000  00000000  00058420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cf3f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000271c  00000000  00000000  001cf438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001d1b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003a1c 	.word	0x08003a1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003a1c 	.word	0x08003a1c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b23      	ldr	r3, [pc, #140]	@ (80004a0 <main+0x9c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f9f5 	bl	800081c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fad5 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f835 	bl	80004a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800043a:	f000 f8b1 	bl	80005a0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <main+0x9c>)
 8000440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000444:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <main+0x9c>)
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800044a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <main+0x9c>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fdf1 	bl	8001044 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fe07 	bl	8001078 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000470:	bf00      	nop
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <main+0x9c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d104      	bne.n	8000488 <main+0x84>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dcf4      	bgt.n	8000472 <main+0x6e>
if ( timeout < 0 )
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	da01      	bge.n	8000492 <main+0x8e>
{
Error_Handler();
 800048e:	f000 f9c5 	bl	800081c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f8f9 	bl	8000688 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000496:	f000 f8a1 	bl	80005dc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049a:	bf00      	nop
 800049c:	e7fd      	b.n	800049a <main+0x96>
 800049e:	bf00      	nop
 80004a0:	58024400 	.word	0x58024400

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09c      	sub	sp, #112	@ 0x70
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ae:	224c      	movs	r2, #76	@ 0x4c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f003 fa85 	bl	80039c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2220      	movs	r2, #32
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 fa7f 	bl	80039c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f000 fdeb 	bl	80010a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <SystemClock_Config+0xf4>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a31      	ldr	r2, [pc, #196]	@ (8000598 <SystemClock_Config+0xf4>)
 80004d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b2f      	ldr	r3, [pc, #188]	@ (8000598 <SystemClock_Config+0xf4>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4b2d      	ldr	r3, [pc, #180]	@ (800059c <SystemClock_Config+0xf8>)
 80004e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e8:	4a2c      	ldr	r2, [pc, #176]	@ (800059c <SystemClock_Config+0xf8>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004f0:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <SystemClock_Config+0xf8>)
 80004f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fc:	bf00      	nop
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <SystemClock_Config+0xf4>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800050a:	d1f8      	bne.n	80004fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800050c:	2303      	movs	r3, #3
 800050e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000510:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000514:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000516:	2301      	movs	r3, #1
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2340      	movs	r3, #64	@ 0x40
 800051c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	2302      	movs	r3, #2
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800052a:	23f0      	movs	r3, #240	@ 0xf0
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000532:	2305      	movs	r3, #5
 8000534:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000536:	2302      	movs	r3, #2
 8000538:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800053a:	2308      	movs	r3, #8
 800053c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800053e:	2300      	movs	r3, #0
 8000540:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fe02 	bl	8001154 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000556:	f000 f961 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	233f      	movs	r3, #63	@ 0x3f
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000566:	2308      	movs	r3, #8
 8000568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800056a:	2340      	movs	r3, #64	@ 0x40
 800056c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800056e:	2340      	movs	r3, #64	@ 0x40
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000578:	2340      	movs	r3, #64	@ 0x40
 800057a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2104      	movs	r1, #4
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fa41 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800058c:	f000 f946 	bl	800081c <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3770      	adds	r7, #112	@ 0x70
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58024800 	.word	0x58024800
 800059c:	58000400 	.word	0x58000400

080005a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0b0      	sub	sp, #192	@ 0xc0
 80005a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	22c0      	movs	r2, #192	@ 0xc0
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fa08 	bl	80039c2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80005b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fd4f 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 f924 	bl	800081c <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	37c0      	adds	r7, #192	@ 0xc0
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e0:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_SPI1_Init+0xa4>)
 80005e2:	4a28      	ldr	r2, [pc, #160]	@ (8000684 <MX_SPI1_Init+0xa8>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_SPI1_Init+0xa4>)
 80005e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_SPI1_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_SPI1_Init+0xa4>)
 80005f6:	220f      	movs	r2, #15
 80005f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_SPI1_Init+0xa4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000608:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800060c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000610:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000630:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000634:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000638:	2200      	movs	r2, #0
 800063a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800063e:	2200      	movs	r2, #0
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000644:	2200      	movs	r2, #0
 8000646:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000656:	2200      	movs	r2, #0
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_SPI1_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_SPI1_Init+0xa4>)
 800066e:	f003 f869 	bl	8003744 <HAL_SPI_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000678:	f000 f8d0 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2400002c 	.word	0x2400002c
 8000684:	40013000 	.word	0x40013000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b59      	ldr	r3, [pc, #356]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	4a57      	ldr	r2, [pc, #348]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ae:	4b55      	ldr	r3, [pc, #340]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b51      	ldr	r3, [pc, #324]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	4a50      	ldr	r2, [pc, #320]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b4a      	ldr	r3, [pc, #296]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	4a48      	ldr	r2, [pc, #288]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ea:	4b46      	ldr	r3, [pc, #280]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f8:	4b42      	ldr	r3, [pc, #264]	@ (8000804 <MX_GPIO_Init+0x17c>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fe:	4a41      	ldr	r2, [pc, #260]	@ (8000804 <MX_GPIO_Init+0x17c>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000708:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <MX_GPIO_Init+0x17c>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	4b3b      	ldr	r3, [pc, #236]	@ (8000804 <MX_GPIO_Init+0x17c>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	4a39      	ldr	r2, [pc, #228]	@ (8000804 <MX_GPIO_Init+0x17c>)
 800071e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000726:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <MX_GPIO_Init+0x17c>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000734:	2332      	movs	r3, #50	@ 0x32
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000744:	230b      	movs	r3, #11
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	482e      	ldr	r0, [pc, #184]	@ (8000808 <MX_GPIO_Init+0x180>)
 8000750:	f000 fac8 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000754:	2306      	movs	r3, #6
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4827      	ldr	r0, [pc, #156]	@ (800080c <MX_GPIO_Init+0x184>)
 8000770:	f000 fab8 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	481f      	ldr	r0, [pc, #124]	@ (8000810 <MX_GPIO_Init+0x188>)
 8000792:	f000 faa7 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007a8:	2307      	movs	r3, #7
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	@ (8000814 <MX_GPIO_Init+0x18c>)
 80007b4:	f000 fa96 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007b8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007ca:	230a      	movs	r3, #10
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_GPIO_Init+0x184>)
 80007d6:	f000 fa85 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007da:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4808      	ldr	r0, [pc, #32]	@ (8000818 <MX_GPIO_Init+0x190>)
 80007f8:	f000 fa74 	bl	8000ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58020c00 	.word	0x58020c00
 8000818:	58021800 	.word	0x58021800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_MspInit+0x30>)
 8000830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000834:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x30>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x30>)
 8000840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024400 	.word	0x58024400

0800085c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0ba      	sub	sp, #232	@ 0xe8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	22c0      	movs	r2, #192	@ 0xc0
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f8a0 	bl	80039c2 <memset>
  if(hspi->Instance==SPI1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a26      	ldr	r2, [pc, #152]	@ (8000920 <HAL_SPI_MspInit+0xc4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d145      	bne.n	8000918 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800088c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800089c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fbe0 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80008ae:	f7ff ffb5 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80008b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80008c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_SPI_MspInit+0xc8>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_ISP1_Pin|MISO_ISP1_Pin|MOSI_ISP1_Pin;
 80008ee:	23e0      	movs	r3, #224	@ 0xe0
 80008f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_SPI_MspInit+0xcc>)
 8000914:	f000 f9e6 	bl	8000ce4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	37e8      	adds	r7, #232	@ 0xe8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013000 	.word	0x40013000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020000 	.word	0x58020000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f89f 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f7ff fca2 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	@ (80009cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	@ (80009d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f003 f80b 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd21 	bl	8000404 <main>
  bx  lr
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009cc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80009d0:	08003a4c 	.word	0x08003a4c
  ldr r2, =_sbss
 80009d4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009d8:	240000b8 	.word	0x240000b8

080009dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC3_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 f94a 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009ec:	f001 f9c2 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 80009f0:	4602      	mov	r2, r0
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_Init+0x68>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	4913      	ldr	r1, [pc, #76]	@ (8000a4c <HAL_Init+0x6c>)
 80009fe:	5ccb      	ldrb	r3, [r1, r3]
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	fa22 f303 	lsr.w	r3, r2, r3
 8000a08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_Init+0x68>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_Init+0x6c>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a20:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <HAL_Init+0x70>)
 8000a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <HAL_Init+0x74>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f814 	bl	8000a58 <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e002      	b.n	8000a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3a:	f7ff fef5 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	08003a34 	.word	0x08003a34
 8000a50:	24000004 	.word	0x24000004
 8000a54:	24000000 	.word	0x24000000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e021      	b.n	8000ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <HAL_InitTick+0x64>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <HAL_InitTick+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f921 	bl	8000cca <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f8f9 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <HAL_InitTick+0x68>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400000c 	.word	0x2400000c
 8000abc:	24000000 	.word	0x24000000
 8000ac0:	24000008 	.word	0x24000008

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2400000c 	.word	0x2400000c
 8000ae8:	240000b4 	.word	0x240000b4

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	240000b4 	.word	0x240000b4

08000b04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <HAL_GetREVID+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	0c1b      	lsrs	r3, r3, #16
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	5c001000 	.word	0x5c001000

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x40>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x40>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00
 8000b60:	05fa0000 	.word	0x05fa0000

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff5e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff90 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5f 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffb2 	bl	8000c3c <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cf2:	4b89      	ldr	r3, [pc, #548]	@ (8000f18 <HAL_GPIO_Init+0x234>)
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf6:	e194      	b.n	8001022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8186 	beq.w	800101c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x44>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d017      	beq.n	8000dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d123      	bne.n	8000e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	69b9      	ldr	r1, [r7, #24]
 8000e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0203 	and.w	r2, r3, #3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80e0 	beq.w	800101c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e62:	4a2e      	ldr	r2, [pc, #184]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a29      	ldr	r2, [pc, #164]	@ (8000f20 <HAL_GPIO_Init+0x23c>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <HAL_GPIO_Init+0x240>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d052      	beq.n	8000f4c <HAL_GPIO_Init+0x268>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_GPIO_Init+0x244>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d031      	beq.n	8000f12 <HAL_GPIO_Init+0x22e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_GPIO_Init+0x248>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d02b      	beq.n	8000f0e <HAL_GPIO_Init+0x22a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <HAL_GPIO_Init+0x24c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x226>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <HAL_GPIO_Init+0x250>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x222>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f38 <HAL_GPIO_Init+0x254>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x21e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x258>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x21a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_GPIO_Init+0x25c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x216>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <HAL_GPIO_Init+0x260>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x212>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_GPIO_Init+0x264>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x20e>
 8000eee:	2309      	movs	r3, #9
 8000ef0:	e02d      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	e02b      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	e029      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000efa:	2307      	movs	r3, #7
 8000efc:	e027      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e025      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e023      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e021      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e01f      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e01d      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e01b      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f16:	bf00      	nop
 8000f18:	58000080 	.word	0x58000080
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58000400 	.word	0x58000400
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	58020800 	.word	0x58020800
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58021000 	.word	0x58021000
 8000f38:	58021400 	.word	0x58021400
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	58021c00 	.word	0x58021c00
 8000f44:	58022000 	.word	0x58022000
 8000f48:	58022400 	.word	0x58022400
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5e:	4938      	ldr	r1, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x35c>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	3301      	adds	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f ae63 	bne.w	8000cf8 <HAL_GPIO_Init+0x14>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3724      	adds	r7, #36	@ 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58000400 	.word	0x58000400

08001044 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800104c:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_HSEM_FastTake+0x2c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3320      	adds	r3, #32
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_HSEM_FastTake+0x30>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	e000      	b.n	8001062 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	58026400 	.word	0x58026400
 8001074:	80000300 	.word	0x80000300

08001078 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001082:	4906      	ldr	r1, [pc, #24]	@ (800109c <HAL_HSEM_Release+0x24>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	58026400 	.word	0x58026400

080010a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010a8:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	d00a      	beq.n	80010ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010b4:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d001      	beq.n	80010c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e040      	b.n	8001148 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e03e      	b.n	8001148 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010d2:	491f      	ldr	r1, [pc, #124]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010da:	f7ff fd07 	bl	8000aec <HAL_GetTick>
 80010de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010e0:	e009      	b.n	80010f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010e2:	f7ff fd03 	bl	8000aec <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f0:	d901      	bls.n	80010f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e028      	b.n	8001148 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001102:	d1ee      	bne.n	80010e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b1e      	cmp	r3, #30
 8001108:	d008      	beq.n	800111c <HAL_PWREx_ConfigSupply+0x7c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b2e      	cmp	r3, #46	@ 0x2e
 800110e:	d005      	beq.n	800111c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b1d      	cmp	r3, #29
 8001114:	d002      	beq.n	800111c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b2d      	cmp	r3, #45	@ 0x2d
 800111a:	d114      	bne.n	8001146 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800111c:	f7ff fce6 	bl	8000aec <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001122:	e009      	b.n	8001138 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001124:	f7ff fce2 	bl	8000aec <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001132:	d901      	bls.n	8001138 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e007      	b.n	8001148 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_PWREx_ConfigSupply+0xb0>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001144:	d1ee      	bne.n	8001124 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024800 	.word	0x58024800

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	@ 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 bc48 	b.w	80019f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8088 	beq.w	8001286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4b99      	ldr	r3, [pc, #612]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001180:	4b96      	ldr	r3, [pc, #600]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001188:	2b10      	cmp	r3, #16
 800118a:	d007      	beq.n	800119c <HAL_RCC_OscConfig+0x48>
 800118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118e:	2b18      	cmp	r3, #24
 8001190:	d111      	bne.n	80011b6 <HAL_RCC_OscConfig+0x62>
 8001192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d10c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b8f      	ldr	r3, [pc, #572]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d06d      	beq.n	8001284 <HAL_RCC_OscConfig+0x130>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d169      	bne.n	8001284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 bc21 	b.w	80019f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x7a>
 80011c0:	4b86      	ldr	r3, [pc, #536]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a85      	ldr	r2, [pc, #532]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e02e      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x9c>
 80011d6:	4b81      	ldr	r3, [pc, #516]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a80      	ldr	r2, [pc, #512]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b7e      	ldr	r3, [pc, #504]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7d      	ldr	r2, [pc, #500]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0xc0>
 80011fa:	4b78      	ldr	r3, [pc, #480]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b75      	ldr	r3, [pc, #468]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a74      	ldr	r2, [pc, #464]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 8001214:	4b71      	ldr	r3, [pc, #452]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a70      	ldr	r2, [pc, #448]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b6e      	ldr	r3, [pc, #440]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6d      	ldr	r2, [pc, #436]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800122a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fc5a 	bl	8000aec <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fc56 	bl	8000aec <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	@ 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e3d4      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xe8>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc46 	bl	8000aec <HAL_GetTick>
 8001260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc42 	bl	8000aec <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	@ 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e3c0      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001276:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x110>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80ca 	beq.w	8001428 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001294:	4b51      	ldr	r3, [pc, #324]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800129c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800129e:	4b4f      	ldr	r3, [pc, #316]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_RCC_OscConfig+0x166>
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	2b18      	cmp	r3, #24
 80012ae:	d156      	bne.n	800135e <HAL_RCC_OscConfig+0x20a>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d151      	bne.n	800135e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ba:	4b48      	ldr	r3, [pc, #288]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x17e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e392      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d2:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 0219 	bic.w	r2, r3, #25
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	493f      	ldr	r1, [pc, #252]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc02 	bl	8000aec <HAL_GetTick>
 80012e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fbfe 	bl	8000aec <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e37c      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	f7ff fbfb 	bl	8000b04 <HAL_GetREVID>
 800130e:	4603      	mov	r3, r0
 8001310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001314:	4293      	cmp	r3, r2
 8001316:	d817      	bhi.n	8001348 <HAL_RCC_OscConfig+0x1f4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b40      	cmp	r3, #64	@ 0x40
 800131e:	d108      	bne.n	8001332 <HAL_RCC_OscConfig+0x1de>
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001328:	4a2c      	ldr	r2, [pc, #176]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	e07a      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	031b      	lsls	r3, r3, #12
 8001340:	4926      	ldr	r1, [pc, #152]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001346:	e06f      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	4921      	ldr	r1, [pc, #132]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135c:	e064      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d047      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0219 	bic.w	r2, r3, #25
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	491a      	ldr	r1, [pc, #104]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fbb8 	bl	8000aec <HAL_GetTick>
 800137c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fbb4 	bl	8000aec <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e332      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	f7ff fbb1 	bl	8000b04 <HAL_GetREVID>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d819      	bhi.n	80013e0 <HAL_RCC_OscConfig+0x28c>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b40      	cmp	r3, #64	@ 0x40
 80013b2:	d108      	bne.n	80013c6 <HAL_RCC_OscConfig+0x272>
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80013be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c2:	6053      	str	r3, [r2, #4]
 80013c4:	e030      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	031b      	lsls	r3, r3, #12
 80013d4:	4901      	ldr	r1, [pc, #4]	@ (80013dc <HAL_RCC_OscConfig+0x288>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e025      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
 80013dc:	58024400 	.word	0x58024400
 80013e0:	4b9a      	ldr	r3, [pc, #616]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	4997      	ldr	r1, [pc, #604]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e018      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b95      	ldr	r3, [pc, #596]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a94      	ldr	r2, [pc, #592]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fb73 	bl	8000aec <HAL_GetTick>
 8001406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fb6f 	bl	8000aec <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2ed      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800141c:	4b8b      	ldr	r3, [pc, #556]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a9 	beq.w	8001588 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b85      	ldr	r3, [pc, #532]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800143e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001440:	4b82      	ldr	r3, [pc, #520]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d007      	beq.n	800145c <HAL_RCC_OscConfig+0x308>
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b18      	cmp	r3, #24
 8001450:	d13a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x374>
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d135      	bne.n	80014c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800145c:	4b7b      	ldr	r3, [pc, #492]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x320>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b80      	cmp	r3, #128	@ 0x80
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2c1      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001474:	f7ff fb46 	bl	8000b04 <HAL_GetREVID>
 8001478:	4603      	mov	r3, r0
 800147a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800147e:	4293      	cmp	r3, r2
 8001480:	d817      	bhi.n	80014b2 <HAL_RCC_OscConfig+0x35e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b20      	cmp	r3, #32
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x348>
 800148a:	4b70      	ldr	r3, [pc, #448]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001492:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001494:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001498:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800149a:	e075      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149c:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	069b      	lsls	r3, r3, #26
 80014aa:	4968      	ldr	r1, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b0:	e06a      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b2:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	4962      	ldr	r1, [pc, #392]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c6:	e05f      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d042      	beq.n	8001556 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014d0:	4b5e      	ldr	r3, [pc, #376]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb06 	bl	8000aec <HAL_GetTick>
 80014e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014e4:	f7ff fb02 	bl	8000aec <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e280      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014f6:	4b55      	ldr	r3, [pc, #340]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001502:	f7ff faff 	bl	8000b04 <HAL_GetREVID>
 8001506:	4603      	mov	r3, r0
 8001508:	f241 0203 	movw	r2, #4099	@ 0x1003
 800150c:	4293      	cmp	r3, r2
 800150e:	d817      	bhi.n	8001540 <HAL_RCC_OscConfig+0x3ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	2b20      	cmp	r3, #32
 8001516:	d108      	bne.n	800152a <HAL_RCC_OscConfig+0x3d6>
 8001518:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001520:	4a4a      	ldr	r2, [pc, #296]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001522:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001526:	6053      	str	r3, [r2, #4]
 8001528:	e02e      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
 800152a:	4b48      	ldr	r3, [pc, #288]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	069b      	lsls	r3, r3, #26
 8001538:	4944      	ldr	r1, [pc, #272]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e023      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
 8001540:	4b42      	ldr	r3, [pc, #264]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	493f      	ldr	r1, [pc, #252]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3c      	ldr	r2, [pc, #240]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800155c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fac3 	bl	8000aec <HAL_GetTick>
 8001566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800156a:	f7ff fabf 	bl	8000aec <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e23d      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800157c:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d036      	beq.n	8001602 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d019      	beq.n	80015d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a0:	4a2a      	ldr	r2, [pc, #168]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff faa0 	bl	8000aec <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fa9c 	bl	8000aec <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e21a      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c2:	4b22      	ldr	r3, [pc, #136]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x45c>
 80015ce:	e018      	b.n	8001602 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d4:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa86 	bl	8000aec <HAL_GetTick>
 80015e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa82 	bl	8000aec <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e200      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d039      	beq.n	8001682 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01c      	beq.n	8001650 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001622:	f7ff fa63 	bl	8000aec <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff fa5f 	bl	8000aec <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1dd      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_RCC_OscConfig+0x4f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x4d6>
 8001648:	e01b      	b.n	8001682 <HAL_RCC_OscConfig+0x52e>
 800164a:	bf00      	nop
 800164c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001650:	4b9b      	ldr	r3, [pc, #620]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9a      	ldr	r2, [pc, #616]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800165a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa46 	bl	8000aec <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001664:	f7ff fa42 	bl	8000aec <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1c0      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001676:	4b92      	ldr	r3, [pc, #584]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8081 	beq.w	8001792 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001690:	4b8c      	ldr	r3, [pc, #560]	@ (80018c4 <HAL_RCC_OscConfig+0x770>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8b      	ldr	r2, [pc, #556]	@ (80018c4 <HAL_RCC_OscConfig+0x770>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa26 	bl	8000aec <HAL_GetTick>
 80016a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fa22 	bl	8000aec <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1a0      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016b6:	4b83      	ldr	r3, [pc, #524]	@ (80018c4 <HAL_RCC_OscConfig+0x770>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x584>
 80016ca:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	4a7c      	ldr	r2, [pc, #496]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d6:	e02d      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x5a6>
 80016e0:	4b77      	ldr	r3, [pc, #476]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e4:	4a76      	ldr	r2, [pc, #472]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ec:	4b74      	ldr	r3, [pc, #464]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f0:	4a73      	ldr	r2, [pc, #460]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x5c8>
 8001702:	4b6f      	ldr	r3, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	4a6e      	ldr	r2, [pc, #440]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6713      	str	r3, [r2, #112]	@ 0x70
 800170e:	4b6c      	ldr	r3, [pc, #432]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	4a6b      	ldr	r2, [pc, #428]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	@ 0x70
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 800171c:	4b68      	ldr	r3, [pc, #416]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	4a67      	ldr	r2, [pc, #412]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	@ 0x70
 8001728:	4b65      	ldr	r3, [pc, #404]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	4a64      	ldr	r2, [pc, #400]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d015      	beq.n	8001768 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff f9d6 	bl	8000aec <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff f9d2 	bl	8000aec <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e14e      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175a:	4b59      	ldr	r3, [pc, #356]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0ee      	beq.n	8001744 <HAL_RCC_OscConfig+0x5f0>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff f9c0 	bl	8000aec <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff f9bc 	bl	8000aec <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e138      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001786:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ee      	bne.n	8001770 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 812d 	beq.w	80019f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800179c:	4b48      	ldr	r3, [pc, #288]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017a4:	2b18      	cmp	r3, #24
 80017a6:	f000 80bd 	beq.w	8001924 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	f040 809e 	bne.w	80018f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f994 	bl	8000aec <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f990 	bl	8000aec <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e10e      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017da:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e6:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_RCC_OscConfig+0x774>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	430a      	orrs	r2, r1
 80017fa:	4931      	ldr	r1, [pc, #196]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001804:	3b01      	subs	r3, #1
 8001806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180e:	3b01      	subs	r3, #1
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	b29b      	uxth	r3, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001828:	3b01      	subs	r3, #1
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001830:	4923      	ldr	r1, [pc, #140]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	4a21      	ldr	r2, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_RCC_OscConfig+0x778>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800184e:	00d2      	lsls	r2, r2, #3
 8001850:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	f023 020c 	bic.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4917      	ldr	r1, [pc, #92]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	f023 0202 	bic.w	r2, r3, #2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001874:	4912      	ldr	r1, [pc, #72]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800187c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187e:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f919 	bl	8000aec <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018bc:	e011      	b.n	80018e2 <HAL_RCC_OscConfig+0x78e>
 80018be:	bf00      	nop
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58024800 	.word	0x58024800
 80018c8:	fffffc0c 	.word	0xfffffc0c
 80018cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f90c 	bl	8000aec <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e08a      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x77c>
 80018ee:	e082      	b.n	80019f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a42      	ldr	r2, [pc, #264]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8f6 	bl	8000aec <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f8f2 	bl	8000aec <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e070      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001916:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x7b0>
 8001922:	e068      	b.n	80019f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800192a:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	2b01      	cmp	r3, #1
 8001936:	d031      	beq.n	800199c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d12a      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d122      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11a      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0a5b      	lsrs	r3, r3, #9
 800196a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001972:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d111      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001984:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0e1b      	lsrs	r3, r3, #24
 800198e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001996:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e02b      	b.n	80019f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d01f      	beq.n	80019f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c2:	f7ff f893 	bl	8000aec <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019c8:	bf00      	nop
 80019ca:	f7ff f88f 	bl	8000aec <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d0f9      	beq.n	80019ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_RCC_OscConfig+0x8b0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019e2:	00d2      	lsls	r2, r2, #3
 80019e4:	4906      	ldr	r1, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_RCC_OscConfig+0x8ac>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3730      	adds	r7, #48	@ 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58024400 	.word	0x58024400
 8001a04:	ffff0007 	.word	0xffff0007

08001a08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e19c      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b87      	ldr	r3, [pc, #540]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	4985      	ldr	r1, [pc, #532]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b83      	ldr	r3, [pc, #524]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e184      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d908      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a68:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4975      	ldr	r1, [pc, #468]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	4b70      	ldr	r3, [pc, #448]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d908      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a96:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	496a      	ldr	r1, [pc, #424]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	4b64      	ldr	r3, [pc, #400]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d908      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ac4:	4b61      	ldr	r3, [pc, #388]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	495e      	ldr	r1, [pc, #376]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	4b59      	ldr	r3, [pc, #356]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001af2:	4b56      	ldr	r3, [pc, #344]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4953      	ldr	r1, [pc, #332]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d908      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f023 020f 	bic.w	r2, r3, #15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4947      	ldr	r1, [pc, #284]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d055      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b3e:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4940      	ldr	r1, [pc, #256]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b58:	4b3c      	ldr	r3, [pc, #240]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d121      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0f6      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b70:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d115      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0ea      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b88:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0de      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b98:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d6      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f023 0207 	bic.w	r2, r3, #7
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4925      	ldr	r1, [pc, #148]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bba:	f7fe ff97 	bl	8000aec <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7fe ff93 	bl	8000aec <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0be      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d1eb      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d208      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	490e      	ldr	r1, [pc, #56]	@ (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d214      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 020f 	bic.w	r2, r3, #15
 8001c2e:	4906      	ldr	r1, [pc, #24]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e086      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
 8001c48:	52002000 	.word	0x52002000
 8001c4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d208      	bcs.n	8001c7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	4939      	ldr	r1, [pc, #228]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	4b34      	ldr	r3, [pc, #208]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d208      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c9a:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	492e      	ldr	r1, [pc, #184]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d208      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4922      	ldr	r1, [pc, #136]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d208      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4917      	ldr	r1, [pc, #92]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d08:	f000 f834 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4912      	ldr	r1, [pc, #72]	@ (8001d64 <HAL_RCC_ClockConfig+0x35c>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <HAL_RCC_ClockConfig+0x35c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_RCC_ClockConfig+0x360>)
 8001d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d40:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <HAL_RCC_ClockConfig+0x364>)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_RCC_ClockConfig+0x368>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fe84 	bl	8000a58 <HAL_InitTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58024400 	.word	0x58024400
 8001d64:	08003a34 	.word	0x08003a34
 8001d68:	24000004 	.word	0x24000004
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	24000008 	.word	0x24000008

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	f200 8155 	bhi.w	8002032 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001df5 	.word	0x08001df5
 8001d94:	08002033 	.word	0x08002033
 8001d98:	08002033 	.word	0x08002033
 8001d9c:	08002033 	.word	0x08002033
 8001da0:	08002033 	.word	0x08002033
 8001da4:	08002033 	.word	0x08002033
 8001da8:	08002033 	.word	0x08002033
 8001dac:	08002033 	.word	0x08002033
 8001db0:	08001e1b 	.word	0x08001e1b
 8001db4:	08002033 	.word	0x08002033
 8001db8:	08002033 	.word	0x08002033
 8001dbc:	08002033 	.word	0x08002033
 8001dc0:	08002033 	.word	0x08002033
 8001dc4:	08002033 	.word	0x08002033
 8001dc8:	08002033 	.word	0x08002033
 8001dcc:	08002033 	.word	0x08002033
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08002033 	.word	0x08002033
 8001dd8:	08002033 	.word	0x08002033
 8001ddc:	08002033 	.word	0x08002033
 8001de0:	08002033 	.word	0x08002033
 8001de4:	08002033 	.word	0x08002033
 8001de8:	08002033 	.word	0x08002033
 8001dec:	08002033 	.word	0x08002033
 8001df0:	08001e27 	.word	0x08001e27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df4:	4b94      	ldr	r3, [pc, #592]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e00:	4b91      	ldr	r3, [pc, #580]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	4a90      	ldr	r2, [pc, #576]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e12:	e111      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e14:	4b8d      	ldr	r3, [pc, #564]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e16:	61bb      	str	r3, [r7, #24]
      break;
 8001e18:	e10e      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e1c:	61bb      	str	r3, [r7, #24]
      break;
 8001e1e:	e10b      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e20:	4b8c      	ldr	r3, [pc, #560]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e22:	61bb      	str	r3, [r7, #24]
      break;
 8001e24:	e108      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e26:	4b88      	ldr	r3, [pc, #544]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e30:	4b85      	ldr	r3, [pc, #532]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e3c:	4b82      	ldr	r3, [pc, #520]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e46:	4b80      	ldr	r3, [pc, #512]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80e1 	beq.w	800202c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	f000 8083 	beq.w	8001f78 <HAL_RCC_GetSysClockFreq+0x204>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	f200 80a1 	bhi.w	8001fbc <HAL_RCC_GetSysClockFreq+0x248>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x114>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d056      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e86:	e099      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e88:	4b6f      	ldr	r3, [pc, #444]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d02d      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e94:	4b6c      	ldr	r3, [pc, #432]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebe:	4b62      	ldr	r3, [pc, #392]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001eee:	e087      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f02:	4b51      	ldr	r3, [pc, #324]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f32:	e065      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f46:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f76:	e043      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fba:	e021      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ffe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	0a5b      	lsrs	r3, r3, #9
 8002006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800200a:	3301      	adds	r3, #1
 800200c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002018:	edd7 6a07 	vldr	s13, [r7, #28]
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002024:	ee17 3a90 	vmov	r3, s15
 8002028:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800202a:	e005      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
      break;
 8002030:	e002      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002034:	61bb      	str	r3, [r7, #24]
      break;
 8002036:	bf00      	nop
  }

  return sysclockfreq;
 8002038:	69bb      	ldr	r3, [r7, #24]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400
 800204c:	03d09000 	.word	0x03d09000
 8002050:	003d0900 	.word	0x003d0900
 8002054:	007a1200 	.word	0x007a1200
 8002058:	46000000 	.word	0x46000000
 800205c:	4c742400 	.word	0x4c742400
 8002060:	4a742400 	.word	0x4a742400
 8002064:	4af42400 	.word	0x4af42400

08002068 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800206c:	b0ca      	sub	sp, #296	@ 0x128
 800206e:	af00      	add	r7, sp, #0
 8002070:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800208c:	2500      	movs	r5, #0
 800208e:	ea54 0305 	orrs.w	r3, r4, r5
 8002092:	d049      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800209a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800209e:	d02f      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80020a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80020a4:	d828      	bhi.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020aa:	d01a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80020ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020b0:	d822      	bhi.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ba:	d007      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020bc:	e01c      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020be:	4bb8      	ldr	r3, [pc, #736]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	4ab7      	ldr	r2, [pc, #732]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020ca:	e01a      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80020cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020d0:	3308      	adds	r3, #8
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f9d1 	bl	800347c <RCCEx_PLL2_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020e0:	e00f      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80020e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020e6:	3328      	adds	r3, #40	@ 0x28
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fa78 	bl	80035e0 <RCCEx_PLL3_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020f6:	e004      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80020fe:	e000      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800210a:	4ba5      	ldr	r3, [pc, #660]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002118:	4aa1      	ldr	r2, [pc, #644]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800211a:	430b      	orrs	r3, r1
 800211c:	6513      	str	r3, [r2, #80]	@ 0x50
 800211e:	e003      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002134:	f04f 0900 	mov.w	r9, #0
 8002138:	ea58 0309 	orrs.w	r3, r8, r9
 800213c:	d047      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800213e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	2b04      	cmp	r3, #4
 8002146:	d82a      	bhi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002148:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002165 	.word	0x08002165
 8002154:	08002173 	.word	0x08002173
 8002158:	08002189 	.word	0x08002189
 800215c:	080021a7 	.word	0x080021a7
 8002160:	080021a7 	.word	0x080021a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002164:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	4a8d      	ldr	r2, [pc, #564]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800216a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002170:	e01a      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002176:	3308      	adds	r3, #8
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f001 f97e 	bl	800347c <RCCEx_PLL2_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002186:	e00f      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800218c:	3328      	adds	r3, #40	@ 0x28
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fa25 	bl	80035e0 <RCCEx_PLL3_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800219c:	e004      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80021a4:	e000      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80021a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b0:	4b7b      	ldr	r3, [pc, #492]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b4:	f023 0107 	bic.w	r1, r3, #7
 80021b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a78      	ldr	r2, [pc, #480]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80021c4:	e003      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80021ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80021da:	f04f 0b00 	mov.w	fp, #0
 80021de:	ea5a 030b 	orrs.w	r3, sl, fp
 80021e2:	d04c      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80021e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ee:	d030      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f4:	d829      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80021f8:	d02d      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80021fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80021fc:	d825      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021fe:	2b80      	cmp	r3, #128	@ 0x80
 8002200:	d018      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002202:	2b80      	cmp	r3, #128	@ 0x80
 8002204:	d821      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800220a:	2b40      	cmp	r3, #64	@ 0x40
 800220c:	d007      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800220e:	e01c      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002210:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	4a62      	ldr	r2, [pc, #392]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800221c:	e01c      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800221e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002222:	3308      	adds	r3, #8
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f928 	bl	800347c <RCCEx_PLL2_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002232:	e011      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002238:	3328      	adds	r3, #40	@ 0x28
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f001 f9cf 	bl	80035e0 <RCCEx_PLL3_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002250:	e002      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002264:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002270:	430b      	orrs	r3, r1
 8002272:	6513      	str	r3, [r2, #80]	@ 0x50
 8002274:	e003      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800227a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800227e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800228a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002294:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002298:	460b      	mov	r3, r1
 800229a:	4313      	orrs	r3, r2
 800229c:	d053      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800229e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022aa:	d035      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80022ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022b0:	d82e      	bhi.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022b6:	d031      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80022b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022bc:	d828      	bhi.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c2:	d01a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80022c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c8:	d822      	bhi.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80022ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022d2:	d007      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80022d4:	e01c      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022d6:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022e2:	e01c      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022e8:	3308      	adds	r3, #8
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 f8c5 	bl	800347c <RCCEx_PLL2_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022fe:	3328      	adds	r3, #40	@ 0x28
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f001 f96c 	bl	80035e0 <RCCEx_PLL3_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800230e:	e006      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002316:	e002      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800231c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800231e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800232e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002336:	4a1a      	ldr	r2, [pc, #104]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002338:	430b      	orrs	r3, r1
 800233a:	6593      	str	r3, [r2, #88]	@ 0x58
 800233c:	e003      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002352:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800235c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002360:	460b      	mov	r3, r1
 8002362:	4313      	orrs	r3, r2
 8002364:	d056      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800236a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002372:	d038      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002378:	d831      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800237a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800237e:	d034      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002384:	d82b      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800238a:	d01d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800238c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002390:	d825      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800239c:	e01f      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	4aa1      	ldr	r2, [pc, #644]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023b0:	e01c      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b6:	3308      	adds	r3, #8
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f85e 	bl	800347c <RCCEx_PLL2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023c6:	e011      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023cc:	3328      	adds	r3, #40	@ 0x28
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 f905 	bl	80035e0 <RCCEx_PLL3_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023dc:	e006      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80023e4:	e002      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80023fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002400:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002404:	4a8a      	ldr	r2, [pc, #552]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002406:	430b      	orrs	r3, r1
 8002408:	6593      	str	r3, [r2, #88]	@ 0x58
 800240a:	e003      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800242a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800242e:	460b      	mov	r3, r1
 8002430:	4313      	orrs	r3, r2
 8002432:	d03a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	2b30      	cmp	r3, #48	@ 0x30
 800243c:	d01f      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800243e:	2b30      	cmp	r3, #48	@ 0x30
 8002440:	d819      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002442:	2b20      	cmp	r3, #32
 8002444:	d00c      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002446:	2b20      	cmp	r3, #32
 8002448:	d815      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d019      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800244e:	2b10      	cmp	r3, #16
 8002450:	d111      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002452:	4b77      	ldr	r3, [pc, #476]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	4a76      	ldr	r2, [pc, #472]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800245e:	e011      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002464:	3308      	adds	r3, #8
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f001 f807 	bl	800347c <RCCEx_PLL2_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002474:	e006      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800247c:	e002      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800248c:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002490:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	4a65      	ldr	r2, [pc, #404]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800249c:	430b      	orrs	r3, r1
 800249e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a0:	e003      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80024b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80024c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4313      	orrs	r3, r2
 80024c8:	d051      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80024ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024d4:	d035      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80024d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024da:	d82e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024e0:	d031      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80024e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024e6:	d828      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ec:	d01a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f2:	d822      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024fc:	d007      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80024fe:	e01c      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	4a4a      	ldr	r2, [pc, #296]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800250c:	e01c      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800250e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002512:	3308      	adds	r3, #8
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 ffb0 	bl	800347c <RCCEx_PLL2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002522:	e011      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002528:	3328      	adds	r3, #40	@ 0x28
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f001 f857 	bl	80035e0 <RCCEx_PLL3_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002538:	e006      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002540:	e002      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002550:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	4a34      	ldr	r2, [pc, #208]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002560:	430b      	orrs	r3, r1
 8002562:	6513      	str	r3, [r2, #80]	@ 0x50
 8002564:	e003      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800256a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800256e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800257a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002584:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002588:	460b      	mov	r3, r1
 800258a:	4313      	orrs	r3, r2
 800258c:	d056      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800258e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002598:	d033      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800259a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259e:	d82c      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025a4:	d02f      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80025a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025aa:	d826      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025b0:	d02b      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80025b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025b6:	d820      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025bc:	d012      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80025be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c2:	d81a      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d022      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d115      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d2:	3308      	adds	r3, #8
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 ff50 	bl	800347c <RCCEx_PLL2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025e2:	e015      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	2101      	movs	r1, #1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fff7 	bl	80035e0 <RCCEx_PLL3_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025f8:	e00a      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002600:	e006      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002602:	bf00      	nop
 8002604:	e004      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800260e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800261a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002626:	4a02      	ldr	r2, [pc, #8]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002628:	430b      	orrs	r3, r1
 800262a:	6513      	str	r3, [r2, #80]	@ 0x50
 800262c:	e006      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800262e:	bf00      	nop
 8002630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002652:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002656:	460b      	mov	r3, r1
 8002658:	4313      	orrs	r3, r2
 800265a:	d055      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800265c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002668:	d033      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800266a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800266e:	d82c      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002674:	d02f      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267a:	d826      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800267c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002680:	d02b      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002682:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002686:	d820      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800268c:	d012      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800268e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002692:	d81a      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d022      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800269c:	d115      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a2:	3308      	adds	r3, #8
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fee8 	bl	800347c <RCCEx_PLL2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026b2:	e015      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b8:	3328      	adds	r3, #40	@ 0x28
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 ff8f 	bl	80035e0 <RCCEx_PLL3_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026c8:	e00a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026d0:	e006      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026d2:	bf00      	nop
 80026d4:	e004      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80026e8:	4ba3      	ldr	r3, [pc, #652]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fe:	e003      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800271e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002722:	460b      	mov	r3, r1
 8002724:	4313      	orrs	r3, r2
 8002726:	d037      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002732:	d00e      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002738:	d816      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d018      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800273e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002742:	d111      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002744:	4b8c      	ldr	r3, [pc, #560]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	4a8b      	ldr	r2, [pc, #556]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002750:	e00f      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002756:	3308      	adds	r3, #8
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fe8e 	bl	800347c <RCCEx_PLL2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002766:	e004      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800277a:	4b7f      	ldr	r3, [pc, #508]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800277c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a7b      	ldr	r2, [pc, #492]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800278a:	430b      	orrs	r3, r1
 800278c:	6513      	str	r3, [r2, #80]	@ 0x50
 800278e:	e003      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80027a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80027ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4313      	orrs	r3, r2
 80027b6:	d039      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d81c      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80027c2:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002805 	.word	0x08002805
 80027cc:	080027d9 	.word	0x080027d9
 80027d0:	080027e7 	.word	0x080027e7
 80027d4:	08002805 	.word	0x08002805
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d8:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	4a66      	ldr	r2, [pc, #408]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80027e4:	e00f      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ea:	3308      	adds	r3, #8
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe44 	bl	800347c <RCCEx_PLL2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80027fa:	e004      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800280e:	4b5a      	ldr	r3, [pc, #360]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	f023 0103 	bic.w	r1, r3, #3
 8002816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281c:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800281e:	430b      	orrs	r3, r1
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	e003      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800282c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002842:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002846:	460b      	mov	r3, r1
 8002848:	4313      	orrs	r3, r2
 800284a:	f000 809f 	beq.w	800298c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284e:	4b4b      	ldr	r3, [pc, #300]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a4a      	ldr	r2, [pc, #296]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285a:	f7fe f947 	bl	8000aec <HAL_GetTick>
 800285e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002862:	e00b      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe f942 	bl	8000aec <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	@ 0x64
 8002872:	d903      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287c:	4b3f      	ldr	r3, [pc, #252]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ed      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800288c:	2b00      	cmp	r3, #0
 800288e:	d179      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002890:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002892:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800289c:	4053      	eors	r3, r2
 800289e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d015      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028be:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80028ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028de:	d118      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe f904 	bl	8000aec <HAL_GetTick>
 80028e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e8:	e00d      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe f8ff 	bl	8000aec <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d903      	bls.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002904:	e005      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002906:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0eb      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002916:	2b00      	cmp	r3, #0
 8002918:	d129      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800291e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800292a:	d10e      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800293c:	091a      	lsrs	r2, r3, #4
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002940:	4013      	ands	r3, r2
 8002942:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002944:	430b      	orrs	r3, r1
 8002946:	6113      	str	r3, [r2, #16]
 8002948:	e005      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002950:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002954:	6113      	str	r3, [r2, #16]
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002958:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800295a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800295e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002968:	430b      	orrs	r3, r1
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
 800296c:	e00e      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800296e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002976:	e009      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002978:	58024400 	.word	0x58024400
 800297c:	58024800 	.word	0x58024800
 8002980:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f002 0301 	and.w	r3, r2, #1
 8002998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f000 8089 	beq.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b4:	2b28      	cmp	r3, #40	@ 0x28
 80029b6:	d86b      	bhi.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002a99 	.word	0x08002a99
 80029c4:	08002a91 	.word	0x08002a91
 80029c8:	08002a91 	.word	0x08002a91
 80029cc:	08002a91 	.word	0x08002a91
 80029d0:	08002a91 	.word	0x08002a91
 80029d4:	08002a91 	.word	0x08002a91
 80029d8:	08002a91 	.word	0x08002a91
 80029dc:	08002a91 	.word	0x08002a91
 80029e0:	08002a65 	.word	0x08002a65
 80029e4:	08002a91 	.word	0x08002a91
 80029e8:	08002a91 	.word	0x08002a91
 80029ec:	08002a91 	.word	0x08002a91
 80029f0:	08002a91 	.word	0x08002a91
 80029f4:	08002a91 	.word	0x08002a91
 80029f8:	08002a91 	.word	0x08002a91
 80029fc:	08002a91 	.word	0x08002a91
 8002a00:	08002a7b 	.word	0x08002a7b
 8002a04:	08002a91 	.word	0x08002a91
 8002a08:	08002a91 	.word	0x08002a91
 8002a0c:	08002a91 	.word	0x08002a91
 8002a10:	08002a91 	.word	0x08002a91
 8002a14:	08002a91 	.word	0x08002a91
 8002a18:	08002a91 	.word	0x08002a91
 8002a1c:	08002a91 	.word	0x08002a91
 8002a20:	08002a99 	.word	0x08002a99
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002a91 	.word	0x08002a91
 8002a2c:	08002a91 	.word	0x08002a91
 8002a30:	08002a91 	.word	0x08002a91
 8002a34:	08002a91 	.word	0x08002a91
 8002a38:	08002a91 	.word	0x08002a91
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	08002a91 	.word	0x08002a91
 8002a48:	08002a91 	.word	0x08002a91
 8002a4c:	08002a91 	.word	0x08002a91
 8002a50:	08002a91 	.word	0x08002a91
 8002a54:	08002a91 	.word	0x08002a91
 8002a58:	08002a91 	.word	0x08002a91
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002a99 	.word	0x08002a99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a68:	3308      	adds	r3, #8
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fd05 	bl	800347c <RCCEx_PLL2_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a78:	e00f      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7e:	3328      	adds	r3, #40	@ 0x28
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fdac 	bl	80035e0 <RCCEx_PLL3_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a8e:	e004      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a96:	e000      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002aa2:	4bbf      	ldr	r3, [pc, #764]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab0:	4abb      	ldr	r2, [pc, #748]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f002 0302 	and.w	r3, r2, #2
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ad6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002ada:	460b      	mov	r3, r1
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d041      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d824      	bhi.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b3d 	.word	0x08002b3d
 8002af4:	08002b09 	.word	0x08002b09
 8002af8:	08002b1f 	.word	0x08002b1f
 8002afc:	08002b3d 	.word	0x08002b3d
 8002b00:	08002b3d 	.word	0x08002b3d
 8002b04:	08002b3d 	.word	0x08002b3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fcb3 	bl	800347c <RCCEx_PLL2_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e00f      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b22:	3328      	adds	r3, #40	@ 0x28
 8002b24:	2101      	movs	r1, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fd5a 	bl	80035e0 <RCCEx_PLL3_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b32:	e004      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b3a:	e000      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b46:	4b96      	ldr	r3, [pc, #600]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	f023 0107 	bic.w	r1, r3, #7
 8002b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b54:	4a92      	ldr	r2, [pc, #584]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b56:	430b      	orrs	r3, r1
 8002b58:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b5a:	e003      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f002 0304 	and.w	r3, r2, #4
 8002b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4313      	orrs	r3, r2
 8002b82:	d044      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d825      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002be5 	.word	0x08002be5
 8002b9c:	08002bb1 	.word	0x08002bb1
 8002ba0:	08002bc7 	.word	0x08002bc7
 8002ba4:	08002be5 	.word	0x08002be5
 8002ba8:	08002be5 	.word	0x08002be5
 8002bac:	08002be5 	.word	0x08002be5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fc5f 	bl	800347c <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bca:	3328      	adds	r3, #40	@ 0x28
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fd06 	bl	80035e0 <RCCEx_PLL3_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002bda:	e004      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bee:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	f023 0107 	bic.w	r1, r3, #7
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bfe:	4a68      	ldr	r2, [pc, #416]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c04:	e003      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f002 0320 	and.w	r3, r2, #32
 8002c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	d055      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c3a:	d033      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c40:	d82c      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c46:	d02f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4c:	d826      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c52:	d02b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002c54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c58:	d820      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c5e:	d012      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c64:	d81a      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d022      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c74:	3308      	adds	r3, #8
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fbff 	bl	800347c <RCCEx_PLL2_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c84:	e015      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8a:	3328      	adds	r3, #40	@ 0x28
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fca6 	bl	80035e0 <RCCEx_PLL3_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ca2:	e006      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002ca4:	bf00      	nop
 8002ca6:	e004      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002ca8:	bf00      	nop
 8002caa:	e002      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cba:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	4a35      	ldr	r2, [pc, #212]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6553      	str	r3, [r2, #84]	@ 0x54
 8002cd0:	e003      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002cf0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	d058      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d06:	d033      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002d08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d0c:	d82c      	bhi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d12:	d02f      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d18:	d826      	bhi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d1e:	d02b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d24:	d820      	bhi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2a:	d012      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d30:	d81a      	bhi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d022      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d40:	3308      	adds	r3, #8
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb99 	bl	800347c <RCCEx_PLL2_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d50:	e015      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d56:	3328      	adds	r3, #40	@ 0x28
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fc40 	bl	80035e0 <RCCEx_PLL3_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d66:	e00a      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d6e:	e006      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d70:	bf00      	nop
 8002d72:	e004      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d74:	bf00      	nop
 8002d76:	e002      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d96:	4a02      	ldr	r2, [pc, #8]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	d055      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002dd4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002dd8:	d033      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002dda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002dde:	d82c      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de4:	d02f      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002de6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dea:	d826      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002dec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002df0:	d02b      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002df2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002df6:	d820      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dfc:	d012      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e02:	d81a      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d022      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0c:	d115      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e12:	3308      	adds	r3, #8
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fb30 	bl	800347c <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e22:	e015      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e28:	3328      	adds	r3, #40	@ 0x28
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fbd7 	bl	80035e0 <RCCEx_PLL3_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e42:	bf00      	nop
 8002e44:	e004      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e46:	bf00      	nop
 8002e48:	e002      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e58:	4ba1      	ldr	r3, [pc, #644]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e68:	4a9d      	ldr	r2, [pc, #628]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0308 	and.w	r3, r2, #8
 8002e84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d01e      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	3328      	adds	r3, #40	@ 0x28
 8002eac:	2102      	movs	r1, #2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fb96 	bl	80035e0 <RCCEx_PLL3_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ec0:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed0:	4a83      	ldr	r2, [pc, #524]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f002 0310 	and.w	r3, r2, #16
 8002ee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002eec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	d01e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	3328      	adds	r3, #40	@ 0x28
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fb67 	bl	80035e0 <RCCEx_PLL3_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f1e:	4b70      	ldr	r3, [pc, #448]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d03e      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f60:	d022      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f66:	d81b      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002f72:	e015      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	3308      	adds	r3, #8
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa7d 	bl	800347c <RCCEx_PLL2_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f88:	e00f      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8e:	3328      	adds	r3, #40	@ 0x28
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb24 	bl	80035e0 <RCCEx_PLL3_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f9e:	e004      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fc2:	4a47      	ldr	r2, [pc, #284]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc8:	e003      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002fde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fe4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d03b      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ffa:	d01f      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002ffc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003000:	d818      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003006:	d003      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800300c:	d007      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800300e:	e011      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	4b33      	ldr	r3, [pc, #204]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	4a32      	ldr	r2, [pc, #200]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800301c:	e00f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003022:	3328      	adds	r3, #40	@ 0x28
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fada 	bl	80035e0 <RCCEx_PLL3_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003032:	e004      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800303c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003058:	430b      	orrs	r3, r1
 800305a:	6553      	str	r3, [r2, #84]	@ 0x54
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003072:	673b      	str	r3, [r7, #112]	@ 0x70
 8003074:	2300      	movs	r3, #0
 8003076:	677b      	str	r3, [r7, #116]	@ 0x74
 8003078:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800307c:	460b      	mov	r3, r1
 800307e:	4313      	orrs	r3, r2
 8003080:	d034      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d007      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003092:	e011      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003094:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800309e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80030a0:	e00e      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a6:	3308      	adds	r3, #8
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f9e6 	bl	800347c <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80030b6:	e003      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	4a02      	ldr	r2, [pc, #8]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030d8:	430b      	orrs	r3, r1
 80030da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80030de:	bf00      	nop
 80030e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80030f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030fa:	2300      	movs	r3, #0
 80030fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d00c      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	3328      	adds	r3, #40	@ 0x28
 800310e:	2102      	movs	r1, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fa65 	bl	80035e0 <RCCEx_PLL3_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800312e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003130:	2300      	movs	r3, #0
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
 8003134:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003138:	460b      	mov	r3, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	d038      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800314a:	d018      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800314c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003150:	d811      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003156:	d014      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315c:	d80b      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003166:	d106      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003168:	4bc3      	ldr	r3, [pc, #780]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	4ac2      	ldr	r2, [pc, #776]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003174:	e008      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317c:	e004      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003190:	4bb9      	ldr	r3, [pc, #740]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a0:	4ab5      	ldr	r2, [pc, #724]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031a2:	430b      	orrs	r3, r1
 80031a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80031a6:	e003      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80031bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031be:	2300      	movs	r3, #0
 80031c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80031c6:	460b      	mov	r3, r1
 80031c8:	4313      	orrs	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031cc:	4baa      	ldr	r3, [pc, #680]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80031d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031da:	4aa7      	ldr	r2, [pc, #668]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80031ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ee:	2300      	movs	r3, #0
 80031f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80031f6:	460b      	mov	r3, r1
 80031f8:	4313      	orrs	r3, r2
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031fc:	4b9e      	ldr	r3, [pc, #632]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800320c:	4a9a      	ldr	r2, [pc, #616]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800320e:	430b      	orrs	r3, r1
 8003210:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003220:	2300      	movs	r3, #0
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003224:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003228:	460b      	mov	r3, r1
 800322a:	4313      	orrs	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800322e:	4b92      	ldr	r3, [pc, #584]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003232:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323c:	4a8e      	ldr	r2, [pc, #568]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800323e:	430b      	orrs	r3, r1
 8003240:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800324e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003250:	2300      	movs	r3, #0
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
 8003254:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800325e:	4b86      	ldr	r3, [pc, #536]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	4a85      	ldr	r2, [pc, #532]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003264:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003268:	6113      	str	r3, [r2, #16]
 800326a:	4b83      	ldr	r3, [pc, #524]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800326c:	6919      	ldr	r1, [r3, #16]
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003276:	4a80      	ldr	r2, [pc, #512]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003278:	430b      	orrs	r3, r1
 800327a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800327c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
 800328a:	2300      	movs	r3, #0
 800328c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800328e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003292:	460b      	mov	r3, r1
 8003294:	4313      	orrs	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003298:	4b77      	ldr	r3, [pc, #476]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800329a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	4a74      	ldr	r2, [pc, #464]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032a8:	430b      	orrs	r3, r1
 80032aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80032b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d8:	4a67      	ldr	r2, [pc, #412]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032da:	430b      	orrs	r3, r1
 80032dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	2100      	movs	r1, #0
 80032e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80032f4:	460b      	mov	r3, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	d011      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	3308      	adds	r3, #8
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f8ba 	bl	800347c <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800330e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	2100      	movs	r1, #0
 8003328:	6239      	str	r1, [r7, #32]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333e:	3308      	adds	r3, #8
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f89a 	bl	800347c <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800334e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	2100      	movs	r1, #0
 8003368:	61b9      	str	r1, [r7, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d011      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	3308      	adds	r3, #8
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f87a 	bl	800347c <RCCEx_PLL2_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800338e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	2100      	movs	r1, #0
 80033a8:	6139      	str	r1, [r7, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	d011      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	3328      	adds	r3, #40	@ 0x28
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f90c 	bl	80035e0 <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80033ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	2100      	movs	r1, #0
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033f4:	460b      	mov	r3, r1
 80033f6:	4313      	orrs	r3, r2
 80033f8:	d011      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fe:	3328      	adds	r3, #40	@ 0x28
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8ec 	bl	80035e0 <RCCEx_PLL3_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800340e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	2100      	movs	r1, #0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d011      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343e:	3328      	adds	r3, #40	@ 0x28
 8003440:	2102      	movs	r1, #2
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f8cc 	bl	80035e0 <RCCEx_PLL3_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800345e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003472:	46bd      	mov	sp, r7
 8003474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003478:	58024400 	.word	0x58024400

0800347c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800348a:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800348c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d101      	bne.n	800349a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e099      	b.n	80035ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800349a:	4b4f      	ldr	r3, [pc, #316]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4e      	ldr	r2, [pc, #312]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80034a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a6:	f7fd fb21 	bl	8000aec <HAL_GetTick>
 80034aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034ae:	f7fd fb1d 	bl	8000aec <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e086      	b.n	80035ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80034cc:	4b42      	ldr	r3, [pc, #264]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	493f      	ldr	r1, [pc, #252]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	628b      	str	r3, [r1, #40]	@ 0x28
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	025b      	lsls	r3, r3, #9
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	3b01      	subs	r3, #1
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003510:	4931      	ldr	r1, [pc, #196]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003516:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	492d      	ldr	r1, [pc, #180]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003528:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f023 0220 	bic.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4928      	ldr	r1, [pc, #160]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800353a:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	4a26      	ldr	r2, [pc, #152]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003540:	f023 0310 	bic.w	r3, r3, #16
 8003544:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003546:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <RCCEx_PLL2_Config+0x160>)
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	69d2      	ldr	r2, [r2, #28]
 8003552:	00d2      	lsls	r2, r2, #3
 8003554:	4920      	ldr	r1, [pc, #128]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800355a:	4b1f      	ldr	r3, [pc, #124]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800356c:	4b1a      	ldr	r3, [pc, #104]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003572:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003578:	e00f      	b.n	800359a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800358c:	e005      	b.n	800359a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	4a11      	ldr	r2, [pc, #68]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 8003594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003598:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800359a:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0e      	ldr	r2, [pc, #56]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80035a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a6:	f7fd faa1 	bl	8000aec <HAL_GetTick>
 80035aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035ae:	f7fd fa9d 	bl	8000aec <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e006      	b.n	80035ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <RCCEx_PLL2_Config+0x15c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
 80035dc:	ffff0007 	.word	0xffff0007

080035e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035ee:	4b53      	ldr	r3, [pc, #332]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d101      	bne.n	80035fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e099      	b.n	8003732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80035fe:	4b4f      	ldr	r3, [pc, #316]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a4e      	ldr	r2, [pc, #312]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360a:	f7fd fa6f 	bl	8000aec <HAL_GetTick>
 800360e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003610:	e008      	b.n	8003624 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003612:	f7fd fa6b 	bl	8000aec <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e086      	b.n	8003732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003624:	4b45      	ldr	r3, [pc, #276]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003630:	4b42      	ldr	r3, [pc, #264]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	051b      	lsls	r3, r3, #20
 800363e:	493f      	ldr	r1, [pc, #252]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003640:	4313      	orrs	r3, r2
 8003642:	628b      	str	r3, [r1, #40]	@ 0x28
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	3b01      	subs	r3, #1
 800364a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	3b01      	subs	r3, #1
 8003654:	025b      	lsls	r3, r3, #9
 8003656:	b29b      	uxth	r3, r3
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	3b01      	subs	r3, #1
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003674:	4931      	ldr	r1, [pc, #196]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800367a:	4b30      	ldr	r3, [pc, #192]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	492d      	ldr	r1, [pc, #180]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	4928      	ldr	r1, [pc, #160]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800369e:	4b27      	ldr	r3, [pc, #156]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	4a26      	ldr	r2, [pc, #152]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <RCCEx_PLL3_Config+0x160>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	69d2      	ldr	r2, [r2, #28]
 80036b6:	00d2      	lsls	r2, r2, #3
 80036b8:	4920      	ldr	r1, [pc, #128]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80036be:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80036d0:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	4a19      	ldr	r2, [pc, #100]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80036dc:	e00f      	b.n	80036fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80036e4:	4b15      	ldr	r3, [pc, #84]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	4a14      	ldr	r2, [pc, #80]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80036f0:	e005      	b.n	80036fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	4a11      	ldr	r2, [pc, #68]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80036fe:	4b0f      	ldr	r3, [pc, #60]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a0e      	ldr	r2, [pc, #56]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370a:	f7fd f9ef 	bl	8000aec <HAL_GetTick>
 800370e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003710:	e008      	b.n	8003724 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003712:	f7fd f9eb 	bl	8000aec <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <RCCEx_PLL3_Config+0x15c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
 8003740:	ffff0007 	.word	0xffff0007

08003744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e10f      	b.n	8003976 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a87      	ldr	r2, [pc, #540]	@ (8003980 <HAL_SPI_Init+0x23c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00f      	beq.n	8003786 <HAL_SPI_Init+0x42>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a86      	ldr	r2, [pc, #536]	@ (8003984 <HAL_SPI_Init+0x240>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00a      	beq.n	8003786 <HAL_SPI_Init+0x42>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a84      	ldr	r2, [pc, #528]	@ (8003988 <HAL_SPI_Init+0x244>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d005      	beq.n	8003786 <HAL_SPI_Init+0x42>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	d901      	bls.n	8003786 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0f7      	b.n	8003976 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f900 	bl	800398c <SPI_GetPacketSize>
 800378c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7b      	ldr	r2, [pc, #492]	@ (8003980 <HAL_SPI_Init+0x23c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00c      	beq.n	80037b2 <HAL_SPI_Init+0x6e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a79      	ldr	r2, [pc, #484]	@ (8003984 <HAL_SPI_Init+0x240>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_SPI_Init+0x6e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a78      	ldr	r2, [pc, #480]	@ (8003988 <HAL_SPI_Init+0x244>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d002      	beq.n	80037b2 <HAL_SPI_Init+0x6e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d811      	bhi.n	80037d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80037b6:	4a72      	ldr	r2, [pc, #456]	@ (8003980 <HAL_SPI_Init+0x23c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a70      	ldr	r2, [pc, #448]	@ (8003984 <HAL_SPI_Init+0x240>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_SPI_Init+0x8c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003988 <HAL_SPI_Init+0x244>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d104      	bne.n	80037da <HAL_SPI_Init+0x96>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d901      	bls.n	80037da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0cd      	b.n	8003976 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd f834 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003816:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003820:	d119      	bne.n	8003856 <HAL_SPI_Init+0x112>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800382a:	d103      	bne.n	8003834 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003844:	d107      	bne.n	8003856 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00f      	beq.n	8003882 <HAL_SPI_Init+0x13e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b06      	cmp	r3, #6
 8003868:	d90b      	bls.n	8003882 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e007      	b.n	8003892 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	431a      	orrs	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	ea42 0103 	orr.w	r1, r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	ea42 0103 	orr.w	r1, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003930:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40013000 	.word	0x40013000
 8003984:	40003800 	.word	0x40003800
 8003988:	40003c00 	.word	0x40003c00

0800398c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3307      	adds	r3, #7
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <memset>:
 80039c2:	4402      	add	r2, r0
 80039c4:	4603      	mov	r3, r0
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d100      	bne.n	80039cc <memset+0xa>
 80039ca:	4770      	bx	lr
 80039cc:	f803 1b01 	strb.w	r1, [r3], #1
 80039d0:	e7f9      	b.n	80039c6 <memset+0x4>
	...

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4d0d      	ldr	r5, [pc, #52]	@ (8003a0c <__libc_init_array+0x38>)
 80039d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003a10 <__libc_init_array+0x3c>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	2600      	movs	r6, #0
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003a14 <__libc_init_array+0x40>)
 80039e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003a18 <__libc_init_array+0x44>)
 80039e8:	f000 f818 	bl	8003a1c <_init>
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	2600      	movs	r6, #0
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003a44 	.word	0x08003a44
 8003a10:	08003a44 	.word	0x08003a44
 8003a14:	08003a44 	.word	0x08003a44
 8003a18:	08003a48 	.word	0x08003a48

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
