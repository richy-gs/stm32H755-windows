
stm32H755_IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080099a0  080099a0  0000a9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb0  08009eb0  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb0  08009eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb8  08009eb8  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb8  08009eb8  0000aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ebc  08009ebc  0000aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08009ec0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  240001d8  0800a098  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000480  0800a098  0000b480  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ed4  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290c  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000229e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc2  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ac68  00000000  00000000  000244e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f38  00000000  00000000  0005f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d8c5  00000000  00000000  00075082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e4c  00000000  00000000  001f298c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001f77d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009984 	.word	0x08009984

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009984 	.word	0x08009984

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <main+0xd8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fa4d 	bl	8000c74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f001 f843 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f85b 	bl	8000898 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <main+0xd8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a26      	ldr	r2, [pc, #152]	@ (8000884 <main+0xd8>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <main+0xd8>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fbb9 	bl	8001f78 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fbcf 	bl	8001fac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <main+0xd8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fa1f 	bl	8000c74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f935 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f8e7 	bl	8000a0c <MX_USART3_UART_Init>
  MX_I2C4_Init();
 800083e:	f000 f8a5 	bl	800098c <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mpu6050_init(&hi2c4, AD0_LOW, AFSR_2G, GFSR_250DPS, 0.98, 0.004);
 8000842:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8000888 <main+0xdc>
 8000846:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800088c <main+0xe0>
 800084a:	2300      	movs	r3, #0
 800084c:	2200      	movs	r2, #0
 800084e:	2168      	movs	r1, #104	@ 0x68
 8000850:	480f      	ldr	r0, [pc, #60]	@ (8000890 <main+0xe4>)
 8000852:	f000 fa15 	bl	8000c80 <mpu6050_init>
  // Calibrar el acelerometro
  MPU_calibrateAccel(&hi2c4, 1000);
 8000856:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <main+0xe4>)
 800085c:	f000 fd2e 	bl	80012bc <MPU_calibrateAccel>
  // Calibrar el giroscopio
  MPU_calibrateGyro(&hi2c4, 1000);
 8000860:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <main+0xe4>)
 8000866:	f000 fd83 	bl	8001370 <MPU_calibrateGyro>
  while (1)
  {
	  MPU_readProcessedData(&hi2c4);
 800086a:	4809      	ldr	r0, [pc, #36]	@ (8000890 <main+0xe4>)
 800086c:	f000 fc30 	bl	80010d0 <MPU_readProcessedData>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000870:	2101      	movs	r1, #1
 8000872:	4808      	ldr	r0, [pc, #32]	@ (8000894 <main+0xe8>)
 8000874:	f001 fb65 	bl	8001f42 <HAL_GPIO_TogglePin>
	  HAL_Delay(900);
 8000878:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800087c:	f001 f884 	bl	8001988 <HAL_Delay>
	  MPU_readProcessedData(&hi2c4);
 8000880:	bf00      	nop
 8000882:	e7f2      	b.n	800086a <main+0xbe>
 8000884:	58024400 	.word	0x58024400
 8000888:	3b83126f 	.word	0x3b83126f
 800088c:	3f7ae148 	.word	0x3f7ae148
 8000890:	240001f4 	.word	0x240001f4
 8000894:	58020400 	.word	0x58020400

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	224c      	movs	r2, #76	@ 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 ffc9 	bl	800783e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 ffc3 	bl	800783e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b8:	2004      	movs	r0, #4
 80008ba:	f002 fa9b 	bl	8002df4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <SystemClock_Config+0xec>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <SystemClock_Config+0xec>)
 80008c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <SystemClock_Config+0xec>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <SystemClock_Config+0xf0>)
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <SystemClock_Config+0xf0>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xf0>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f0:	bf00      	nop
 80008f2:	4b24      	ldr	r3, [pc, #144]	@ (8000984 <SystemClock_Config+0xec>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000904:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000916:	23f0      	movs	r3, #240	@ 0xf0
 8000918:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800091e:	2305      	movs	r3, #5
 8000920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000926:	2308      	movs	r3, #8
 8000928:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fab6 	bl	8002ea8 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000942:	f000 f997 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000952:	2308      	movs	r3, #8
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fef5 	bl	800375c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000978:	f000 f97c 	bl	8000c74 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3770      	adds	r7, #112	@ 0x70
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	58024800 	.word	0x58024800
 8000988:	58000400 	.word	0x58000400

0800098c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_I2C4_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <MX_I2C4_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_I2C4_Init+0x74>)
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <MX_I2C4_Init+0x7c>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_I2C4_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009c8:	f001 fb04 	bl	8001fd4 <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 f94f 	bl	8000c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009da:	f002 f973 	bl	8002cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 f946 	bl	8000c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_I2C4_Init+0x74>)
 80009ec:	f002 f9b5 	bl	8002d5a <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 f93d 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	240001f4 	.word	0x240001f4
 8000a04:	58001c00 	.word	0x58001c00
 8000a08:	307075b1 	.word	0x307075b1

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f005 f839 	bl	8005acc <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f908 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f006 f8cf 	bl	8006c0a <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f8ff 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f006 f904 	bl	8006c86 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f8f6 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f006 f885 	bl	8006b98 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f8ee 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000248 	.word	0x24000248
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b69      	ldr	r3, [pc, #420]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	4a67      	ldr	r2, [pc, #412]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aca:	4b65      	ldr	r3, [pc, #404]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b61      	ldr	r3, [pc, #388]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ade:	4a60      	ldr	r2, [pc, #384]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae8:	4b5d      	ldr	r3, [pc, #372]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a58      	ldr	r2, [pc, #352]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b56      	ldr	r3, [pc, #344]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b14:	4b52      	ldr	r3, [pc, #328]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a51      	ldr	r2, [pc, #324]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b4e      	ldr	r3, [pc, #312]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b4b      	ldr	r3, [pc, #300]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a49      	ldr	r2, [pc, #292]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b47      	ldr	r3, [pc, #284]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b50:	4b43      	ldr	r3, [pc, #268]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a42      	ldr	r2, [pc, #264]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <MX_GPIO_Init+0x1bc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b74:	483b      	ldr	r0, [pc, #236]	@ (8000c64 <MX_GPIO_Init+0x1c0>)
 8000b76:	f001 f9cb 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4836      	ldr	r0, [pc, #216]	@ (8000c68 <MX_GPIO_Init+0x1c4>)
 8000b90:	f001 f80e 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b94:	2332      	movs	r3, #50	@ 0x32
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	482e      	ldr	r0, [pc, #184]	@ (8000c68 <MX_GPIO_Init+0x1c4>)
 8000bb0:	f000 fffe 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bb4:	2386      	movs	r3, #134	@ 0x86
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <MX_GPIO_Init+0x1c8>)
 8000bd0:	f000 ffee 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bd4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0x1c0>)
 8000bee:	f000 ffdf 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4815      	ldr	r0, [pc, #84]	@ (8000c64 <MX_GPIO_Init+0x1c0>)
 8000c10:	f000 ffce 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c14:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c26:	230a      	movs	r3, #10
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_GPIO_Init+0x1c8>)
 8000c32:	f000 ffbd 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c36:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c48:	230b      	movs	r3, #11
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_GPIO_Init+0x1cc>)
 8000c54:	f000 ffac 	bl	8001bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	@ 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	58021800 	.word	0x58021800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <mpu6050_init>:
AccelOffset accelOffset;
GyroOffset gyroOffset;
Attitude attitude;

void mpu6050_init(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c92:	edc7 0a00 	vstr	s1, [r7]
 8000c96:	4603      	mov	r3, r0
 8000c98:	72fb      	strb	r3, [r7, #11]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	72bb      	strb	r3, [r7, #10]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	727b      	strb	r3, [r7, #9]
    uint8_t select = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75bb      	strb	r3, [r7, #22]
    // Save values
    mpu6050_addr = addr << 1;
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <mpu6050_init+0x100>)
 8000cae:	701a      	strb	r2, [r3, #0]
    tau_val = tau;
 8000cb0:	4a34      	ldr	r2, [pc, #208]	@ (8000d84 <mpu6050_init+0x104>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
    dt_val = dt;
 8000cb6:	4a34      	ldr	r2, [pc, #208]	@ (8000d88 <mpu6050_init+0x108>)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	6013      	str	r3, [r2, #0]

    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(I2Cx, (mpu6050_addr + 0), 1, I2C_TIMOUT_MS);
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <mpu6050_init+0x100>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f001 fc4d 	bl	8002568 <HAL_I2C_IsDeviceReady>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <mpu6050_init+0x60>
        printf("The device is OK\n\r");
 8000cd8:	482c      	ldr	r0, [pc, #176]	@ (8000d8c <mpu6050_init+0x10c>)
 8000cda:	f006 fd5b 	bl	8007794 <iprintf>
 8000cde:	e002      	b.n	8000ce6 <mpu6050_init+0x66>
    } else {
        printf("The device is not ready \n\r");
 8000ce0:	482b      	ldr	r0, [pc, #172]	@ (8000d90 <mpu6050_init+0x110>)
 8000ce2:	f006 fd57 	bl	8007794 <iprintf>
    }

    // Quit sleep mode and enable temperature sensor
    select = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75bb      	strb	r3, [r7, #22]
    ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8000cea:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <mpu6050_init+0x100>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	f107 0316 	add.w	r3, r7, #22
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	226b      	movs	r2, #107	@ 0x6b
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f001 fa01 	bl	800210c <HAL_I2C_Mem_Write>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <mpu6050_init+0x9c>
        printf("Out of sleep mode and temp sensor on is OK\n\r");
 8000d14:	481f      	ldr	r0, [pc, #124]	@ (8000d94 <mpu6050_init+0x114>)
 8000d16:	f006 fd3d 	bl	8007794 <iprintf>
 8000d1a:	e002      	b.n	8000d22 <mpu6050_init+0xa2>
    } else {
        printf("Sleep mode and temp sensor error \n\r");
 8000d1c:	481e      	ldr	r0, [pc, #120]	@ (8000d98 <mpu6050_init+0x118>)
 8000d1e:	f006 fd39 	bl	8007794 <iprintf>
    }

    // Set the full scale ranges
    ret = MPU_writeAccFullScaleRange(I2Cx, aScale);
 8000d22:	7abb      	ldrb	r3, [r7, #10]
 8000d24:	4619      	mov	r1, r3
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f000 f840 	bl	8000dac <MPU_writeAccFullScaleRange>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <mpu6050_init+0xbe>
        printf("Acc scale is OK\n\r");
 8000d36:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <mpu6050_init+0x11c>)
 8000d38:	f006 fd2c 	bl	8007794 <iprintf>
 8000d3c:	e002      	b.n	8000d44 <mpu6050_init+0xc4>
    } else {
        printf("Acc scale not ready \n\r");
 8000d3e:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <mpu6050_init+0x120>)
 8000d40:	f006 fd28 	bl	8007794 <iprintf>
    }

    ret = MPU_writeGyroFullScaleRange(I2Cx, gScale);
 8000d44:	7a7b      	ldrb	r3, [r7, #9]
 8000d46:	4619      	mov	r1, r3
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f000 f8cb 	bl	8000ee4 <MPU_writeGyroFullScaleRange>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <mpu6050_init+0xe0>
        printf("Gyro scale is OK\n\r");
 8000d58:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <mpu6050_init+0x124>)
 8000d5a:	f006 fd1b 	bl	8007794 <iprintf>
 8000d5e:	e002      	b.n	8000d66 <mpu6050_init+0xe6>
    } else {
        printf("Gyro scale not ready \n\r");
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <mpu6050_init+0x128>)
 8000d62:	f006 fd17 	bl	8007794 <iprintf>
    }

    // Calibrar el acelerómetro y el giroscopio
    MPU_calibrateAccel(I2Cx, 100); // Calibrar con 100 muestras
 8000d66:	2164      	movs	r1, #100	@ 0x64
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 faa7 	bl	80012bc <MPU_calibrateAccel>
    MPU_calibrateGyro(I2Cx, 100);  // Calibrar con 100 muestras
 8000d6e:	2164      	movs	r1, #100	@ 0x64
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f000 fafd 	bl	8001370 <MPU_calibrateGyro>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	240002dc 	.word	0x240002dc
 8000d84:	240002e4 	.word	0x240002e4
 8000d88:	240002e0 	.word	0x240002e0
 8000d8c:	080099a0 	.word	0x080099a0
 8000d90:	080099b4 	.word	0x080099b4
 8000d94:	080099d0 	.word	0x080099d0
 8000d98:	08009a00 	.word	0x08009a00
 8000d9c:	08009a24 	.word	0x08009a24
 8000da0:	08009a38 	.word	0x08009a38
 8000da4:	08009a50 	.word	0x08009a50
 8000da8:	08009a64 	.word	0x08009a64

08000dac <MPU_writeAccFullScaleRange>:

HAL_StatusTypeDef MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (aScale) {
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d86e      	bhi.n	8000ea0 <MPU_writeAccFullScaleRange+0xf4>
 8000dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc8 <MPU_writeAccFullScaleRange+0x1c>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000e0b 	.word	0x08000e0b
 8000dd0:	08000e3d 	.word	0x08000e3d
 8000dd4:	08000e6f 	.word	0x08000e6f
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8000dd8:	4b40      	ldr	r3, [pc, #256]	@ (8000edc <MPU_writeAccFullScaleRange+0x130>)
 8000dda:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000dde:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000de4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee0 <MPU_writeAccFullScaleRange+0x134>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f107 030e 	add.w	r3, r7, #14
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	221c      	movs	r2, #28
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 f984 	bl	800210c <HAL_I2C_Mem_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
        break;
 8000e08:	e063      	b.n	8000ed2 <MPU_writeAccFullScaleRange+0x126>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 8000e0a:	4b34      	ldr	r3, [pc, #208]	@ (8000edc <MPU_writeAccFullScaleRange+0x130>)
 8000e0c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8000e10:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8000e12:	2308      	movs	r3, #8
 8000e14:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <MPU_writeAccFullScaleRange+0x134>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	f107 030e 	add.w	r3, r7, #14
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	221c      	movs	r2, #28
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f001 f96b 	bl	800210c <HAL_I2C_Mem_Write>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
        break;
 8000e3a:	e04a      	b.n	8000ed2 <MPU_writeAccFullScaleRange+0x126>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MPU_writeAccFullScaleRange+0x130>)
 8000e3e:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000e42:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8000e44:	2310      	movs	r3, #16
 8000e46:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <MPU_writeAccFullScaleRange+0x134>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	f107 030e 	add.w	r3, r7, #14
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	221c      	movs	r2, #28
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f001 f952 	bl	800210c <HAL_I2C_Mem_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8000e6c:	e031      	b.n	8000ed2 <MPU_writeAccFullScaleRange+0x126>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MPU_writeAccFullScaleRange+0x130>)
 8000e70:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000e74:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8000e76:	2318      	movs	r3, #24
 8000e78:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MPU_writeAccFullScaleRange+0x134>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 030e 	add.w	r3, r7, #14
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	221c      	movs	r2, #28
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 f939 	bl	800210c <HAL_I2C_Mem_Write>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8000e9e:	e018      	b.n	8000ed2 <MPU_writeAccFullScaleRange+0x126>
    default:
        aScaleFactor = 16384.0;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MPU_writeAccFullScaleRange+0x130>)
 8000ea2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000ea6:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MPU_writeAccFullScaleRange+0x134>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	f107 030e 	add.w	r3, r7, #14
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	221c      	movs	r2, #28
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f001 f920 	bl	800210c <HAL_I2C_Mem_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
        break;
 8000ed0:	bf00      	nop
    }
    return ret;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	240002e8 	.word	0x240002e8
 8000ee0:	240002dc 	.word	0x240002dc

08000ee4 <MPU_writeGyroFullScaleRange>:

HAL_StatusTypeDef MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af04      	add	r7, sp, #16
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (gScale)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d86a      	bhi.n	8000fd0 <MPU_writeGyroFullScaleRange+0xec>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <MPU_writeGyroFullScaleRange+0x1c>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f41 	.word	0x08000f41
 8000f08:	08000f71 	.word	0x08000f71
 8000f0c:	08000fa1 	.word	0x08000fa1
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	@ (800100c <MPU_writeGyroFullScaleRange+0x128>)
 8000f12:	4a3f      	ldr	r2, [pc, #252]	@ (8001010 <MPU_writeGyroFullScaleRange+0x12c>)
 8000f14:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <MPU_writeGyroFullScaleRange+0x130>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 030e 	add.w	r3, r7, #14
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	221b      	movs	r2, #27
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 f8e9 	bl	800210c <HAL_I2C_Mem_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8000f3e:	e05f      	b.n	8001000 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 8000f40:	4b32      	ldr	r3, [pc, #200]	@ (800100c <MPU_writeGyroFullScaleRange+0x128>)
 8000f42:	4a35      	ldr	r2, [pc, #212]	@ (8001018 <MPU_writeGyroFullScaleRange+0x134>)
 8000f44:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8000f46:	2308      	movs	r3, #8
 8000f48:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000f4a:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <MPU_writeGyroFullScaleRange+0x130>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 030e 	add.w	r3, r7, #14
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	221b      	movs	r2, #27
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 f8d1 	bl	800210c <HAL_I2C_Mem_Write>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8000f6e:	e047      	b.n	8001000 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <MPU_writeGyroFullScaleRange+0x128>)
 8000f72:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <MPU_writeGyroFullScaleRange+0x138>)
 8000f74:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8000f76:	2310      	movs	r3, #16
 8000f78:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000f7a:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <MPU_writeGyroFullScaleRange+0x130>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	f107 030e 	add.w	r3, r7, #14
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	221b      	movs	r2, #27
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f001 f8b9 	bl	800210c <HAL_I2C_Mem_Write>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8000f9e:	e02f      	b.n	8001000 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MPU_writeGyroFullScaleRange+0x128>)
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <MPU_writeGyroFullScaleRange+0x13c>)
 8000fa4:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MPU_writeGyroFullScaleRange+0x130>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 030e 	add.w	r3, r7, #14
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	221b      	movs	r2, #27
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 f8a1 	bl	800210c <HAL_I2C_Mem_Write>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8000fce:	e017      	b.n	8001000 <MPU_writeGyroFullScaleRange+0x11c>
    default:
        gScaleFactor = 131.0;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MPU_writeGyroFullScaleRange+0x128>)
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <MPU_writeGyroFullScaleRange+0x12c>)
 8000fd4:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MPU_writeGyroFullScaleRange+0x130>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 030e 	add.w	r3, r7, #14
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	221b      	movs	r2, #27
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f001 f889 	bl	800210c <HAL_I2C_Mem_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8000ffe:	bf00      	nop
    }

    return ret;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240002ec 	.word	0x240002ec
 8001010:	43030000 	.word	0x43030000
 8001014:	240002dc 	.word	0x240002dc
 8001018:	42830000 	.word	0x42830000
 800101c:	42033333 	.word	0x42033333
 8001020:	41833333 	.word	0x41833333

08001024 <MPU_readRawData>:

void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af04      	add	r7, sp, #16
 800102a:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, (mpu6050_addr + 1), ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 800102c:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <MPU_readRawData+0xa0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b299      	uxth	r1, r3
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	230e      	movs	r3, #14
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	223b      	movs	r2, #59	@ 0x3b
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f001 f973 	bl	8002334 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 800104e:	7a3b      	ldrb	r3, [r7, #8]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7a7b      	ldrb	r3, [r7, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MPU_readRawData+0xa4>)
 800105e:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MPU_readRawData+0xa4>)
 8001070:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MPU_readRawData+0xa4>)
 8001082:	809a      	strh	r2, [r3, #4]
    rawData.gx = buf[8] << 8 | buf[9];
 8001084:	7c3b      	ldrb	r3, [r7, #16]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7c7b      	ldrb	r3, [r7, #17]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <MPU_readRawData+0xa4>)
 8001094:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8001096:	7cbb      	ldrb	r3, [r7, #18]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MPU_readRawData+0xa4>)
 80010a6:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7d7b      	ldrb	r3, [r7, #21]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <MPU_readRawData+0xa4>)
 80010b8:	815a      	strh	r2, [r3, #10]
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	240002dc 	.word	0x240002dc
 80010c8:	240002f0 	.word	0x240002f0
 80010cc:	00000000 	.word	0x00000000

080010d0 <MPU_readProcessedData>:

void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	ed2d 8b02 	vpush	{d8}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffa1 	bl	8001024 <MPU_readRawData>

    // Compensate for accelerometer offset
    sensorData.ax = (rawData.ax - accelOffset.x) * (9.81 / aScaleFactor);
 80010e2:	4b6f      	ldr	r3, [pc, #444]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f0:	4b6c      	ldr	r3, [pc, #432]	@ (80012a4 <MPU_readProcessedData+0x1d4>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010fe:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <MPU_readProcessedData+0x1d8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001108:	ed9f 4b61 	vldr	d4, [pc, #388]	@ 8001290 <MPU_readProcessedData+0x1c0>
 800110c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001110:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001114:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001118:	4b64      	ldr	r3, [pc, #400]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 800111a:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = (rawData.ay - accelOffset.y) * (9.81 / aScaleFactor);
 800111e:	4b60      	ldr	r3, [pc, #384]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 8001120:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112c:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <MPU_readProcessedData+0x1d4>)
 800112e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001136:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800113a:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <MPU_readProcessedData+0x1d8>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001144:	ed9f 4b52 	vldr	d4, [pc, #328]	@ 8001290 <MPU_readProcessedData+0x1c0>
 8001148:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800114c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001150:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001154:	4b55      	ldr	r3, [pc, #340]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 8001156:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = (rawData.az - accelOffset.z) * (9.81 / aScaleFactor);
 800115a:	4b51      	ldr	r3, [pc, #324]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 800115c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	4b4e      	ldr	r3, [pc, #312]	@ (80012a4 <MPU_readProcessedData+0x1d4>)
 800116a:	edd3 7a02 	vldr	s15, [r3, #8]
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001176:	4b4c      	ldr	r3, [pc, #304]	@ (80012a8 <MPU_readProcessedData+0x1d8>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001180:	ed9f 4b43 	vldr	d4, [pc, #268]	@ 8001290 <MPU_readProcessedData+0x1c0>
 8001184:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001188:	ee26 7b07 	vmul.f64	d7, d6, d7
 800118c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001190:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 8001192:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = (rawData.gx - gyroOffset.x) / gScaleFactor;
 8001196:	4b42      	ldr	r3, [pc, #264]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 8001198:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	4b42      	ldr	r3, [pc, #264]	@ (80012b0 <MPU_readProcessedData+0x1e0>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011ae:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <MPU_readProcessedData+0x1e4>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 80011ba:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = (rawData.gy - gyroOffset.y) / gScaleFactor;
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 80011c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	4b38      	ldr	r3, [pc, #224]	@ (80012b0 <MPU_readProcessedData+0x1e0>)
 80011ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <MPU_readProcessedData+0x1e4>)
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e0:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 80011e2:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = (rawData.gz - gyroOffset.z) / gScaleFactor;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <MPU_readProcessedData+0x1d0>)
 80011e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <MPU_readProcessedData+0x1e0>)
 80011f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011fe:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <MPU_readProcessedData+0x1e4>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 800120a:	edc3 7a05 	vstr	s15, [r3, #20]

//    printf("X-axis accelerometer is ax,ay,az = [%f, %f, %f]\n\r", sensorData.ax, sensorData.ay, sensorData.az);
//    printf("X-axis gyroscope is     gx,gy,gz = [%f, %f, %f]\n\r", sensorData.gx, sensorData.gy, sensorData.gz);

    // Calculate pitch and roll angles using accelerometer data
    float pitch = atan2(sensorData.ay, sqrt(sensorData.ax * sensorData.ax + sensorData.az * sensorData.az)) * (180.0 / M_PI);
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 8001210:	edd3 7a01 	vldr	s15, [r3, #4]
 8001214:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 800121a:	ed93 7a00 	vldr	s14, [r3]
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 800122a:	edd3 6a02 	vldr	s13, [r3, #8]
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MPU_readProcessedData+0x1dc>)
 8001230:	edd3 7a02 	vldr	s15, [r3, #8]
 8001234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001240:	eeb0 0b47 	vmov.f64	d0, d7
 8001244:	f008 f9b4 	bl	80095b0 <sqrt>
 8001248:	eeb0 7b40 	vmov.f64	d7, d0
 800124c:	eeb0 1b47 	vmov.f64	d1, d7
 8001250:	eeb0 0b48 	vmov.f64	d0, d8
 8001254:	f008 f9a8 	bl	80095a8 <atan2>
 8001258:	eeb0 7b40 	vmov.f64	d7, d0
 800125c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001298 <MPU_readProcessedData+0x1c8>
 8001260:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001264:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001268:	edc7 7a03 	vstr	s15, [r7, #12]
//    float roll = atan2(-sensorData.ax, sensorData.az) * (180.0 / M_PI);

    // Print the calculated pitch and roll angles
    printf("Pitch (degrees): %f\n\r", pitch);
 800126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001274:	ec53 2b17 	vmov	r2, r3, d7
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <MPU_readProcessedData+0x1e8>)
 800127a:	f006 fa8b 	bl	8007794 <iprintf>
//    printf("Roll (degrees): %f\n\r", roll);
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	ecbd 8b02 	vpop	{d8}
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	51eb851f 	.word	0x51eb851f
 8001294:	40239eb8 	.word	0x40239eb8
 8001298:	1a63c1f8 	.word	0x1a63c1f8
 800129c:	404ca5dc 	.word	0x404ca5dc
 80012a0:	240002f0 	.word	0x240002f0
 80012a4:	24000314 	.word	0x24000314
 80012a8:	240002e8 	.word	0x240002e8
 80012ac:	240002fc 	.word	0x240002fc
 80012b0:	24000320 	.word	0x24000320
 80012b4:	240002ec 	.word	0x240002ec
 80012b8:	08009a7c 	.word	0x08009a7c

080012bc <MPU_calibrateAccel>:

void MPU_calibrateAccel(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
    int32_t sum_ax = 0, sum_ay = 0, sum_az = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]

    for (uint16_t i = 0; i < numCalPoints; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	817b      	strh	r3, [r7, #10]
 80012d8:	e01d      	b.n	8001316 <MPU_calibrateAccel+0x5a>
    {
        MPU_readRawData(I2Cx);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fea2 	bl	8001024 <MPU_readRawData>

        sum_ax += rawData.ax;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MPU_calibrateAccel+0xac>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]
        sum_ay += rawData.ay;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <MPU_calibrateAccel+0xac>)
 80012f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4413      	add	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        sum_az += rawData.az;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MPU_calibrateAccel+0xac>)
 80012fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

        HAL_Delay(10); // Small delay between readings
 800130a:	200a      	movs	r0, #10
 800130c:	f000 fb3c 	bl	8001988 <HAL_Delay>
    for (uint16_t i = 0; i < numCalPoints; i++)
 8001310:	897b      	ldrh	r3, [r7, #10]
 8001312:	3301      	adds	r3, #1
 8001314:	817b      	strh	r3, [r7, #10]
 8001316:	897a      	ldrh	r2, [r7, #10]
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	429a      	cmp	r2, r3
 800131c:	d3dd      	bcc.n	80012da <MPU_calibrateAccel+0x1e>
    }

    accelOffset.x = (sum_ax / numCalPoints);
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MPU_calibrateAccel+0xb0>)
 8001330:	edc3 7a00 	vstr	s15, [r3]
    accelOffset.y = (sum_ay / numCalPoints);
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	fb92 f3f3 	sdiv	r3, r2, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MPU_calibrateAccel+0xb0>)
 8001346:	edc3 7a01 	vstr	s15, [r3, #4]
    accelOffset.z = (sum_az / numCalPoints); // Gravity compensation
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <MPU_calibrateAccel+0xb0>)
 800135c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	240002f0 	.word	0x240002f0
 800136c:	24000314 	.word	0x24000314

08001370 <MPU_calibrateGyro>:

void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
    int32_t sum_gx = 0, sum_gy = 0, sum_gz = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

    for (uint16_t i = 0; i < numCalPoints; i++)
 8001388:	2300      	movs	r3, #0
 800138a:	817b      	strh	r3, [r7, #10]
 800138c:	e01d      	b.n	80013ca <MPU_calibrateGyro+0x5a>
    {
        MPU_readRawData(I2Cx);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fe48 	bl	8001024 <MPU_readRawData>

        sum_gx += rawData.gx;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MPU_calibrateGyro+0xac>)
 8001396:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800139a:	461a      	mov	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4413      	add	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
        sum_gy += rawData.gy;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MPU_calibrateGyro+0xac>)
 80013a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013a8:	461a      	mov	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        sum_gz += rawData.gz;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MPU_calibrateGyro+0xac>)
 80013b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]

        HAL_Delay(10); // Small delay between readings
 80013be:	200a      	movs	r0, #10
 80013c0:	f000 fae2 	bl	8001988 <HAL_Delay>
    for (uint16_t i = 0; i < numCalPoints; i++)
 80013c4:	897b      	ldrh	r3, [r7, #10]
 80013c6:	3301      	adds	r3, #1
 80013c8:	817b      	strh	r3, [r7, #10]
 80013ca:	897a      	ldrh	r2, [r7, #10]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3dd      	bcc.n	800138e <MPU_calibrateGyro+0x1e>
    }

    gyroOffset.x = (sum_gx / numCalPoints);
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MPU_calibrateGyro+0xb0>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
    gyroOffset.y = (sum_gy / numCalPoints);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MPU_calibrateGyro+0xb0>)
 80013fa:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroOffset.z = (sum_gz / numCalPoints);
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	fb92 f3f3 	sdiv	r3, r2, r3
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <MPU_calibrateGyro+0xb0>)
 8001410:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	240002f0 	.word	0x240002f0
 8001420:	24000320 	.word	0x24000320

08001424 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800142c:	1d39      	adds	r1, r7, #4
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2201      	movs	r2, #1
 8001434:	4803      	ldr	r0, [pc, #12]	@ (8001444 <__io_putchar+0x20>)
 8001436:	f004 fb99 	bl	8005b6c <HAL_UART_Transmit>
  return ch;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24000248 	.word	0x24000248

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_MspInit+0x30>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001454:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x30>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x30>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	58024400 	.word	0x58024400

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ba      	sub	sp, #232	@ 0xe8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	22c0      	movs	r2, #192	@ 0xc0
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f006 f9ce 	bl	800783e <memset>
  if(hi2c->Instance==I2C4)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d146      	bne.n	800153a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014ac:	f04f 0210 	mov.w	r2, #16
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fcd6 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014ce:	f7ff fbd1 	bl	8000c74 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f8:	2312      	movs	r3, #18
 80014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800150a:	2304      	movs	r3, #4
 800150c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001510:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	@ (800154c <HAL_I2C_MspInit+0xd0>)
 8001518:	f000 fb4a 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 800151e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001528:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 800152e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800153a:	bf00      	nop
 800153c:	37e8      	adds	r7, #232	@ 0xe8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	58001c00 	.word	0x58001c00
 8001548:	58024400 	.word	0x58024400
 800154c:	58021400 	.word	0x58021400

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0ba      	sub	sp, #232	@ 0xe8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22c0      	movs	r2, #192	@ 0xc0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f006 f964 	bl	800783e <memset>
  if(huart->Instance==USART3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <HAL_UART_MspInit+0xc8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d146      	bne.n	800160e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001580:	f04f 0202 	mov.w	r2, #2
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fc6c 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015a2:	f7ff fb67 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_UART_MspInit+0xcc>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fc:	2307      	movs	r3, #7
 80015fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_UART_MspInit+0xd0>)
 800160a:	f000 fad1 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	37e8      	adds	r7, #232	@ 0xe8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004800 	.word	0x40004800
 800161c:	58024400 	.word	0x58024400
 8001620:	58020c00 	.word	0x58020c00

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f965 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return 1;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_kill>:

int _kill(int pid, int sig)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169c:	f006 f922 	bl	80078e4 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2216      	movs	r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_exit>:

void _exit (int status)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffe7 	bl	8001692 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <_exit+0x12>

080016c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe81 	bl	8001424 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
  }
  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f006 f886 	bl	80078e4 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24080000 	.word	0x24080000
 8001804:	00000400 	.word	0x00000400
 8001808:	2400032c 	.word	0x2400032c
 800180c:	24000480 	.word	0x24000480

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001814:	f7fe ff34 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f006 f857 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7fe ffb3 	bl	80007ac <main>
  bx  lr
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800184c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001850:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001854:	08009ec0 	.word	0x08009ec0
  ldr r2, =_sbss
 8001858:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800185c:	24000480 	.word	0x24000480

08001860 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC3_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f000 f96e 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001870:	f002 f92a 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_Init+0x68>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4913      	ldr	r1, [pc, #76]	@ (80018d0 <HAL_Init+0x6c>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_Init+0x68>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0e      	ldr	r2, [pc, #56]	@ (80018d0 <HAL_Init+0x6c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_Init+0x70>)
 80018a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a8:	4a0b      	ldr	r2, [pc, #44]	@ (80018d8 <HAL_Init+0x74>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f814 	bl	80018dc <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e002      	b.n	80018c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018be:	f7ff fdc3 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58024400 	.word	0x58024400
 80018d0:	08009a94 	.word	0x08009a94
 80018d4:	24000004 	.word	0x24000004
 80018d8:	24000000 	.word	0x24000000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e021      	b.n	8001934 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <HAL_InitTick+0x64>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_InitTick+0x60>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f945 	bl	8001b96 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f91d 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x68>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2400000c 	.word	0x2400000c
 8001940:	24000000 	.word	0x24000000
 8001944:	24000008 	.word	0x24000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2400000c 	.word	0x2400000c
 800196c:	24000330 	.word	0x24000330

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	24000330 	.word	0x24000330

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2400000c 	.word	0x2400000c

080019d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetREVID+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0c1b      	lsrs	r3, r3, #16
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	5c001000 	.word	0x5c001000

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	05fa0000 	.word	0x05fa0000

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff47 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff5e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff90 	bl	8001aa0 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5f 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffb2 	bl	8001b08 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bbe:	4b89      	ldr	r3, [pc, #548]	@ (8001de4 <HAL_GPIO_Init+0x234>)
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bc2:	e194      	b.n	8001eee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8186 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x44>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	69b9      	ldr	r1, [r7, #24]
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80e0 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_GPIO_Init+0x23c>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <HAL_GPIO_Init+0x240>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d052      	beq.n	8001e18 <HAL_GPIO_Init+0x268>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_GPIO_Init+0x244>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_GPIO_Init+0x248>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x22a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_GPIO_Init+0x24c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <HAL_GPIO_Init+0x250>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <HAL_GPIO_Init+0x254>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x258>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_GPIO_Init+0x25c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x260>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_GPIO_Init+0x264>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001dba:	2309      	movs	r3, #9
 8001dbc:	e02d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	e02b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e029      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e027      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e025      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e023      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e01f      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e01d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e01b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001de2:	bf00      	nop
 8001de4:	58000080 	.word	0x58000080
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58000400 	.word	0x58000400
 8001df0:	58020000 	.word	0x58020000
 8001df4:	58020400 	.word	0x58020400
 8001df8:	58020800 	.word	0x58020800
 8001dfc:	58020c00 	.word	0x58020c00
 8001e00:	58021000 	.word	0x58021000
 8001e04:	58021400 	.word	0x58021400
 8001e08:	58021800 	.word	0x58021800
 8001e0c:	58021c00 	.word	0x58021c00
 8001e10:	58022000 	.word	0x58022000
 8001e14:	58022400 	.word	0x58022400
 8001e18:	2300      	movs	r3, #0
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2a:	4938      	ldr	r1, [pc, #224]	@ (8001f0c <HAL_GPIO_Init+0x35c>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f ae63 	bne.w	8001bc4 <HAL_GPIO_Init+0x14>
  }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	@ 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	58000400 	.word	0x58000400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f54:	887a      	ldrh	r2, [r7, #2]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	400b      	ands	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f80:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_HSEM_FastTake+0x2c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3320      	adds	r3, #32
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_HSEM_FastTake+0x30>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	58026400 	.word	0x58026400
 8001fa8:	80000300 	.word	0x80000300

08001fac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001fb6:	4906      	ldr	r1, [pc, #24]	@ (8001fd0 <HAL_HSEM_Release+0x24>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	58026400 	.word	0x58026400

08001fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e08b      	b.n	80020fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fa3e 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	@ 0x24
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002024:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002034:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e006      	b.n	800205c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800205a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d108      	bne.n	8002076 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	e007      	b.n	8002086 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_I2C_Init+0x134>)
 8002092:	430b      	orrs	r3, r1
 8002094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69d9      	ldr	r1, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	02008000 	.word	0x02008000

0800210c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	817b      	strh	r3, [r7, #10]
 800211e:	460b      	mov	r3, r1
 8002120:	813b      	strh	r3, [r7, #8]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	f040 80f9 	bne.w	8002326 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_I2C_Mem_Write+0x34>
 800213a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0ed      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_I2C_Mem_Write+0x4e>
 8002156:	2302      	movs	r3, #2
 8002158:	e0e6      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002162:	f7ff fc05 	bl	8001970 <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2319      	movs	r3, #25
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fbaf 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d1      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2221      	movs	r2, #33	@ 0x21
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a3a      	ldr	r2, [r7, #32]
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ac:	88f8      	ldrh	r0, [r7, #6]
 80021ae:	893a      	ldrh	r2, [r7, #8]
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4603      	mov	r3, r0
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fabf 	bl	8002740 <I2C_RequestMemoryWrite>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0a9      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2bff      	cmp	r3, #255	@ 0xff
 80021dc:	d90e      	bls.n	80021fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	22ff      	movs	r2, #255	@ 0xff
 80021e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fd33 	bl	8002c60 <I2C_TransferConfig>
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	b2da      	uxtb	r2, r3
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fd22 	bl	8002c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fbb2 	bl	800298a <I2C_WaitOnTXISFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e07b      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d034      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x1c8>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d130      	bne.n	80022d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb2b 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e04d      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2bff      	cmp	r3, #255	@ 0xff
 8002294:	d90e      	bls.n	80022b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	22ff      	movs	r2, #255	@ 0xff
 800229a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	2300      	movs	r3, #0
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fcd7 	bl	8002c60 <I2C_TransferConfig>
 80022b2:	e00f      	b.n	80022d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fcc6 	bl	8002c60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d19e      	bne.n	800221c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fb98 	bl	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e01a      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2220      	movs	r2, #32
 80022f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_I2C_Mem_Write+0x224>)
 8002306:	400b      	ands	r3, r1
 8002308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	fe00e800 	.word	0xfe00e800

08002334 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	460b      	mov	r3, r1
 8002348:	813b      	strh	r3, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b20      	cmp	r3, #32
 8002358:	f040 80fd 	bne.w	8002556 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_I2C_Mem_Read+0x34>
 8002362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0f1      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Read+0x4e>
 800237e:	2302      	movs	r3, #2
 8002380:	e0ea      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800238a:	f7ff faf1 	bl	8001970 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa9b 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d5      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2222      	movs	r2, #34	@ 0x22
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	@ 0x40
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d4:	88f8      	ldrh	r0, [r7, #6]
 80023d6:	893a      	ldrh	r2, [r7, #8]
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4603      	mov	r3, r0
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9ff 	bl	80027e8 <I2C_RequestMemoryRead>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0ad      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2bff      	cmp	r3, #255	@ 0xff
 8002404:	d90e      	bls.n	8002424 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	@ 0xff
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <HAL_I2C_Mem_Read+0x22c>)
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fc1f 	bl	8002c60 <I2C_TransferConfig>
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	4b4a      	ldr	r3, [pc, #296]	@ (8002560 <HAL_I2C_Mem_Read+0x22c>)
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fc0e 	bl	8002c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244a:	2200      	movs	r2, #0
 800244c:	2104      	movs	r1, #4
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa42 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07c      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d034      	beq.n	8002504 <HAL_I2C_Mem_Read+0x1d0>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d130      	bne.n	8002504 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	@ 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa13 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04d      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2bff      	cmp	r3, #255	@ 0xff
 80024c4:	d90e      	bls.n	80024e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22ff      	movs	r2, #255	@ 0xff
 80024ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fbbf 	bl	8002c60 <I2C_TransferConfig>
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fbae 	bl	8002c60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d19a      	bne.n	8002444 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fa80 	bl	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01a      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_I2C_Mem_Read+0x230>)
 8002536:	400b      	ands	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	80002400 	.word	0x80002400
 8002564:	fe00e800 	.word	0xfe00e800

08002568 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	460b      	mov	r3, r1
 8002576:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b20      	cmp	r3, #32
 8002586:	f040 80d2 	bne.w	800272e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002598:	d101      	bne.n	800259e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e0c8      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_IsDeviceReady+0x44>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0c1      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2224      	movs	r2, #36	@ 0x24
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_I2C_IsDeviceReady+0x6e>
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_I2C_IsDeviceReady+0x1d0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	e004      	b.n	80025e0 <HAL_I2C_IsDeviceReady+0x78>
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025dc:	4b57      	ldr	r3, [pc, #348]	@ (800273c <HAL_I2C_IsDeviceReady+0x1d4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025e6:	f7ff f9c3 	bl	8001970 <HAL_GetTick>
 80025ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002618:	e034      	b.n	8002684 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d01a      	beq.n	8002658 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f9a5 	bl	8001970 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <HAL_I2C_IsDeviceReady+0xd0>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10f      	bne.n	8002658 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e06b      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002684:	7ffb      	ldrb	r3, [r7, #31]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_I2C_IsDeviceReady+0x128>
 800268a:	7fbb      	ldrb	r3, [r7, #30]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0c4      	beq.n	800261a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d01a      	beq.n	80026d4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2120      	movs	r1, #32
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f915 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e03b      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e02d      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	2120      	movs	r1, #32
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8fa 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e020      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2220      	movs	r2, #32
 80026fc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	f63f af5a 	bhi.w	80025c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	02002000 	.word	0x02002000
 800273c:	02002800 	.word	0x02002800

08002740 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <I2C_RequestMemoryWrite+0xa4>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fa79 	bl	8002c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f909 	bl	800298a <I2C_WaitOnTXISFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e02c      	b.n	80027dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002788:	893b      	ldrh	r3, [r7, #8]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	629a      	str	r2, [r3, #40]	@ 0x28
 8002792:	e015      	b.n	80027c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002794:	893b      	ldrh	r3, [r7, #8]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8ef 	bl	800298a <I2C_WaitOnTXISFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e012      	b.n	80027dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f884 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	80002000 	.word	0x80002000

080027e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	4b20      	ldr	r3, [pc, #128]	@ (800288c <I2C_RequestMemoryRead+0xa4>)
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa26 	bl	8002c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f8b6 	bl	800298a <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e02c      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282e:	893b      	ldrh	r3, [r7, #8]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
 8002838:	e015      	b.n	8002866 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800283a:	893b      	ldrh	r3, [r7, #8]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	b29b      	uxth	r3, r3
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f89c 	bl	800298a <I2C_WaitOnTXISFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e012      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2200      	movs	r2, #0
 800286e:	2140      	movs	r1, #64	@ 0x40
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f831 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	80002000 	.word	0x80002000

08002890 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d103      	bne.n	80028ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d007      	beq.n	80028cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	619a      	str	r2, [r3, #24]
  }
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	e03b      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f8d6 	bl	8002aa0 <I2C_IsErrorOccurred>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d02d      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7ff f833 	bl	8001970 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d122      	bne.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	429a      	cmp	r2, r3
 8002938:	d113      	bne.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	429a      	cmp	r2, r3
 800297e:	d0b4      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002996:	e033      	b.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f87f 	bl	8002aa0 <I2C_IsErrorOccurred>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e031      	b.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d025      	beq.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7fe ffdc 	bl	8001970 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11a      	bne.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d013      	beq.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d1c4      	bne.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a24:	e02f      	b.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f838 	bl	8002aa0 <I2C_IsErrorOccurred>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02d      	b.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe ff99 	bl	8001970 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11a      	bne.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d013      	beq.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d1c8      	bne.n	8002a26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d068      	beq.n	8002b9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ad4:	e049      	b.n	8002b6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d045      	beq.n	8002b6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7fe ff47 	bl	8001970 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_IsErrorOccurred+0x54>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13a      	bne.n	8002b6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b16:	d121      	bne.n	8002b5c <I2C_IsErrorOccurred+0xbc>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b1e:	d01d      	beq.n	8002b5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d01a      	beq.n	8002b5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b36:	f7fe ff1b 	bl	8001970 <HAL_GetTick>
 8002b3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3c:	e00e      	b.n	8002b5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b3e:	f7fe ff17 	bl	8001970 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b19      	cmp	r3, #25
 8002b4a:	d907      	bls.n	8002b5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f043 0320 	orr.w	r3, r3, #32
 8002b52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b5a:	e006      	b.n	8002b6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d1e9      	bne.n	8002b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d003      	beq.n	8002b80 <I2C_IsErrorOccurred+0xe0>
 8002b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0aa      	beq.n	8002ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01c      	beq.n	8002c4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fe3b 	bl	8002890 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <I2C_IsErrorOccurred+0x1bc>)
 8002c26:	400b      	ands	r3, r1
 8002c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	fe00e800 	.word	0xfe00e800

08002c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	817b      	strh	r3, [r7, #10]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c78:	7a7b      	ldrb	r3, [r7, #9]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	0d5b      	lsrs	r3, r3, #21
 8002c9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <I2C_TransferConfig+0x60>)
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	ea02 0103 	and.w	r1, r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	03ff63ff 	.word	0x03ff63ff

08002cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d138      	bne.n	8002d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e032      	b.n	8002d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	@ 0x24
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d139      	bne.n	8002de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e033      	b.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	@ 0x24
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d00a      	beq.n	8002e1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e08:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e040      	b.n	8002e9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e03e      	b.n	8002e9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e26:	491f      	ldr	r1, [pc, #124]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e2e:	f7fe fd9f 	bl	8001970 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e34:	e009      	b.n	8002e4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e36:	f7fe fd9b 	bl	8001970 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e44:	d901      	bls.n	8002e4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e028      	b.n	8002e9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e56:	d1ee      	bne.n	8002e36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b1e      	cmp	r3, #30
 8002e5c:	d008      	beq.n	8002e70 <HAL_PWREx_ConfigSupply+0x7c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e62:	d005      	beq.n	8002e70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b1d      	cmp	r3, #29
 8002e68:	d002      	beq.n	8002e70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e6e:	d114      	bne.n	8002e9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e70:	f7fe fd7e 	bl	8001970 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e76:	e009      	b.n	8002e8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e78:	f7fe fd7a 	bl	8001970 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e86:	d901      	bls.n	8002e8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d1ee      	bne.n	8002e78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58024800 	.word	0x58024800

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	@ 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f000 bc48 	b.w	800374c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8088 	beq.w	8002fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b99      	ldr	r3, [pc, #612]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed4:	4b96      	ldr	r3, [pc, #600]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d007      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x48>
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d111      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d06d      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x130>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d169      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f000 bc21 	b.w	800374c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x7a>
 8002f14:	4b86      	ldr	r3, [pc, #536]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a85      	ldr	r2, [pc, #532]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x9c>
 8002f2a:	4b81      	ldr	r3, [pc, #516]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a80      	ldr	r2, [pc, #512]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b7e      	ldr	r3, [pc, #504]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	4b78      	ldr	r3, [pc, #480]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a77      	ldr	r2, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b75      	ldr	r3, [pc, #468]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a74      	ldr	r2, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f68:	4b71      	ldr	r3, [pc, #452]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a70      	ldr	r2, [pc, #448]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b6e      	ldr	r3, [pc, #440]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6d      	ldr	r2, [pc, #436]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fcf2 	bl	8001970 <HAL_GetTick>
 8002f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fcee 	bl	8001970 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e3d4      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fcde 	bl	8001970 <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fcda 	bl	8001970 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e3c0      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fca:	4b59      	ldr	r3, [pc, #356]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x110>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80ca 	beq.w	800317c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe8:	4b51      	ldr	r3, [pc, #324]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ff0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_RCC_OscConfig+0x166>
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2b18      	cmp	r3, #24
 8003002:	d156      	bne.n	80030b2 <HAL_RCC_OscConfig+0x20a>
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d151      	bne.n	80030b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300e:	4b48      	ldr	r3, [pc, #288]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e392      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003026:	4b42      	ldr	r3, [pc, #264]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0219 	bic.w	r2, r3, #25
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	493f      	ldr	r1, [pc, #252]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe fc9a 	bl	8001970 <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe fc96 	bl	8001970 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e37c      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	f7fe fcb7 	bl	80019d0 <HAL_GetREVID>
 8003062:	4603      	mov	r3, r0
 8003064:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003068:	4293      	cmp	r3, r2
 800306a:	d817      	bhi.n	800309c <HAL_RCC_OscConfig+0x1f4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d108      	bne.n	8003086 <HAL_RCC_OscConfig+0x1de>
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800307c:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 800307e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003082:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003084:	e07a      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b2a      	ldr	r3, [pc, #168]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	031b      	lsls	r3, r3, #12
 8003094:	4926      	ldr	r1, [pc, #152]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309a:	e06f      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	4921      	ldr	r1, [pc, #132]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	e064      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d047      	beq.n	800314a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0219 	bic.w	r2, r3, #25
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	491a      	ldr	r1, [pc, #104]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fc50 	bl	8001970 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fc4c 	bl	8001970 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e332      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	f7fe fc6d 	bl	80019d0 <HAL_GetREVID>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d819      	bhi.n	8003134 <HAL_RCC_OscConfig+0x28c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d108      	bne.n	800311a <HAL_RCC_OscConfig+0x272>
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003116:	6053      	str	r3, [r2, #4]
 8003118:	e030      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	4901      	ldr	r1, [pc, #4]	@ (8003130 <HAL_RCC_OscConfig+0x288>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
 800312e:	e025      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
 8003130:	58024400 	.word	0x58024400
 8003134:	4b9a      	ldr	r3, [pc, #616]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	4997      	ldr	r1, [pc, #604]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	e018      	b.n	800317c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314a:	4b95      	ldr	r3, [pc, #596]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a94      	ldr	r2, [pc, #592]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fc0b 	bl	8001970 <HAL_GetTick>
 800315a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fc07 	bl	8001970 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e2ed      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003170:	4b8b      	ldr	r3, [pc, #556]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a9 	beq.w	80032dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318a:	4b85      	ldr	r3, [pc, #532]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003192:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003194:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d007      	beq.n	80031b0 <HAL_RCC_OscConfig+0x308>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b18      	cmp	r3, #24
 80031a4:	d13a      	bne.n	800321c <HAL_RCC_OscConfig+0x374>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d135      	bne.n	800321c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031b0:	4b7b      	ldr	r3, [pc, #492]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x320>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e2c1      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031c8:	f7fe fc02 	bl	80019d0 <HAL_GetREVID>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d817      	bhi.n	8003206 <HAL_RCC_OscConfig+0x35e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x348>
 80031de:	4b70      	ldr	r3, [pc, #448]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031e6:	4a6e      	ldr	r2, [pc, #440]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80031e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031ee:	e075      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031f0:	4b6b      	ldr	r3, [pc, #428]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	069b      	lsls	r3, r3, #26
 80031fe:	4968      	ldr	r1, [pc, #416]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003204:	e06a      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003206:	4b66      	ldr	r3, [pc, #408]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	4962      	ldr	r1, [pc, #392]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800321a:	e05f      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d042      	beq.n	80032aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003224:	4b5e      	ldr	r3, [pc, #376]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5d      	ldr	r2, [pc, #372]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fb9e 	bl	8001970 <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003238:	f7fe fb9a 	bl	8001970 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e280      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800324a:	4b55      	ldr	r3, [pc, #340]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003256:	f7fe fbbb 	bl	80019d0 <HAL_GetREVID>
 800325a:	4603      	mov	r3, r0
 800325c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003260:	4293      	cmp	r3, r2
 8003262:	d817      	bhi.n	8003294 <HAL_RCC_OscConfig+0x3ec>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	2b20      	cmp	r3, #32
 800326a:	d108      	bne.n	800327e <HAL_RCC_OscConfig+0x3d6>
 800326c:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003274:	4a4a      	ldr	r2, [pc, #296]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003276:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800327a:	6053      	str	r3, [r2, #4]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
 800327e:	4b48      	ldr	r3, [pc, #288]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	4944      	ldr	r1, [pc, #272]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
 8003292:	e023      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
 8003294:	4b42      	ldr	r3, [pc, #264]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	493f      	ldr	r1, [pc, #252]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60cb      	str	r3, [r1, #12]
 80032a8:	e018      	b.n	80032dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032aa:	4b3d      	ldr	r3, [pc, #244]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe fb5b 	bl	8001970 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032be:	f7fe fb57 	bl	8001970 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e23d      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032d0:	4b33      	ldr	r3, [pc, #204]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d036      	beq.n	8003356 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d019      	beq.n	8003324 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f0:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	4a2a      	ldr	r2, [pc, #168]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fb38 	bl	8001970 <HAL_GetTick>
 8003300:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fb34 	bl	8001970 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e21a      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x45c>
 8003322:	e018      	b.n	8003356 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe fb1e 	bl	8001970 <HAL_GetTick>
 8003334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003338:	f7fe fb1a 	bl	8001970 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e200      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d039      	beq.n	80033d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800336a:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0c      	ldr	r2, [pc, #48]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003374:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003376:	f7fe fafb 	bl	8001970 <HAL_GetTick>
 800337a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337e:	f7fe faf7 	bl	8001970 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1dd      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x4d6>
 800339c:	e01b      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a9a      	ldr	r2, [pc, #616]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80033aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fade 	bl	8001970 <HAL_GetTick>
 80033b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b8:	f7fe fada 	bl	8001970 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1c0      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ca:	4b92      	ldr	r3, [pc, #584]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8081 	beq.w	80034e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003618 <HAL_RCC_OscConfig+0x770>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003618 <HAL_RCC_OscConfig+0x770>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fabe 	bl	8001970 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fe faba 	bl	8001970 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	@ 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1a0      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340a:	4b83      	ldr	r3, [pc, #524]	@ (8003618 <HAL_RCC_OscConfig+0x770>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x584>
 800341e:	4b7d      	ldr	r3, [pc, #500]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	4a7c      	ldr	r2, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
 800342a:	e02d      	b.n	8003488 <HAL_RCC_OscConfig+0x5e0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10c      	bne.n	800344e <HAL_RCC_OscConfig+0x5a6>
 8003434:	4b77      	ldr	r3, [pc, #476]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a76      	ldr	r2, [pc, #472]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003440:	4b74      	ldr	r3, [pc, #464]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a73      	ldr	r2, [pc, #460]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x5e0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x5c8>
 8003456:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	4a6e      	ldr	r2, [pc, #440]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6713      	str	r3, [r2, #112]	@ 0x70
 8003462:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	4a6b      	ldr	r2, [pc, #428]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	@ 0x70
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0x5e0>
 8003470:	4b68      	ldr	r3, [pc, #416]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	4a67      	ldr	r2, [pc, #412]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6713      	str	r3, [r2, #112]	@ 0x70
 800347c:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	4a64      	ldr	r2, [pc, #400]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fe fa6e 	bl	8001970 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fa6a 	bl	8001970 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e14e      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ae:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ee      	beq.n	8003498 <HAL_RCC_OscConfig+0x5f0>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fa58 	bl	8001970 <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fa54 	bl	8001970 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e138      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034da:	4b4e      	ldr	r3, [pc, #312]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ee      	bne.n	80034c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 812d 	beq.w	800374a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034f0:	4b48      	ldr	r3, [pc, #288]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034f8:	2b18      	cmp	r3, #24
 80034fa:	f000 80bd 	beq.w	8003678 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 809e 	bne.w	8003644 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b42      	ldr	r3, [pc, #264]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a41      	ldr	r2, [pc, #260]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fa2c 	bl	8001970 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fa28 	bl	8001970 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e10e      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800352e:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800353e:	4b37      	ldr	r3, [pc, #220]	@ (800361c <HAL_RCC_OscConfig+0x774>)
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	430a      	orrs	r2, r1
 800354e:	4931      	ldr	r1, [pc, #196]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003550:	4313      	orrs	r3, r2
 8003552:	628b      	str	r3, [r1, #40]	@ 0x28
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	3b01      	subs	r3, #1
 800355a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	3b01      	subs	r3, #1
 8003564:	025b      	lsls	r3, r3, #9
 8003566:	b29b      	uxth	r3, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	3b01      	subs	r3, #1
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003584:	4923      	ldr	r1, [pc, #140]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800358a:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4a21      	ldr	r2, [pc, #132]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800359a:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <HAL_RCC_OscConfig+0x778>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	491b      	ldr	r1, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	f023 020c 	bic.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4917      	ldr	r1, [pc, #92]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035bc:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	f023 0202 	bic.w	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	4912      	ldr	r1, [pc, #72]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	4a10      	ldr	r2, [pc, #64]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035da:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a04      	ldr	r2, [pc, #16]	@ (8003614 <HAL_RCC_OscConfig+0x76c>)
 8003604:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe f9b1 	bl	8001970 <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003610:	e011      	b.n	8003636 <HAL_RCC_OscConfig+0x78e>
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400
 8003618:	58024800 	.word	0x58024800
 800361c:	fffffc0c 	.word	0xfffffc0c
 8003620:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe f9a4 	bl	8001970 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e08a      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x77c>
 8003642:	e082      	b.n	800374a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003644:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe f98e 	bl	8001970 <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe f98a 	bl	8001970 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e070      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366a:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x7b0>
 8003676:	e068      	b.n	800374a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003678:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800367e:	4b35      	ldr	r3, [pc, #212]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	2b01      	cmp	r3, #1
 800368a:	d031      	beq.n	80036f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d12a      	bne.n	80036f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d122      	bne.n	80036f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11a      	bne.n	80036f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0a5b      	lsrs	r3, r3, #9
 80036be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d111      	bne.n	80036f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d108      	bne.n	80036f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0e1b      	lsrs	r3, r3, #24
 80036e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e02b      	b.n	800374c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80036f4:	4b17      	ldr	r3, [pc, #92]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 80036f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f8:	08db      	lsrs	r3, r3, #3
 80036fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d01f      	beq.n	800374a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	4a11      	ldr	r2, [pc, #68]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003716:	f7fe f92b 	bl	8001970 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800371c:	bf00      	nop
 800371e:	f7fe f927 	bl	8001970 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	4293      	cmp	r3, r2
 8003728:	d0f9      	beq.n	800371e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800372c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_RCC_OscConfig+0x8b0>)
 8003730:	4013      	ands	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003736:	00d2      	lsls	r2, r2, #3
 8003738:	4906      	ldr	r1, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 800373a:	4313      	orrs	r3, r2
 800373c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <HAL_RCC_OscConfig+0x8ac>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	@ 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58024400 	.word	0x58024400
 8003758:	ffff0007 	.word	0xffff0007

0800375c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e19c      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b8a      	ldr	r3, [pc, #552]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b87      	ldr	r3, [pc, #540]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	4985      	ldr	r1, [pc, #532]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b83      	ldr	r3, [pc, #524]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e184      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	4b7b      	ldr	r3, [pc, #492]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d908      	bls.n	80037ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037bc:	4b78      	ldr	r3, [pc, #480]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4975      	ldr	r1, [pc, #468]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d010      	beq.n	80037fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d908      	bls.n	80037fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ea:	4b6d      	ldr	r3, [pc, #436]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	496a      	ldr	r1, [pc, #424]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	4b64      	ldr	r3, [pc, #400]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003814:	429a      	cmp	r2, r3
 8003816:	d908      	bls.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003818:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	495e      	ldr	r1, [pc, #376]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003826:	4313      	orrs	r3, r2
 8003828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d010      	beq.n	8003858 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	4b59      	ldr	r3, [pc, #356]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003842:	429a      	cmp	r2, r3
 8003844:	d908      	bls.n	8003858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003846:	4b56      	ldr	r3, [pc, #344]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4953      	ldr	r1, [pc, #332]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003854:	4313      	orrs	r3, r2
 8003856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	429a      	cmp	r2, r3
 8003872:	d908      	bls.n	8003886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f023 020f 	bic.w	r2, r3, #15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4947      	ldr	r1, [pc, #284]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003882:	4313      	orrs	r3, r2
 8003884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d055      	beq.n	800393e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003892:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4940      	ldr	r1, [pc, #256]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ac:	4b3c      	ldr	r3, [pc, #240]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d121      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0f6      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d115      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0ea      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038dc:	4b30      	ldr	r3, [pc, #192]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0de      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ec:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0d6      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4925      	ldr	r1, [pc, #148]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390e:	f7fe f82f 	bl	8001970 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003914:	e00a      	b.n	800392c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003916:	f7fe f82b 	bl	8001970 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0be      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392c:	4b1c      	ldr	r3, [pc, #112]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	429a      	cmp	r2, r3
 800393c:	d1eb      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	429a      	cmp	r2, r3
 8003958:	d208      	bcs.n	800396c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395a:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f023 020f 	bic.w	r2, r3, #15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	490e      	ldr	r1, [pc, #56]	@ (80039a0 <HAL_RCC_ClockConfig+0x244>)
 8003968:	4313      	orrs	r3, r2
 800396a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d214      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 020f 	bic.w	r2, r3, #15
 8003982:	4906      	ldr	r1, [pc, #24]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b04      	ldr	r3, [pc, #16]	@ (800399c <HAL_RCC_ClockConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e086      	b.n	8003aaa <HAL_RCC_ClockConfig+0x34e>
 800399c:	52002000 	.word	0x52002000
 80039a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039bc:	429a      	cmp	r2, r3
 80039be:	d208      	bcs.n	80039d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039c0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	4939      	ldr	r1, [pc, #228]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	4b34      	ldr	r3, [pc, #208]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d208      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ee:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	492e      	ldr	r1, [pc, #184]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699a      	ldr	r2, [r3, #24]
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d208      	bcs.n	8003a2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a1c:	4b25      	ldr	r3, [pc, #148]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	4922      	ldr	r1, [pc, #136]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d208      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	4917      	ldr	r1, [pc, #92]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a5c:	f000 f834 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	4912      	ldr	r1, [pc, #72]	@ (8003ab8 <HAL_RCC_ClockConfig+0x35c>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_RCC_ClockConfig+0x358>)
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <HAL_RCC_ClockConfig+0x35c>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x360>)
 8003a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a94:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <HAL_RCC_ClockConfig+0x364>)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x368>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd ff1c 	bl	80018dc <HAL_InitTick>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	08009a94 	.word	0x08009a94
 8003abc:	24000004 	.word	0x24000004
 8003ac0:	24000000 	.word	0x24000000
 8003ac4:	24000008 	.word	0x24000008

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ace:	4bb3      	ldr	r3, [pc, #716]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ad6:	2b18      	cmp	r3, #24
 8003ad8:	f200 8155 	bhi.w	8003d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8003adc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003d87 	.word	0x08003d87
 8003aec:	08003d87 	.word	0x08003d87
 8003af0:	08003d87 	.word	0x08003d87
 8003af4:	08003d87 	.word	0x08003d87
 8003af8:	08003d87 	.word	0x08003d87
 8003afc:	08003d87 	.word	0x08003d87
 8003b00:	08003d87 	.word	0x08003d87
 8003b04:	08003b6f 	.word	0x08003b6f
 8003b08:	08003d87 	.word	0x08003d87
 8003b0c:	08003d87 	.word	0x08003d87
 8003b10:	08003d87 	.word	0x08003d87
 8003b14:	08003d87 	.word	0x08003d87
 8003b18:	08003d87 	.word	0x08003d87
 8003b1c:	08003d87 	.word	0x08003d87
 8003b20:	08003d87 	.word	0x08003d87
 8003b24:	08003b75 	.word	0x08003b75
 8003b28:	08003d87 	.word	0x08003d87
 8003b2c:	08003d87 	.word	0x08003d87
 8003b30:	08003d87 	.word	0x08003d87
 8003b34:	08003d87 	.word	0x08003d87
 8003b38:	08003d87 	.word	0x08003d87
 8003b3c:	08003d87 	.word	0x08003d87
 8003b40:	08003d87 	.word	0x08003d87
 8003b44:	08003b7b 	.word	0x08003b7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b48:	4b94      	ldr	r3, [pc, #592]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b54:	4b91      	ldr	r3, [pc, #580]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	08db      	lsrs	r3, r3, #3
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	4a90      	ldr	r2, [pc, #576]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b66:	e111      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b68:	4b8d      	ldr	r3, [pc, #564]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b6a:	61bb      	str	r3, [r7, #24]
      break;
 8003b6c:	e10e      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b70:	61bb      	str	r3, [r7, #24]
      break;
 8003b72:	e10b      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b74:	4b8c      	ldr	r3, [pc, #560]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b76:	61bb      	str	r3, [r7, #24]
      break;
 8003b78:	e108      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b7a:	4b88      	ldr	r3, [pc, #544]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b84:	4b85      	ldr	r3, [pc, #532]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b90:	4b82      	ldr	r3, [pc, #520]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b9a:	4b80      	ldr	r3, [pc, #512]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	08db      	lsrs	r3, r3, #3
 8003ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80e1 	beq.w	8003d80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	f000 8083 	beq.w	8003ccc <HAL_RCC_GetSysClockFreq+0x204>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f200 80a1 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x248>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x114>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d056      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003bda:	e099      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02d      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003be8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	4a6b      	ldr	r2, [pc, #428]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b62      	ldr	r3, [pc, #392]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c42:	e087      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b51      	ldr	r3, [pc, #324]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c86:	e065      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b40      	ldr	r3, [pc, #256]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cca:	e043      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cde:	4b2f      	ldr	r3, [pc, #188]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d0e:	e021      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d22:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5e:	3301      	adds	r3, #1
 8003d60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d78:	ee17 3a90 	vmov	r3, s15
 8003d7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d7e:	e005      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
      break;
 8003d84:	e002      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d86:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d88:	61bb      	str	r3, [r7, #24]
      break;
 8003d8a:	bf00      	nop
  }

  return sysclockfreq;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	@ 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	03d09000 	.word	0x03d09000
 8003da4:	003d0900 	.word	0x003d0900
 8003da8:	007a1200 	.word	0x007a1200
 8003dac:	46000000 	.word	0x46000000
 8003db0:	4c742400 	.word	0x4c742400
 8003db4:	4a742400 	.word	0x4a742400
 8003db8:	4af42400 	.word	0x4af42400

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003dc2:	f7ff fe81 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490f      	ldr	r1, [pc, #60]	@ (8003e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8003df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dfa:	4a07      	ldr	r2, [pc, #28]	@ (8003e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e00:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	08009a94 	.word	0x08009a94
 8003e14:	24000004 	.word	0x24000004
 8003e18:	24000000 	.word	0x24000000

08003e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e20:	f7ff ffcc 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4904      	ldr	r1, [pc, #16]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	58024400 	.word	0x58024400
 8003e44:	08009a94 	.word	0x08009a94

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e4c:	f7ff ffb6 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4904      	ldr	r1, [pc, #16]	@ (8003e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	08009a94 	.word	0x08009a94

08003e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0ca      	sub	sp, #296	@ 0x128
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003e98:	2500      	movs	r5, #0
 8003e9a:	ea54 0305 	orrs.w	r3, r4, r5
 8003e9e:	d049      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003eac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eb0:	d828      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb6:	d01a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ebc:	d822      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ec8:	e01c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eca:	4bb8      	ldr	r3, [pc, #736]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	4ab7      	ldr	r2, [pc, #732]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ed6:	e01a      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	3308      	adds	r3, #8
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fc8f 	bl	8005804 <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	3328      	adds	r3, #40	@ 0x28
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fd36 	bl	8005968 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f16:	4ba5      	ldr	r3, [pc, #660]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f24:	4aa1      	ldr	r2, [pc, #644]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003f40:	f04f 0900 	mov.w	r9, #0
 8003f44:	ea58 0309 	orrs.w	r3, r8, r9
 8003f48:	d047      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d82a      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f54:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f7f 	.word	0x08003f7f
 8003f64:	08003f95 	.word	0x08003f95
 8003f68:	08003fb3 	.word	0x08003fb3
 8003f6c:	08003fb3 	.word	0x08003fb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f70:	4b8e      	ldr	r3, [pc, #568]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a8d      	ldr	r2, [pc, #564]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e01a      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	3308      	adds	r3, #8
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fc3c 	bl	8005804 <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	3328      	adds	r3, #40	@ 0x28
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fce3 	bl	8005968 <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc0:	f023 0107 	bic.w	r1, r3, #7
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	4a78      	ldr	r2, [pc, #480]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fee:	d04c      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ffa:	d030      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004000:	d829      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004002:	2bc0      	cmp	r3, #192	@ 0xc0
 8004004:	d02d      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004006:	2bc0      	cmp	r3, #192	@ 0xc0
 8004008:	d825      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800400a:	2b80      	cmp	r3, #128	@ 0x80
 800400c:	d018      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800400e:	2b80      	cmp	r3, #128	@ 0x80
 8004010:	d821      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d007      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800401a:	e01c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b63      	ldr	r3, [pc, #396]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4a62      	ldr	r2, [pc, #392]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004028:	e01c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	3308      	adds	r3, #8
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fbe6 	bl	8005804 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	3328      	adds	r3, #40	@ 0x28
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fc8d 	bl	8005968 <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406c:	4b4f      	ldr	r3, [pc, #316]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800406e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004070:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	4a4c      	ldr	r2, [pc, #304]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004096:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80040a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d053      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040b6:	d035      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040bc:	d82e      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80040c2:	d031      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80040c8:	d828      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ce:	d01a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d4:	d822      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80040da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040de:	d007      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80040e0:	e01c      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e2:	4b32      	ldr	r3, [pc, #200]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a31      	ldr	r2, [pc, #196]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ee:	e01c      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f4:	3308      	adds	r3, #8
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fb83 	bl	8005804 <RCCEx_PLL2_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004104:	e011      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	3328      	adds	r3, #40	@ 0x28
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fc2a 	bl	8005968 <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004132:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004142:	4a1a      	ldr	r2, [pc, #104]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6593      	str	r3, [r2, #88]	@ 0x58
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800415e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004168:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d056      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800417a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800417e:	d038      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004184:	d831      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004186:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800418a:	d034      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800418c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004190:	d82b      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004196:	d01d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800419c:	d825      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80041a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041a8:	e01f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4ba2      	ldr	r3, [pc, #648]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	4aa1      	ldr	r2, [pc, #644]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041bc:	e01c      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3308      	adds	r3, #8
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fb1c 	bl	8005804 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041d2:	e011      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d8:	3328      	adds	r3, #40	@ 0x28
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fbc3 	bl	8005968 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004200:	4b8e      	ldr	r3, [pc, #568]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004210:	4a8a      	ldr	r2, [pc, #552]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004212:	430b      	orrs	r3, r1
 8004214:	6593      	str	r3, [r2, #88]	@ 0x58
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800422c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004236:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d03a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	2b30      	cmp	r3, #48	@ 0x30
 8004248:	d01f      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800424a:	2b30      	cmp	r3, #48	@ 0x30
 800424c:	d819      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800424e:	2b20      	cmp	r3, #32
 8004250:	d00c      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004252:	2b20      	cmp	r3, #32
 8004254:	d815      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d019      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800425a:	2b10      	cmp	r3, #16
 800425c:	d111      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b77      	ldr	r3, [pc, #476]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a76      	ldr	r2, [pc, #472]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	3308      	adds	r3, #8
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fac5 	bl	8005804 <RCCEx_PLL2_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004298:	4b68      	ldr	r3, [pc, #416]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	4a65      	ldr	r2, [pc, #404]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80042c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80042cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d051      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e0:	d035      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e6:	d82e      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042ec:	d031      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80042ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042f2:	d828      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f8:	d01a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fe:	d822      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004308:	d007      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800430a:	e01c      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4b4b      	ldr	r3, [pc, #300]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	4a4a      	ldr	r2, [pc, #296]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004318:	e01c      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	3308      	adds	r3, #8
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f001 fa6e 	bl	8005804 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800432e:	e011      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	3328      	adds	r3, #40	@ 0x28
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f001 fb15 	bl	8005968 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004344:	e006      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434c:	e002      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800435c:	4b37      	ldr	r3, [pc, #220]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436a:	4a34      	ldr	r2, [pc, #208]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004394:	460b      	mov	r3, r1
 8004396:	4313      	orrs	r3, r2
 8004398:	d056      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a4:	d033      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043aa:	d82c      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043b0:	d02f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80043b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043b6:	d826      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043bc:	d02b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80043be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c2:	d820      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043c8:	d012      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80043ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ce:	d81a      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d8:	d115      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fa0e 	bl	8005804 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043ee:	e015      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	3328      	adds	r3, #40	@ 0x28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fab5 	bl	8005968 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800441a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004432:	4a02      	ldr	r2, [pc, #8]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004434:	430b      	orrs	r3, r1
 8004436:	6513      	str	r3, [r2, #80]	@ 0x50
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800445e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d055      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004474:	d033      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800447a:	d82c      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004480:	d02f      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004486:	d826      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004488:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800448c:	d02b      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800448e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004492:	d820      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004498:	d012      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800449a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800449e:	d81a      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d022      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80044a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044a8:	d115      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3308      	adds	r3, #8
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 f9a6 	bl	8005804 <RCCEx_PLL2_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044be:	e015      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	3328      	adds	r3, #40	@ 0x28
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fa4d 	bl	8005968 <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044d4:	e00a      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044de:	bf00      	nop
 80044e0:	e004      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044f4:	4ba3      	ldr	r3, [pc, #652]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004504:	4a9f      	ldr	r2, [pc, #636]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004506:	430b      	orrs	r3, r1
 8004508:	6593      	str	r3, [r2, #88]	@ 0x58
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800452a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d037      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800453e:	d00e      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004544:	d816      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d018      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800454a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800454e:	d111      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004550:	4b8c      	ldr	r3, [pc, #560]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	4a8b      	ldr	r2, [pc, #556]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800455c:	e00f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	3308      	adds	r3, #8
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f94c 	bl	8005804 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004586:	4b7f      	ldr	r3, [pc, #508]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	4a7b      	ldr	r2, [pc, #492]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004596:	430b      	orrs	r3, r1
 8004598:	6513      	str	r3, [r2, #80]	@ 0x50
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80045b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80045ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d039      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d81c      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80045ce:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004611 	.word	0x08004611
 80045d8:	080045e5 	.word	0x080045e5
 80045dc:	080045f3 	.word	0x080045f3
 80045e0:	08004611 	.word	0x08004611
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e4:	4b67      	ldr	r3, [pc, #412]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	4a66      	ldr	r2, [pc, #408]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	3308      	adds	r3, #8
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f902 	bl	8005804 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800461a:	4b5a      	ldr	r3, [pc, #360]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	f023 0103 	bic.w	r1, r3, #3
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004628:	4a56      	ldr	r2, [pc, #344]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462a:	430b      	orrs	r3, r1
 800462c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800464e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	f000 809f 	beq.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465a:	4b4b      	ldr	r3, [pc, #300]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4a      	ldr	r2, [pc, #296]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004666:	f7fd f983 	bl	8001970 <HAL_GetTick>
 800466a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fd f97e 	bl	8001970 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b64      	cmp	r3, #100	@ 0x64
 800467e:	d903      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004686:	e005      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004688:	4b3f      	ldr	r3, [pc, #252]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ed      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004698:	2b00      	cmp	r3, #0
 800469a:	d179      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800469e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046a8:	4053      	eors	r3, r2
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d015      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a30      	ldr	r2, [pc, #192]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ea:	d118      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd f940 	bl	8001970 <HAL_GetTick>
 80046f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f4:	e00d      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd f93b 	bl	8001970 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004710:	e005      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004712:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0eb      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d129      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800472e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004736:	d10e      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004738:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004748:	091a      	lsrs	r2, r3, #4
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800474c:	4013      	ands	r3, r2
 800474e:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004750:	430b      	orrs	r3, r1
 8004752:	6113      	str	r3, [r2, #16]
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004756:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004760:	6113      	str	r3, [r2, #16]
 8004762:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004764:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800476e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004772:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004774:	430b      	orrs	r3, r1
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
 8004778:	e00e      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004782:	e009      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004784:	58024400 	.word	0x58024400
 8004788:	58024800 	.word	0x58024800
 800478c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 0301 	and.w	r3, r2, #1
 80047a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f000 8089 	beq.w	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c0:	2b28      	cmp	r3, #40	@ 0x28
 80047c2:	d86b      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080048a5 	.word	0x080048a5
 80047d0:	0800489d 	.word	0x0800489d
 80047d4:	0800489d 	.word	0x0800489d
 80047d8:	0800489d 	.word	0x0800489d
 80047dc:	0800489d 	.word	0x0800489d
 80047e0:	0800489d 	.word	0x0800489d
 80047e4:	0800489d 	.word	0x0800489d
 80047e8:	0800489d 	.word	0x0800489d
 80047ec:	08004871 	.word	0x08004871
 80047f0:	0800489d 	.word	0x0800489d
 80047f4:	0800489d 	.word	0x0800489d
 80047f8:	0800489d 	.word	0x0800489d
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	0800489d 	.word	0x0800489d
 8004804:	0800489d 	.word	0x0800489d
 8004808:	0800489d 	.word	0x0800489d
 800480c:	08004887 	.word	0x08004887
 8004810:	0800489d 	.word	0x0800489d
 8004814:	0800489d 	.word	0x0800489d
 8004818:	0800489d 	.word	0x0800489d
 800481c:	0800489d 	.word	0x0800489d
 8004820:	0800489d 	.word	0x0800489d
 8004824:	0800489d 	.word	0x0800489d
 8004828:	0800489d 	.word	0x0800489d
 800482c:	080048a5 	.word	0x080048a5
 8004830:	0800489d 	.word	0x0800489d
 8004834:	0800489d 	.word	0x0800489d
 8004838:	0800489d 	.word	0x0800489d
 800483c:	0800489d 	.word	0x0800489d
 8004840:	0800489d 	.word	0x0800489d
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800489d 	.word	0x0800489d
 800484c:	080048a5 	.word	0x080048a5
 8004850:	0800489d 	.word	0x0800489d
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048a5 	.word	0x080048a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	3308      	adds	r3, #8
 8004876:	2101      	movs	r1, #1
 8004878:	4618      	mov	r0, r3
 800487a:	f000 ffc3 	bl	8005804 <RCCEx_PLL2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004884:	e00f      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	3328      	adds	r3, #40	@ 0x28
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f86a 	bl	8005968 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800489a:	e004      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80048a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048ae:	4bbf      	ldr	r3, [pc, #764]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048bc:	4abb      	ldr	r2, [pc, #748]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80048c2:	e003      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f002 0302 	and.w	r3, r2, #2
 80048d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80048e6:	460b      	mov	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	d041      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d824      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004949 	.word	0x08004949
 8004900:	08004915 	.word	0x08004915
 8004904:	0800492b 	.word	0x0800492b
 8004908:	08004949 	.word	0x08004949
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	3308      	adds	r3, #8
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f000 ff71 	bl	8005804 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	3328      	adds	r3, #40	@ 0x28
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f818 	bl	8005968 <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004952:	4b96      	ldr	r3, [pc, #600]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f023 0107 	bic.w	r1, r3, #7
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004960:	4a92      	ldr	r2, [pc, #584]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004962:	430b      	orrs	r3, r1
 8004964:	6553      	str	r3, [r2, #84]	@ 0x54
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 0304 	and.w	r3, r2, #4
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004986:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	d044      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004998:	2b05      	cmp	r3, #5
 800499a:	d825      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049bd 	.word	0x080049bd
 80049ac:	080049d3 	.word	0x080049d3
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	3308      	adds	r3, #8
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 ff1d 	bl	8005804 <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049d0:	e00f      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	3328      	adds	r3, #40	@ 0x28
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ffc4 	bl	8005968 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049e6:	e004      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80049f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049fa:	4b6c      	ldr	r3, [pc, #432]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	f023 0107 	bic.w	r1, r3, #7
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0a:	4a68      	ldr	r2, [pc, #416]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f002 0320 	and.w	r3, r2, #32
 8004a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d055      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a46:	d033      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a4c:	d82c      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d02f      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a58:	d826      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a5e:	d02b      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a64:	d820      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a6a:	d012      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a70:	d81a      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d022      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a7a:	d115      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	3308      	adds	r3, #8
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 febd 	bl	8005804 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a90:	e015      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	3328      	adds	r3, #40	@ 0x28
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 ff64 	bl	8005968 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004aa6:	e00a      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aae:	e006      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad6:	4a35      	ldr	r2, [pc, #212]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6553      	str	r3, [r2, #84]	@ 0x54
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004afc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d058      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b12:	d033      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b18:	d82c      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d02f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b24:	d826      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b2a:	d02b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b30:	d820      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b36:	d012      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3c:	d81a      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d022      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b46:	d115      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fe57 	bl	8005804 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e015      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	3328      	adds	r3, #40	@ 0x28
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fefe 	bl	8005968 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b72:	e00a      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ba2:	4a02      	ldr	r2, [pc, #8]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d055      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004be0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004be4:	d033      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004be6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004bea:	d82c      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf0:	d02f      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf6:	d826      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004bfc:	d02b      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004bfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c02:	d820      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c08:	d012      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0e:	d81a      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d022      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c18:	d115      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fdee 	bl	8005804 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e015      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	3328      	adds	r3, #40	@ 0x28
 8004c36:	2102      	movs	r1, #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fe95 	bl	8005968 <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c44:	e00a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c64:	4ba1      	ldr	r3, [pc, #644]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c74:	4a9d      	ldr	r2, [pc, #628]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f002 0308 	and.w	r3, r2, #8
 8004c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d01e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	3328      	adds	r3, #40	@ 0x28
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fe54 	bl	8005968 <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ccc:	4b87      	ldr	r3, [pc, #540]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cdc:	4a83      	ldr	r2, [pc, #524]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f002 0310 	and.w	r3, r2, #16
 8004cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d01e      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0e:	d10c      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	3328      	adds	r3, #40	@ 0x28
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fe25 	bl	8005968 <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d2a:	4b70      	ldr	r3, [pc, #448]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d03e      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d6c:	d022      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d72:	d81b      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004d7e:	e015      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d84:	3308      	adds	r3, #8
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fd3b 	bl	8005804 <RCCEx_PLL2_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d94:	e00f      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9a:	3328      	adds	r3, #40	@ 0x28
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fde2 	bl	8005968 <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004daa:	e004      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dce:	4a47      	ldr	r2, [pc, #284]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004dea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dec:	2300      	movs	r3, #0
 8004dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004df0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e0c:	d818      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e18:	d007      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e1a:	e011      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1c:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a32      	ldr	r2, [pc, #200]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e28:	e00f      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	3328      	adds	r3, #40	@ 0x28
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fd98 	bl	8005968 <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e3e:	e004      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e52:	4b26      	ldr	r3, [pc, #152]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	4a22      	ldr	r2, [pc, #136]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e80:	2300      	movs	r3, #0
 8004e82:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d034      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9c:	d007      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004e9e:	e011      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea0:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	4a11      	ldr	r2, [pc, #68]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004eac:	e00e      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fca4 	bl	8005804 <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	4a02      	ldr	r2, [pc, #8]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ee8:	e006      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f06:	2300      	movs	r3, #0
 8004f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d00c      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	3328      	adds	r3, #40	@ 0x28
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd23 	bl	8005968 <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d038      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f56:	d018      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5c:	d811      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f62:	d014      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d80b      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f74:	4bc3      	ldr	r3, [pc, #780]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4ac2      	ldr	r2, [pc, #776]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f9c:	4bb9      	ldr	r3, [pc, #740]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fac:	4ab5      	ldr	r2, [pc, #724]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fb2:	e003      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fca:	2300      	movs	r3, #0
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fd8:	4baa      	ldr	r3, [pc, #680]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe6:	4aa7      	ldr	r2, [pc, #668]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ffe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005002:	460b      	mov	r3, r1
 8005004:	4313      	orrs	r3, r2
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005008:	4b9e      	ldr	r3, [pc, #632]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005018:	4a9a      	ldr	r2, [pc, #616]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800501a:	430b      	orrs	r3, r1
 800501c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800502a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800502c:	2300      	movs	r3, #0
 800502e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005030:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800503a:	4b92      	ldr	r3, [pc, #584]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005048:	4a8e      	ldr	r2, [pc, #568]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800504a:	430b      	orrs	r3, r1
 800504c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800505a:	643b      	str	r3, [r7, #64]	@ 0x40
 800505c:	2300      	movs	r3, #0
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005060:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005064:	460b      	mov	r3, r1
 8005066:	4313      	orrs	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800506a:	4b86      	ldr	r3, [pc, #536]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	4a85      	ldr	r2, [pc, #532]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005070:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005074:	6113      	str	r3, [r2, #16]
 8005076:	4b83      	ldr	r3, [pc, #524]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005078:	6919      	ldr	r1, [r3, #16]
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005082:	4a80      	ldr	r2, [pc, #512]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005084:	430b      	orrs	r3, r1
 8005086:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005094:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005096:	2300      	movs	r3, #0
 8005098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800509a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050a4:	4b77      	ldr	r3, [pc, #476]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	4a74      	ldr	r2, [pc, #464]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80050c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050c6:	2300      	movs	r3, #0
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e4:	4a67      	ldr	r2, [pc, #412]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e6:	430b      	orrs	r3, r1
 80050e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	2100      	movs	r1, #0
 80050f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005100:	460b      	mov	r3, r1
 8005102:	4313      	orrs	r3, r2
 8005104:	d011      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb78 	bl	8005804 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800511a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	2100      	movs	r1, #0
 8005134:	6239      	str	r1, [r7, #32]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
 800513c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	d011      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514a:	3308      	adds	r3, #8
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb58 	bl	8005804 <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	2100      	movs	r1, #0
 8005174:	61b9      	str	r1, [r7, #24]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005180:	460b      	mov	r3, r1
 8005182:	4313      	orrs	r3, r2
 8005184:	d011      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518a:	3308      	adds	r3, #8
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fb38 	bl	8005804 <RCCEx_PLL2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	2100      	movs	r1, #0
 80051b4:	6139      	str	r1, [r7, #16]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d011      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	3328      	adds	r3, #40	@ 0x28
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fbca 	bl	8005968 <RCCEx_PLL3_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	2100      	movs	r1, #0
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	3328      	adds	r3, #40	@ 0x28
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fbaa 	bl	8005968 <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	2100      	movs	r1, #0
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d011      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	3328      	adds	r3, #40	@ 0x28
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb8a 	bl	8005968 <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800526a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	58024400 	.word	0x58024400

08005288 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800528c:	f7fe fd96 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4904      	ldr	r1, [pc, #16]	@ (80052b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	58024400 	.word	0x58024400
 80052b0:	08009a94 	.word	0x08009a94

080052b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	@ 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052c6:	4b9f      	ldr	r3, [pc, #636]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	0b1b      	lsrs	r3, r3, #12
 80052cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052de:	4b99      	ldr	r3, [pc, #612]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	08db      	lsrs	r3, r3, #3
 80052e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8111 	beq.w	8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f000 8083 	beq.w	8005410 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b02      	cmp	r3, #2
 800530e:	f200 80a1 	bhi.w	8005454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d056      	beq.n	80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800531e:	e099      	b.n	8005454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005320:	4b88      	ldr	r3, [pc, #544]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800532c:	4b85      	ldr	r3, [pc, #532]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	4a84      	ldr	r2, [pc, #528]	@ (8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
 800533c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b7b      	ldr	r3, [pc, #492]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a03 	vldr	s12, [r7, #12]
 800536a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005386:	e087      	b.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b6a      	ldr	r3, [pc, #424]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ca:	e065      	b.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b59      	ldr	r3, [pc, #356]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800540e:	e043      	b.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b48      	ldr	r3, [pc, #288]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a03 	vldr	s12, [r7, #12]
 8005436:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005452:	e021      	b.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b37      	ldr	r3, [pc, #220]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005496:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	0a5b      	lsrs	r3, r3, #9
 800549e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054be:	ee17 2a90 	vmov	r2, s15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ec:	ee17 2a90 	vmov	r2, s15
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054f4:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	0e1b      	lsrs	r3, r3, #24
 80054fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800550a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551a:	ee17 2a90 	vmov	r2, s15
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005522:	e008      	b.n	8005536 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]
}
 8005536:	bf00      	nop
 8005538:	3724      	adds	r7, #36	@ 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	03d09000 	.word	0x03d09000
 800554c:	46000000 	.word	0x46000000
 8005550:	4c742400 	.word	0x4c742400
 8005554:	4a742400 	.word	0x4a742400
 8005558:	4af42400 	.word	0x4af42400

0800555c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005564:	4ba1      	ldr	r3, [pc, #644]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800556e:	4b9f      	ldr	r3, [pc, #636]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	0d1b      	lsrs	r3, r3, #20
 8005574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005578:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800557a:	4b9c      	ldr	r3, [pc, #624]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005586:	4b99      	ldr	r3, [pc, #612]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8111 	beq.w	80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f000 8083 	beq.w	80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	f200 80a1 	bhi.w	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d056      	beq.n	8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055c6:	e099      	b.n	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c8:	4b88      	ldr	r3, [pc, #544]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02d      	beq.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055d4:	4b85      	ldr	r3, [pc, #532]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	4a84      	ldr	r2, [pc, #528]	@ (80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fe:	4b7b      	ldr	r3, [pc, #492]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005612:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800562e:	e087      	b.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800563e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005642:	4b6a      	ldr	r3, [pc, #424]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005652:	ed97 6a03 	vldr	s12, [r7, #12]
 8005656:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800565a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005672:	e065      	b.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005686:	4b59      	ldr	r3, [pc, #356]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005696:	ed97 6a03 	vldr	s12, [r7, #12]
 800569a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800569e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056b6:	e043      	b.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ca:	4b48      	ldr	r3, [pc, #288]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056da:	ed97 6a03 	vldr	s12, [r7, #12]
 80056de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056fa:	e021      	b.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005706:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b37      	ldr	r3, [pc, #220]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800573e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005740:	4b2a      	ldr	r3, [pc, #168]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	0a5b      	lsrs	r3, r3, #9
 8005746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800575a:	edd7 6a07 	vldr	s13, [r7, #28]
 800575e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005766:	ee17 2a90 	vmov	r2, s15
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800576e:	4b1f      	ldr	r3, [pc, #124]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005788:	edd7 6a07 	vldr	s13, [r7, #28]
 800578c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005794:	ee17 2a90 	vmov	r2, s15
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800579c:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	0e1b      	lsrs	r3, r3, #24
 80057a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c2:	ee17 2a90 	vmov	r2, s15
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057ca:	e008      	b.n	80057de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	bf00      	nop
 80057e0:	3724      	adds	r7, #36	@ 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
 80057f0:	03d09000 	.word	0x03d09000
 80057f4:	46000000 	.word	0x46000000
 80057f8:	4c742400 	.word	0x4c742400
 80057fc:	4a742400 	.word	0x4a742400
 8005800:	4af42400 	.word	0x4af42400

08005804 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005812:	4b53      	ldr	r3, [pc, #332]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b03      	cmp	r3, #3
 800581c:	d101      	bne.n	8005822 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e099      	b.n	8005956 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005822:	4b4f      	ldr	r3, [pc, #316]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a4e      	ldr	r2, [pc, #312]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005828:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800582c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582e:	f7fc f89f 	bl	8001970 <HAL_GetTick>
 8005832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005834:	e008      	b.n	8005848 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005836:	f7fc f89b 	bl	8001970 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e086      	b.n	8005956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005848:	4b45      	ldr	r3, [pc, #276]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f0      	bne.n	8005836 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005854:	4b42      	ldr	r3, [pc, #264]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	493f      	ldr	r1, [pc, #252]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005864:	4313      	orrs	r3, r2
 8005866:	628b      	str	r3, [r1, #40]	@ 0x28
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	3b01      	subs	r3, #1
 800586e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	025b      	lsls	r3, r3, #9
 800587a:	b29b      	uxth	r3, r3
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	3b01      	subs	r3, #1
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005898:	4931      	ldr	r1, [pc, #196]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800589a:	4313      	orrs	r3, r2
 800589c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800589e:	4b30      	ldr	r3, [pc, #192]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	492d      	ldr	r1, [pc, #180]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	f023 0220 	bic.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4928      	ldr	r1, [pc, #160]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058c2:	4b27      	ldr	r3, [pc, #156]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a26      	ldr	r2, [pc, #152]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058ce:	4b24      	ldr	r3, [pc, #144]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058d2:	4b24      	ldr	r3, [pc, #144]	@ (8005964 <RCCEx_PLL2_Config+0x160>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	69d2      	ldr	r2, [r2, #28]
 80058da:	00d2      	lsls	r2, r2, #3
 80058dc:	4920      	ldr	r1, [pc, #128]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	f043 0310 	orr.w	r3, r3, #16
 80058ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005900:	e00f      	b.n	8005922 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005908:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800590e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005914:	e005      	b.n	8005922 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800591c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005920:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a0e      	ldr	r2, [pc, #56]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 8005928:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800592c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592e:	f7fc f81f 	bl	8001970 <HAL_GetTick>
 8005932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005934:	e008      	b.n	8005948 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005936:	f7fc f81b 	bl	8001970 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <RCCEx_PLL2_Config+0x15c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	58024400 	.word	0x58024400
 8005964:	ffff0007 	.word	0xffff0007

08005968 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005976:	4b53      	ldr	r3, [pc, #332]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b03      	cmp	r3, #3
 8005980:	d101      	bne.n	8005986 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e099      	b.n	8005aba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005986:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a4e      	ldr	r2, [pc, #312]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 800598c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005992:	f7fb ffed 	bl	8001970 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005998:	e008      	b.n	80059ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800599a:	f7fb ffe9 	bl	8001970 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e086      	b.n	8005aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059ac:	4b45      	ldr	r3, [pc, #276]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f0      	bne.n	800599a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059b8:	4b42      	ldr	r3, [pc, #264]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	051b      	lsls	r3, r3, #20
 80059c6:	493f      	ldr	r1, [pc, #252]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	3b01      	subs	r3, #1
 80059dc:	025b      	lsls	r3, r3, #9
 80059de:	b29b      	uxth	r3, r3
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059fc:	4931      	ldr	r1, [pc, #196]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a02:	4b30      	ldr	r3, [pc, #192]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	492d      	ldr	r1, [pc, #180]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	4928      	ldr	r1, [pc, #160]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a26:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a32:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a36:	4b24      	ldr	r3, [pc, #144]	@ (8005ac8 <RCCEx_PLL3_Config+0x160>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	69d2      	ldr	r2, [r2, #28]
 8005a3e:	00d2      	lsls	r2, r2, #3
 8005a40:	4920      	ldr	r1, [pc, #128]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a46:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a58:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a64:	e00f      	b.n	8005a86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d106      	bne.n	8005a7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a6c:	4b15      	ldr	r3, [pc, #84]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a78:	e005      	b.n	8005a86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4a11      	ldr	r2, [pc, #68]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a92:	f7fb ff6d 	bl	8001970 <HAL_GetTick>
 8005a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a98:	e008      	b.n	8005aac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a9a:	f7fb ff69 	bl	8001970 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e006      	b.n	8005aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	ffff0007 	.word	0xffff0007

08005acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e042      	b.n	8005b64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fb fd2d 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2224      	movs	r2, #36	@ 0x24
 8005afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fe1e 	bl	8006758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f8b3 	bl	8005c88 <UART_SetConfig>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e01b      	b.n	8005b64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fe9d 	bl	800689c <UART_CheckIdleState>
 8005b62:	4603      	mov	r3, r0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	@ 0x28
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d17b      	bne.n	8005c7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_UART_Transmit+0x26>
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e074      	b.n	8005c80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2221      	movs	r2, #33	@ 0x21
 8005ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ba6:	f7fb fee3 	bl	8001970 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc4:	d108      	bne.n	8005bd8 <HAL_UART_Transmit+0x6c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e003      	b.n	8005be0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005be0:	e030      	b.n	8005c44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2180      	movs	r1, #128	@ 0x80
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 feff 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e03d      	b.n	8005c80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	e007      	b.n	8005c32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1c8      	bne.n	8005be2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	2140      	movs	r1, #64	@ 0x40
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fec8 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b092      	sub	sp, #72	@ 0x48
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4bbe      	ldr	r3, [pc, #760]	@ (8005fb0 <UART_SetConfig+0x328>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4ab3      	ldr	r2, [pc, #716]	@ (8005fb4 <UART_SetConfig+0x32c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	4baf      	ldr	r3, [pc, #700]	@ (8005fb8 <UART_SetConfig+0x330>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	f023 010f 	bic.w	r1, r3, #15
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4aa6      	ldr	r2, [pc, #664]	@ (8005fbc <UART_SetConfig+0x334>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d177      	bne.n	8005e18 <UART_SetConfig+0x190>
 8005d28:	4ba5      	ldr	r3, [pc, #660]	@ (8005fc0 <UART_SetConfig+0x338>)
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d30:	2b28      	cmp	r3, #40	@ 0x28
 8005d32:	d86d      	bhi.n	8005e10 <UART_SetConfig+0x188>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <UART_SetConfig+0xb4>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005de1 	.word	0x08005de1
 8005d40:	08005e11 	.word	0x08005e11
 8005d44:	08005e11 	.word	0x08005e11
 8005d48:	08005e11 	.word	0x08005e11
 8005d4c:	08005e11 	.word	0x08005e11
 8005d50:	08005e11 	.word	0x08005e11
 8005d54:	08005e11 	.word	0x08005e11
 8005d58:	08005e11 	.word	0x08005e11
 8005d5c:	08005de9 	.word	0x08005de9
 8005d60:	08005e11 	.word	0x08005e11
 8005d64:	08005e11 	.word	0x08005e11
 8005d68:	08005e11 	.word	0x08005e11
 8005d6c:	08005e11 	.word	0x08005e11
 8005d70:	08005e11 	.word	0x08005e11
 8005d74:	08005e11 	.word	0x08005e11
 8005d78:	08005e11 	.word	0x08005e11
 8005d7c:	08005df1 	.word	0x08005df1
 8005d80:	08005e11 	.word	0x08005e11
 8005d84:	08005e11 	.word	0x08005e11
 8005d88:	08005e11 	.word	0x08005e11
 8005d8c:	08005e11 	.word	0x08005e11
 8005d90:	08005e11 	.word	0x08005e11
 8005d94:	08005e11 	.word	0x08005e11
 8005d98:	08005e11 	.word	0x08005e11
 8005d9c:	08005df9 	.word	0x08005df9
 8005da0:	08005e11 	.word	0x08005e11
 8005da4:	08005e11 	.word	0x08005e11
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005e11 	.word	0x08005e11
 8005db0:	08005e11 	.word	0x08005e11
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e01 	.word	0x08005e01
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e222      	b.n	800622e <UART_SetConfig+0x5a6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e21e      	b.n	800622e <UART_SetConfig+0x5a6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e21a      	b.n	800622e <UART_SetConfig+0x5a6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e216      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e212      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	@ 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e20e      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e20a      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a69      	ldr	r2, [pc, #420]	@ (8005fc4 <UART_SetConfig+0x33c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d130      	bne.n	8005e84 <UART_SetConfig+0x1fc>
 8005e22:	4b67      	ldr	r3, [pc, #412]	@ (8005fc0 <UART_SetConfig+0x338>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d826      	bhi.n	8005e7c <UART_SetConfig+0x1f4>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x1ac>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e1ec      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e1e8      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e1e4      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e1e0      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e1dc      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e1d8      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e1d4      	b.n	800622e <UART_SetConfig+0x5a6>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4f      	ldr	r2, [pc, #316]	@ (8005fc8 <UART_SetConfig+0x340>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d130      	bne.n	8005ef0 <UART_SetConfig+0x268>
 8005e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc0 <UART_SetConfig+0x338>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d826      	bhi.n	8005ee8 <UART_SetConfig+0x260>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x218>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb9 	.word	0x08005eb9
 8005ea4:	08005ec1 	.word	0x08005ec1
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e1b6      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e1b2      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e1ae      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e1aa      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e1a6      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ee0:	2340      	movs	r3, #64	@ 0x40
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e1a2      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e19e      	b.n	800622e <UART_SetConfig+0x5a6>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a35      	ldr	r2, [pc, #212]	@ (8005fcc <UART_SetConfig+0x344>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d130      	bne.n	8005f5c <UART_SetConfig+0x2d4>
 8005efa:	4b31      	ldr	r3, [pc, #196]	@ (8005fc0 <UART_SetConfig+0x338>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d826      	bhi.n	8005f54 <UART_SetConfig+0x2cc>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x284>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f25 	.word	0x08005f25
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e180      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e17c      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e178      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e174      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f44:	2320      	movs	r3, #32
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e170      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e16c      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e168      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd0 <UART_SetConfig+0x348>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d142      	bne.n	8005fec <UART_SetConfig+0x364>
 8005f66:	4b16      	ldr	r3, [pc, #88]	@ (8005fc0 <UART_SetConfig+0x338>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d838      	bhi.n	8005fe4 <UART_SetConfig+0x35c>
 8005f72:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <UART_SetConfig+0x2f0>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e14a      	b.n	800622e <UART_SetConfig+0x5a6>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e146      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e142      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e13e      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fb0:	cfff69f3 	.word	0xcfff69f3
 8005fb4:	58000c00 	.word	0x58000c00
 8005fb8:	11fff4ff 	.word	0x11fff4ff
 8005fbc:	40011000 	.word	0x40011000
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	40004400 	.word	0x40004400
 8005fc8:	40004800 	.word	0x40004800
 8005fcc:	40004c00 	.word	0x40004c00
 8005fd0:	40005000 	.word	0x40005000
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e128      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fdc:	2340      	movs	r3, #64	@ 0x40
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e124      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e120      	b.n	800622e <UART_SetConfig+0x5a6>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4acb      	ldr	r2, [pc, #812]	@ (8006320 <UART_SetConfig+0x698>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d176      	bne.n	80060e4 <UART_SetConfig+0x45c>
 8005ff6:	4bcb      	ldr	r3, [pc, #812]	@ (8006324 <UART_SetConfig+0x69c>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ffe:	2b28      	cmp	r3, #40	@ 0x28
 8006000:	d86c      	bhi.n	80060dc <UART_SetConfig+0x454>
 8006002:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x380>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	080060ad 	.word	0x080060ad
 800600c:	080060dd 	.word	0x080060dd
 8006010:	080060dd 	.word	0x080060dd
 8006014:	080060dd 	.word	0x080060dd
 8006018:	080060dd 	.word	0x080060dd
 800601c:	080060dd 	.word	0x080060dd
 8006020:	080060dd 	.word	0x080060dd
 8006024:	080060dd 	.word	0x080060dd
 8006028:	080060b5 	.word	0x080060b5
 800602c:	080060dd 	.word	0x080060dd
 8006030:	080060dd 	.word	0x080060dd
 8006034:	080060dd 	.word	0x080060dd
 8006038:	080060dd 	.word	0x080060dd
 800603c:	080060dd 	.word	0x080060dd
 8006040:	080060dd 	.word	0x080060dd
 8006044:	080060dd 	.word	0x080060dd
 8006048:	080060bd 	.word	0x080060bd
 800604c:	080060dd 	.word	0x080060dd
 8006050:	080060dd 	.word	0x080060dd
 8006054:	080060dd 	.word	0x080060dd
 8006058:	080060dd 	.word	0x080060dd
 800605c:	080060dd 	.word	0x080060dd
 8006060:	080060dd 	.word	0x080060dd
 8006064:	080060dd 	.word	0x080060dd
 8006068:	080060c5 	.word	0x080060c5
 800606c:	080060dd 	.word	0x080060dd
 8006070:	080060dd 	.word	0x080060dd
 8006074:	080060dd 	.word	0x080060dd
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080060dd 	.word	0x080060dd
 8006080:	080060dd 	.word	0x080060dd
 8006084:	080060dd 	.word	0x080060dd
 8006088:	080060cd 	.word	0x080060cd
 800608c:	080060dd 	.word	0x080060dd
 8006090:	080060dd 	.word	0x080060dd
 8006094:	080060dd 	.word	0x080060dd
 8006098:	080060dd 	.word	0x080060dd
 800609c:	080060dd 	.word	0x080060dd
 80060a0:	080060dd 	.word	0x080060dd
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e0bc      	b.n	800622e <UART_SetConfig+0x5a6>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e0b8      	b.n	800622e <UART_SetConfig+0x5a6>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e0b4      	b.n	800622e <UART_SetConfig+0x5a6>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e0b0      	b.n	800622e <UART_SetConfig+0x5a6>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e0ac      	b.n	800622e <UART_SetConfig+0x5a6>
 80060d4:	2340      	movs	r3, #64	@ 0x40
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e0a8      	b.n	800622e <UART_SetConfig+0x5a6>
 80060dc:	2380      	movs	r3, #128	@ 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e0a4      	b.n	800622e <UART_SetConfig+0x5a6>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a8f      	ldr	r2, [pc, #572]	@ (8006328 <UART_SetConfig+0x6a0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d130      	bne.n	8006150 <UART_SetConfig+0x4c8>
 80060ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006324 <UART_SetConfig+0x69c>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d826      	bhi.n	8006148 <UART_SetConfig+0x4c0>
 80060fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <UART_SetConfig+0x478>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006119 	.word	0x08006119
 8006104:	08006121 	.word	0x08006121
 8006108:	08006129 	.word	0x08006129
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e086      	b.n	800622e <UART_SetConfig+0x5a6>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e082      	b.n	800622e <UART_SetConfig+0x5a6>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e07e      	b.n	800622e <UART_SetConfig+0x5a6>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e07a      	b.n	800622e <UART_SetConfig+0x5a6>
 8006138:	2320      	movs	r3, #32
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e076      	b.n	800622e <UART_SetConfig+0x5a6>
 8006140:	2340      	movs	r3, #64	@ 0x40
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e072      	b.n	800622e <UART_SetConfig+0x5a6>
 8006148:	2380      	movs	r3, #128	@ 0x80
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e06e      	b.n	800622e <UART_SetConfig+0x5a6>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a75      	ldr	r2, [pc, #468]	@ (800632c <UART_SetConfig+0x6a4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d130      	bne.n	80061bc <UART_SetConfig+0x534>
 800615a:	4b72      	ldr	r3, [pc, #456]	@ (8006324 <UART_SetConfig+0x69c>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b05      	cmp	r3, #5
 8006164:	d826      	bhi.n	80061b4 <UART_SetConfig+0x52c>
 8006166:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <UART_SetConfig+0x4e4>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006185 	.word	0x08006185
 8006170:	0800618d 	.word	0x0800618d
 8006174:	08006195 	.word	0x08006195
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061a5 	.word	0x080061a5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e050      	b.n	800622e <UART_SetConfig+0x5a6>
 800618c:	2304      	movs	r3, #4
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e04c      	b.n	800622e <UART_SetConfig+0x5a6>
 8006194:	2308      	movs	r3, #8
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e048      	b.n	800622e <UART_SetConfig+0x5a6>
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e044      	b.n	800622e <UART_SetConfig+0x5a6>
 80061a4:	2320      	movs	r3, #32
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e040      	b.n	800622e <UART_SetConfig+0x5a6>
 80061ac:	2340      	movs	r3, #64	@ 0x40
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e03c      	b.n	800622e <UART_SetConfig+0x5a6>
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e038      	b.n	800622e <UART_SetConfig+0x5a6>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006330 <UART_SetConfig+0x6a8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d130      	bne.n	8006228 <UART_SetConfig+0x5a0>
 80061c6:	4b57      	ldr	r3, [pc, #348]	@ (8006324 <UART_SetConfig+0x69c>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d826      	bhi.n	8006220 <UART_SetConfig+0x598>
 80061d2:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <UART_SetConfig+0x550>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	08006201 	.word	0x08006201
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e01a      	b.n	800622e <UART_SetConfig+0x5a6>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e016      	b.n	800622e <UART_SetConfig+0x5a6>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e012      	b.n	800622e <UART_SetConfig+0x5a6>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e00e      	b.n	800622e <UART_SetConfig+0x5a6>
 8006210:	2320      	movs	r3, #32
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e00a      	b.n	800622e <UART_SetConfig+0x5a6>
 8006218:	2340      	movs	r3, #64	@ 0x40
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e006      	b.n	800622e <UART_SetConfig+0x5a6>
 8006220:	2380      	movs	r3, #128	@ 0x80
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e002      	b.n	800622e <UART_SetConfig+0x5a6>
 8006228:	2380      	movs	r3, #128	@ 0x80
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a3f      	ldr	r2, [pc, #252]	@ (8006330 <UART_SetConfig+0x6a8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	f040 80f8 	bne.w	800642a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800623a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800623e:	2b20      	cmp	r3, #32
 8006240:	dc46      	bgt.n	80062d0 <UART_SetConfig+0x648>
 8006242:	2b02      	cmp	r3, #2
 8006244:	f2c0 8082 	blt.w	800634c <UART_SetConfig+0x6c4>
 8006248:	3b02      	subs	r3, #2
 800624a:	2b1e      	cmp	r3, #30
 800624c:	d87e      	bhi.n	800634c <UART_SetConfig+0x6c4>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <UART_SetConfig+0x5cc>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	080062d7 	.word	0x080062d7
 8006258:	0800634d 	.word	0x0800634d
 800625c:	080062df 	.word	0x080062df
 8006260:	0800634d 	.word	0x0800634d
 8006264:	0800634d 	.word	0x0800634d
 8006268:	0800634d 	.word	0x0800634d
 800626c:	080062ef 	.word	0x080062ef
 8006270:	0800634d 	.word	0x0800634d
 8006274:	0800634d 	.word	0x0800634d
 8006278:	0800634d 	.word	0x0800634d
 800627c:	0800634d 	.word	0x0800634d
 8006280:	0800634d 	.word	0x0800634d
 8006284:	0800634d 	.word	0x0800634d
 8006288:	0800634d 	.word	0x0800634d
 800628c:	080062ff 	.word	0x080062ff
 8006290:	0800634d 	.word	0x0800634d
 8006294:	0800634d 	.word	0x0800634d
 8006298:	0800634d 	.word	0x0800634d
 800629c:	0800634d 	.word	0x0800634d
 80062a0:	0800634d 	.word	0x0800634d
 80062a4:	0800634d 	.word	0x0800634d
 80062a8:	0800634d 	.word	0x0800634d
 80062ac:	0800634d 	.word	0x0800634d
 80062b0:	0800634d 	.word	0x0800634d
 80062b4:	0800634d 	.word	0x0800634d
 80062b8:	0800634d 	.word	0x0800634d
 80062bc:	0800634d 	.word	0x0800634d
 80062c0:	0800634d 	.word	0x0800634d
 80062c4:	0800634d 	.word	0x0800634d
 80062c8:	0800634d 	.word	0x0800634d
 80062cc:	0800633f 	.word	0x0800633f
 80062d0:	2b40      	cmp	r3, #64	@ 0x40
 80062d2:	d037      	beq.n	8006344 <UART_SetConfig+0x6bc>
 80062d4:	e03a      	b.n	800634c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062d6:	f7fe ffd7 	bl	8005288 <HAL_RCCEx_GetD3PCLK1Freq>
 80062da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062dc:	e03c      	b.n	8006358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe ffe6 	bl	80052b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ec:	e034      	b.n	8006358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ee:	f107 0318 	add.w	r3, r7, #24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff f932 	bl	800555c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062fc:	e02c      	b.n	8006358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <UART_SetConfig+0x69c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <UART_SetConfig+0x69c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	4a07      	ldr	r2, [pc, #28]	@ (8006334 <UART_SetConfig+0x6ac>)
 8006316:	fa22 f303 	lsr.w	r3, r2, r3
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800631c:	e01c      	b.n	8006358 <UART_SetConfig+0x6d0>
 800631e:	bf00      	nop
 8006320:	40011400 	.word	0x40011400
 8006324:	58024400 	.word	0x58024400
 8006328:	40007800 	.word	0x40007800
 800632c:	40007c00 	.word	0x40007c00
 8006330:	58000c00 	.word	0x58000c00
 8006334:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006338:	4b9d      	ldr	r3, [pc, #628]	@ (80065b0 <UART_SetConfig+0x928>)
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e00c      	b.n	8006358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800633e:	4b9d      	ldr	r3, [pc, #628]	@ (80065b4 <UART_SetConfig+0x92c>)
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006342:	e009      	b.n	8006358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006344:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634a:	e005      	b.n	8006358 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006356:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 81de 	beq.w	800671c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	4a94      	ldr	r2, [pc, #592]	@ (80065b8 <UART_SetConfig+0x930>)
 8006366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636a:	461a      	mov	r2, r3
 800636c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006372:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006380:	429a      	cmp	r2, r3
 8006382:	d305      	bcc.n	8006390 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800638a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638c:	429a      	cmp	r2, r3
 800638e:	d903      	bls.n	8006398 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006396:	e1c1      	b.n	800671c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	2200      	movs	r2, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	60fa      	str	r2, [r7, #12]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	4a84      	ldr	r2, [pc, #528]	@ (80065b8 <UART_SetConfig+0x930>)
 80063a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2200      	movs	r2, #0
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063ba:	f7f9 ffe9 	bl	8000390 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	020b      	lsls	r3, r1, #8
 80063d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063d4:	0202      	lsls	r2, r0, #8
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	6849      	ldr	r1, [r1, #4]
 80063da:	0849      	lsrs	r1, r1, #1
 80063dc:	2000      	movs	r0, #0
 80063de:	460c      	mov	r4, r1
 80063e0:	4605      	mov	r5, r0
 80063e2:	eb12 0804 	adds.w	r8, r2, r4
 80063e6:	eb43 0905 	adc.w	r9, r3, r5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	469a      	mov	sl, r3
 80063f2:	4693      	mov	fp, r2
 80063f4:	4652      	mov	r2, sl
 80063f6:	465b      	mov	r3, fp
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7f9 ffc8 	bl	8000390 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4613      	mov	r3, r2
 8006406:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800640e:	d308      	bcc.n	8006422 <UART_SetConfig+0x79a>
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006416:	d204      	bcs.n	8006422 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	e17c      	b.n	800671c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006428:	e178      	b.n	800671c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006432:	f040 80c5 	bne.w	80065c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006436:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800643a:	2b20      	cmp	r3, #32
 800643c:	dc48      	bgt.n	80064d0 <UART_SetConfig+0x848>
 800643e:	2b00      	cmp	r3, #0
 8006440:	db7b      	blt.n	800653a <UART_SetConfig+0x8b2>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d879      	bhi.n	800653a <UART_SetConfig+0x8b2>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <UART_SetConfig+0x7c4>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	080064d7 	.word	0x080064d7
 8006450:	080064df 	.word	0x080064df
 8006454:	0800653b 	.word	0x0800653b
 8006458:	0800653b 	.word	0x0800653b
 800645c:	080064e7 	.word	0x080064e7
 8006460:	0800653b 	.word	0x0800653b
 8006464:	0800653b 	.word	0x0800653b
 8006468:	0800653b 	.word	0x0800653b
 800646c:	080064f7 	.word	0x080064f7
 8006470:	0800653b 	.word	0x0800653b
 8006474:	0800653b 	.word	0x0800653b
 8006478:	0800653b 	.word	0x0800653b
 800647c:	0800653b 	.word	0x0800653b
 8006480:	0800653b 	.word	0x0800653b
 8006484:	0800653b 	.word	0x0800653b
 8006488:	0800653b 	.word	0x0800653b
 800648c:	08006507 	.word	0x08006507
 8006490:	0800653b 	.word	0x0800653b
 8006494:	0800653b 	.word	0x0800653b
 8006498:	0800653b 	.word	0x0800653b
 800649c:	0800653b 	.word	0x0800653b
 80064a0:	0800653b 	.word	0x0800653b
 80064a4:	0800653b 	.word	0x0800653b
 80064a8:	0800653b 	.word	0x0800653b
 80064ac:	0800653b 	.word	0x0800653b
 80064b0:	0800653b 	.word	0x0800653b
 80064b4:	0800653b 	.word	0x0800653b
 80064b8:	0800653b 	.word	0x0800653b
 80064bc:	0800653b 	.word	0x0800653b
 80064c0:	0800653b 	.word	0x0800653b
 80064c4:	0800653b 	.word	0x0800653b
 80064c8:	0800653b 	.word	0x0800653b
 80064cc:	0800652d 	.word	0x0800652d
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d02e      	beq.n	8006532 <UART_SetConfig+0x8aa>
 80064d4:	e031      	b.n	800653a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d6:	f7fd fca1 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 80064da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064dc:	e033      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064de:	f7fd fcb3 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 80064e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064e4:	e02f      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fee2 	bl	80052b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f4:	e027      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f6:	f107 0318 	add.w	r3, r7, #24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f82e 	bl	800555c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e01f      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006506:	4b2d      	ldr	r3, [pc, #180]	@ (80065bc <UART_SetConfig+0x934>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006512:	4b2a      	ldr	r3, [pc, #168]	@ (80065bc <UART_SetConfig+0x934>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	08db      	lsrs	r3, r3, #3
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	4a24      	ldr	r2, [pc, #144]	@ (80065b0 <UART_SetConfig+0x928>)
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006524:	e00f      	b.n	8006546 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006526:	4b22      	ldr	r3, [pc, #136]	@ (80065b0 <UART_SetConfig+0x928>)
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800652a:	e00c      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800652c:	4b21      	ldr	r3, [pc, #132]	@ (80065b4 <UART_SetConfig+0x92c>)
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e009      	b.n	8006546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006538:	e005      	b.n	8006546 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80e7 	beq.w	800671c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	4a19      	ldr	r2, [pc, #100]	@ (80065b8 <UART_SetConfig+0x930>)
 8006554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006558:	461a      	mov	r2, r3
 800655a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800655c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006560:	005a      	lsls	r2, r3, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	441a      	add	r2, r3
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d916      	bls.n	80065a8 <UART_SetConfig+0x920>
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006580:	d212      	bcs.n	80065a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	b29b      	uxth	r3, r3
 8006586:	f023 030f 	bic.w	r3, r3, #15
 800658a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	b29b      	uxth	r3, r3
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	b29a      	uxth	r2, r3
 8006598:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800659a:	4313      	orrs	r3, r2
 800659c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065a4:	60da      	str	r2, [r3, #12]
 80065a6:	e0b9      	b.n	800671c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065ae:	e0b5      	b.n	800671c <UART_SetConfig+0xa94>
 80065b0:	03d09000 	.word	0x03d09000
 80065b4:	003d0900 	.word	0x003d0900
 80065b8:	08009aa4 	.word	0x08009aa4
 80065bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80065c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	dc49      	bgt.n	800665c <UART_SetConfig+0x9d4>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	db7c      	blt.n	80066c6 <UART_SetConfig+0xa3e>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d87a      	bhi.n	80066c6 <UART_SetConfig+0xa3e>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0x950>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	08006663 	.word	0x08006663
 80065dc:	0800666b 	.word	0x0800666b
 80065e0:	080066c7 	.word	0x080066c7
 80065e4:	080066c7 	.word	0x080066c7
 80065e8:	08006673 	.word	0x08006673
 80065ec:	080066c7 	.word	0x080066c7
 80065f0:	080066c7 	.word	0x080066c7
 80065f4:	080066c7 	.word	0x080066c7
 80065f8:	08006683 	.word	0x08006683
 80065fc:	080066c7 	.word	0x080066c7
 8006600:	080066c7 	.word	0x080066c7
 8006604:	080066c7 	.word	0x080066c7
 8006608:	080066c7 	.word	0x080066c7
 800660c:	080066c7 	.word	0x080066c7
 8006610:	080066c7 	.word	0x080066c7
 8006614:	080066c7 	.word	0x080066c7
 8006618:	08006693 	.word	0x08006693
 800661c:	080066c7 	.word	0x080066c7
 8006620:	080066c7 	.word	0x080066c7
 8006624:	080066c7 	.word	0x080066c7
 8006628:	080066c7 	.word	0x080066c7
 800662c:	080066c7 	.word	0x080066c7
 8006630:	080066c7 	.word	0x080066c7
 8006634:	080066c7 	.word	0x080066c7
 8006638:	080066c7 	.word	0x080066c7
 800663c:	080066c7 	.word	0x080066c7
 8006640:	080066c7 	.word	0x080066c7
 8006644:	080066c7 	.word	0x080066c7
 8006648:	080066c7 	.word	0x080066c7
 800664c:	080066c7 	.word	0x080066c7
 8006650:	080066c7 	.word	0x080066c7
 8006654:	080066c7 	.word	0x080066c7
 8006658:	080066b9 	.word	0x080066b9
 800665c:	2b40      	cmp	r3, #64	@ 0x40
 800665e:	d02e      	beq.n	80066be <UART_SetConfig+0xa36>
 8006660:	e031      	b.n	80066c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006662:	f7fd fbdb 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 8006666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006668:	e033      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666a:	f7fd fbed 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 800666e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006670:	e02f      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fe1c 	bl	80052b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006680:	e027      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006682:	f107 0318 	add.w	r3, r7, #24
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe ff68 	bl	800555c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006690:	e01f      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006692:	4b2d      	ldr	r3, [pc, #180]	@ (8006748 <UART_SetConfig+0xac0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800669e:	4b2a      	ldr	r3, [pc, #168]	@ (8006748 <UART_SetConfig+0xac0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	4a28      	ldr	r2, [pc, #160]	@ (800674c <UART_SetConfig+0xac4>)
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066b0:	e00f      	b.n	80066d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066b2:	4b26      	ldr	r3, [pc, #152]	@ (800674c <UART_SetConfig+0xac4>)
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b6:	e00c      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066b8:	4b25      	ldr	r3, [pc, #148]	@ (8006750 <UART_SetConfig+0xac8>)
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066bc:	e009      	b.n	80066d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c4:	e005      	b.n	80066d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066d0:	bf00      	nop
    }

    if (pclk != 0U)
 80066d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d021      	beq.n	800671c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006754 <UART_SetConfig+0xacc>)
 80066de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	441a      	add	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	2b0f      	cmp	r3, #15
 8006700:	d909      	bls.n	8006716 <UART_SetConfig+0xa8e>
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006708:	d205      	bcs.n	8006716 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	b29a      	uxth	r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60da      	str	r2, [r3, #12]
 8006714:	e002      	b.n	800671c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2201      	movs	r2, #1
 8006720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2201      	movs	r2, #1
 8006728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006738:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800673c:	4618      	mov	r0, r3
 800673e:	3748      	adds	r7, #72	@ 0x48
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006746:	bf00      	nop
 8006748:	58024400 	.word	0x58024400
 800674c:	03d09000 	.word	0x03d09000
 8006750:	003d0900 	.word	0x003d0900
 8006754:	08009aa4 	.word	0x08009aa4

08006758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006856:	d10a      	bne.n	800686e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b098      	sub	sp, #96	@ 0x60
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ac:	f7fb f860 	bl	8001970 <HAL_GetTick>
 80068b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d12f      	bne.n	8006920 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c8:	2200      	movs	r2, #0
 80068ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f88e 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d022      	beq.n	8006920 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e063      	b.n	80069e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d149      	bne.n	80069c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800692e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006936:	2200      	movs	r2, #0
 8006938:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f857 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d03c      	beq.n	80069c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	623b      	str	r3, [r7, #32]
   return(result);
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800695c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006966:	633b      	str	r3, [r7, #48]	@ 0x30
 8006968:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800696c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e6      	bne.n	8006948 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	60fb      	str	r3, [r7, #12]
   return(result);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800699a:	61fa      	str	r2, [r7, #28]
 800699c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69b9      	ldr	r1, [r7, #24]
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	617b      	str	r3, [r7, #20]
   return(result);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e012      	b.n	80069e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3758      	adds	r7, #88	@ 0x58
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	e04f      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d04b      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7fa ffb1 	bl	8001970 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e04e      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d037      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d034      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	d031      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d110      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2208      	movs	r2, #8
 8006a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f839 	bl	8006acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e029      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7c:	d111      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f81f 	bl	8006acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e00f      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	bf0c      	ite	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	2300      	movne	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d0a0      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b095      	sub	sp, #84	@ 0x54
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006af2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e6      	bne.n	8006ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	4b1e      	ldr	r3, [pc, #120]	@ (8006b94 <UART_EndRxTransfer+0xc8>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d118      	bne.n	8006b74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f023 0310 	bic.w	r3, r3, #16
 8006b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b88:	bf00      	nop
 8006b8a:	3754      	adds	r7, #84	@ 0x54
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	effffffe 	.word	0xeffffffe

08006b98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_UARTEx_DisableFifoMode+0x16>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e027      	b.n	8006bfe <HAL_UARTEx_DisableFifoMode+0x66>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	@ 0x24
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e02d      	b.n	8006c7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	@ 0x24
 8006c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0201 	bic.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f850 	bl	8006d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e02d      	b.n	8006cfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2224      	movs	r2, #36	@ 0x24
 8006caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f812 	bl	8006d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d108      	bne.n	8006d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d24:	e031      	b.n	8006d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d26:	2310      	movs	r3, #16
 8006d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d2a:	2310      	movs	r3, #16
 8006d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	0e5b      	lsrs	r3, r3, #25
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	0f5b      	lsrs	r3, r3, #29
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	7b3a      	ldrb	r2, [r7, #12]
 8006d52:	4911      	ldr	r1, [pc, #68]	@ (8006d98 <UARTEx_SetNbDataToProcess+0x94>)
 8006d54:	5c8a      	ldrb	r2, [r1, r2]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d5a:	7b3a      	ldrb	r2, [r7, #12]
 8006d5c:	490f      	ldr	r1, [pc, #60]	@ (8006d9c <UARTEx_SetNbDataToProcess+0x98>)
 8006d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	7b7a      	ldrb	r2, [r7, #13]
 8006d70:	4909      	ldr	r1, [pc, #36]	@ (8006d98 <UARTEx_SetNbDataToProcess+0x94>)
 8006d72:	5c8a      	ldrb	r2, [r1, r2]
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d78:	7b7a      	ldrb	r2, [r7, #13]
 8006d7a:	4908      	ldr	r1, [pc, #32]	@ (8006d9c <UARTEx_SetNbDataToProcess+0x98>)
 8006d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	08009abc 	.word	0x08009abc
 8006d9c:	08009ac4 	.word	0x08009ac4

08006da0 <__cvt>:
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	ed2d 8b02 	vpush	{d8}
 8006da6:	eeb0 8b40 	vmov.f64	d8, d0
 8006daa:	b085      	sub	sp, #20
 8006dac:	4617      	mov	r7, r2
 8006dae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006db0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006db2:	ee18 2a90 	vmov	r2, s17
 8006db6:	f025 0520 	bic.w	r5, r5, #32
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	bfb6      	itet	lt
 8006dbe:	222d      	movlt	r2, #45	@ 0x2d
 8006dc0:	2200      	movge	r2, #0
 8006dc2:	eeb1 8b40 	vneglt.f64	d8, d0
 8006dc6:	2d46      	cmp	r5, #70	@ 0x46
 8006dc8:	460c      	mov	r4, r1
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	d004      	beq.n	8006dd8 <__cvt+0x38>
 8006dce:	2d45      	cmp	r5, #69	@ 0x45
 8006dd0:	d100      	bne.n	8006dd4 <__cvt+0x34>
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	e000      	b.n	8006dda <__cvt+0x3a>
 8006dd8:	2103      	movs	r1, #3
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	ab02      	add	r3, sp, #8
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4622      	mov	r2, r4
 8006de4:	4633      	mov	r3, r6
 8006de6:	eeb0 0b48 	vmov.f64	d0, d8
 8006dea:	f000 fe31 	bl	8007a50 <_dtoa_r>
 8006dee:	2d47      	cmp	r5, #71	@ 0x47
 8006df0:	d114      	bne.n	8006e1c <__cvt+0x7c>
 8006df2:	07fb      	lsls	r3, r7, #31
 8006df4:	d50a      	bpl.n	8006e0c <__cvt+0x6c>
 8006df6:	1902      	adds	r2, r0, r4
 8006df8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e00:	bf08      	it	eq
 8006e02:	9203      	streq	r2, [sp, #12]
 8006e04:	2130      	movs	r1, #48	@ 0x30
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d319      	bcc.n	8006e40 <__cvt+0xa0>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e10:	1a1b      	subs	r3, r3, r0
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	b005      	add	sp, #20
 8006e16:	ecbd 8b02 	vpop	{d8}
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	2d46      	cmp	r5, #70	@ 0x46
 8006e1e:	eb00 0204 	add.w	r2, r0, r4
 8006e22:	d1e9      	bne.n	8006df8 <__cvt+0x58>
 8006e24:	7803      	ldrb	r3, [r0, #0]
 8006e26:	2b30      	cmp	r3, #48	@ 0x30
 8006e28:	d107      	bne.n	8006e3a <__cvt+0x9a>
 8006e2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e32:	bf1c      	itt	ne
 8006e34:	f1c4 0401 	rsbne	r4, r4, #1
 8006e38:	6034      	strne	r4, [r6, #0]
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	e7db      	b.n	8006df8 <__cvt+0x58>
 8006e40:	1c5c      	adds	r4, r3, #1
 8006e42:	9403      	str	r4, [sp, #12]
 8006e44:	7019      	strb	r1, [r3, #0]
 8006e46:	e7de      	b.n	8006e06 <__cvt+0x66>

08006e48 <__exponent>:
 8006e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	bfba      	itte	lt
 8006e4e:	4249      	neglt	r1, r1
 8006e50:	232d      	movlt	r3, #45	@ 0x2d
 8006e52:	232b      	movge	r3, #43	@ 0x2b
 8006e54:	2909      	cmp	r1, #9
 8006e56:	7002      	strb	r2, [r0, #0]
 8006e58:	7043      	strb	r3, [r0, #1]
 8006e5a:	dd29      	ble.n	8006eb0 <__exponent+0x68>
 8006e5c:	f10d 0307 	add.w	r3, sp, #7
 8006e60:	461d      	mov	r5, r3
 8006e62:	270a      	movs	r7, #10
 8006e64:	461a      	mov	r2, r3
 8006e66:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e6a:	fb07 1416 	mls	r4, r7, r6, r1
 8006e6e:	3430      	adds	r4, #48	@ 0x30
 8006e70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e74:	460c      	mov	r4, r1
 8006e76:	2c63      	cmp	r4, #99	@ 0x63
 8006e78:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	dcf1      	bgt.n	8006e64 <__exponent+0x1c>
 8006e80:	3130      	adds	r1, #48	@ 0x30
 8006e82:	1e94      	subs	r4, r2, #2
 8006e84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e88:	1c41      	adds	r1, r0, #1
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	d30a      	bcc.n	8006ea6 <__exponent+0x5e>
 8006e90:	f10d 0309 	add.w	r3, sp, #9
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	42ac      	cmp	r4, r5
 8006e98:	bf88      	it	hi
 8006e9a:	2300      	movhi	r3, #0
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	4403      	add	r3, r0
 8006ea0:	1a18      	subs	r0, r3, r0
 8006ea2:	b003      	add	sp, #12
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eaa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006eae:	e7ed      	b.n	8006e8c <__exponent+0x44>
 8006eb0:	2330      	movs	r3, #48	@ 0x30
 8006eb2:	3130      	adds	r1, #48	@ 0x30
 8006eb4:	7083      	strb	r3, [r0, #2]
 8006eb6:	70c1      	strb	r1, [r0, #3]
 8006eb8:	1d03      	adds	r3, r0, #4
 8006eba:	e7f1      	b.n	8006ea0 <__exponent+0x58>
 8006ebc:	0000      	movs	r0, r0
	...

08006ec0 <_printf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b08d      	sub	sp, #52	@ 0x34
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f000 fcbd 	bl	8007850 <_localeconv_r>
 8006ed6:	f8d0 b000 	ldr.w	fp, [r0]
 8006eda:	4658      	mov	r0, fp
 8006edc:	f7f9 fa50 	bl	8000380 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	9005      	str	r0, [sp, #20]
 8006ef0:	3307      	adds	r3, #7
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	f103 0108 	add.w	r1, r3, #8
 8006efa:	f8c8 1000 	str.w	r1, [r8]
 8006efe:	ed93 0b00 	vldr	d0, [r3]
 8006f02:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007160 <_printf_float+0x2a0>
 8006f06:	eeb0 7bc0 	vabs.f64	d7, d0
 8006f0a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f12:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006f16:	dd24      	ble.n	8006f62 <_printf_float+0xa2>
 8006f18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f20:	d502      	bpl.n	8006f28 <_printf_float+0x68>
 8006f22:	232d      	movs	r3, #45	@ 0x2d
 8006f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f28:	498f      	ldr	r1, [pc, #572]	@ (8007168 <_printf_float+0x2a8>)
 8006f2a:	4b90      	ldr	r3, [pc, #576]	@ (800716c <_printf_float+0x2ac>)
 8006f2c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006f30:	bf94      	ite	ls
 8006f32:	4688      	movls	r8, r1
 8006f34:	4698      	movhi	r8, r3
 8006f36:	f022 0204 	bic.w	r2, r2, #4
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	f04f 0a00 	mov.w	sl, #0
 8006f44:	9700      	str	r7, [sp, #0]
 8006f46:	4633      	mov	r3, r6
 8006f48:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f9d1 	bl	80072f4 <_printf_common>
 8006f52:	3001      	adds	r0, #1
 8006f54:	f040 8089 	bne.w	800706a <_printf_float+0x1aa>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	b00d      	add	sp, #52	@ 0x34
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	eeb4 0b40 	vcmp.f64	d0, d0
 8006f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6a:	d709      	bvc.n	8006f80 <_printf_float+0xc0>
 8006f6c:	ee10 3a90 	vmov	r3, s1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bfbc      	itt	lt
 8006f74:	232d      	movlt	r3, #45	@ 0x2d
 8006f76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f7a:	497d      	ldr	r1, [pc, #500]	@ (8007170 <_printf_float+0x2b0>)
 8006f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8007174 <_printf_float+0x2b4>)
 8006f7e:	e7d5      	b.n	8006f2c <_printf_float+0x6c>
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	1c59      	adds	r1, r3, #1
 8006f84:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006f88:	d139      	bne.n	8006ffe <_printf_float+0x13e>
 8006f8a:	2306      	movs	r3, #6
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f92:	2300      	movs	r3, #0
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	9303      	str	r3, [sp, #12]
 8006f98:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006f9e:	ab09      	add	r3, sp, #36	@ 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f7ff fef9 	bl	8006da0 <__cvt>
 8006fae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	d129      	bne.n	800700c <_printf_float+0x14c>
 8006fb8:	1cc8      	adds	r0, r1, #3
 8006fba:	db02      	blt.n	8006fc2 <_printf_float+0x102>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	4299      	cmp	r1, r3
 8006fc0:	dd41      	ble.n	8007046 <_printf_float+0x186>
 8006fc2:	f1a9 0902 	sub.w	r9, r9, #2
 8006fc6:	fa5f f989 	uxtb.w	r9, r9
 8006fca:	3901      	subs	r1, #1
 8006fcc:	464a      	mov	r2, r9
 8006fce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fd4:	f7ff ff38 	bl	8006e48 <__exponent>
 8006fd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fda:	1813      	adds	r3, r2, r0
 8006fdc:	2a01      	cmp	r2, #1
 8006fde:	4682      	mov	sl, r0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	dc02      	bgt.n	8006fea <_printf_float+0x12a>
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	07d2      	lsls	r2, r2, #31
 8006fe8:	d501      	bpl.n	8006fee <_printf_float+0x12e>
 8006fea:	3301      	adds	r3, #1
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0a6      	beq.n	8006f44 <_printf_float+0x84>
 8006ff6:	232d      	movs	r3, #45	@ 0x2d
 8006ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ffc:	e7a2      	b.n	8006f44 <_printf_float+0x84>
 8006ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007002:	d1c4      	bne.n	8006f8e <_printf_float+0xce>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1c2      	bne.n	8006f8e <_printf_float+0xce>
 8007008:	2301      	movs	r3, #1
 800700a:	e7bf      	b.n	8006f8c <_printf_float+0xcc>
 800700c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007010:	d9db      	bls.n	8006fca <_printf_float+0x10a>
 8007012:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007016:	d118      	bne.n	800704a <_printf_float+0x18a>
 8007018:	2900      	cmp	r1, #0
 800701a:	6863      	ldr	r3, [r4, #4]
 800701c:	dd0b      	ble.n	8007036 <_printf_float+0x176>
 800701e:	6121      	str	r1, [r4, #16]
 8007020:	b913      	cbnz	r3, 8007028 <_printf_float+0x168>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	07d0      	lsls	r0, r2, #31
 8007026:	d502      	bpl.n	800702e <_printf_float+0x16e>
 8007028:	3301      	adds	r3, #1
 800702a:	440b      	add	r3, r1
 800702c:	6123      	str	r3, [r4, #16]
 800702e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007030:	f04f 0a00 	mov.w	sl, #0
 8007034:	e7db      	b.n	8006fee <_printf_float+0x12e>
 8007036:	b913      	cbnz	r3, 800703e <_printf_float+0x17e>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	07d2      	lsls	r2, r2, #31
 800703c:	d501      	bpl.n	8007042 <_printf_float+0x182>
 800703e:	3302      	adds	r3, #2
 8007040:	e7f4      	b.n	800702c <_printf_float+0x16c>
 8007042:	2301      	movs	r3, #1
 8007044:	e7f2      	b.n	800702c <_printf_float+0x16c>
 8007046:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800704a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800704c:	4299      	cmp	r1, r3
 800704e:	db05      	blt.n	800705c <_printf_float+0x19c>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	6121      	str	r1, [r4, #16]
 8007054:	07d8      	lsls	r0, r3, #31
 8007056:	d5ea      	bpl.n	800702e <_printf_float+0x16e>
 8007058:	1c4b      	adds	r3, r1, #1
 800705a:	e7e7      	b.n	800702c <_printf_float+0x16c>
 800705c:	2900      	cmp	r1, #0
 800705e:	bfd4      	ite	le
 8007060:	f1c1 0202 	rsble	r2, r1, #2
 8007064:	2201      	movgt	r2, #1
 8007066:	4413      	add	r3, r2
 8007068:	e7e0      	b.n	800702c <_printf_float+0x16c>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	055a      	lsls	r2, r3, #21
 800706e:	d407      	bmi.n	8007080 <_printf_float+0x1c0>
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	4642      	mov	r2, r8
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	d12a      	bne.n	80070d4 <_printf_float+0x214>
 800707e:	e76b      	b.n	8006f58 <_printf_float+0x98>
 8007080:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007084:	f240 80e0 	bls.w	8007248 <_printf_float+0x388>
 8007088:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800708c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007094:	d133      	bne.n	80070fe <_printf_float+0x23e>
 8007096:	4a38      	ldr	r2, [pc, #224]	@ (8007178 <_printf_float+0x2b8>)
 8007098:	2301      	movs	r3, #1
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f af59 	beq.w	8006f58 <_printf_float+0x98>
 80070a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070aa:	4543      	cmp	r3, r8
 80070ac:	db02      	blt.n	80070b4 <_printf_float+0x1f4>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	07d8      	lsls	r0, r3, #31
 80070b2:	d50f      	bpl.n	80070d4 <_printf_float+0x214>
 80070b4:	9b05      	ldr	r3, [sp, #20]
 80070b6:	465a      	mov	r2, fp
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f af4a 	beq.w	8006f58 <_printf_float+0x98>
 80070c4:	f04f 0900 	mov.w	r9, #0
 80070c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070cc:	f104 0a1a 	add.w	sl, r4, #26
 80070d0:	45c8      	cmp	r8, r9
 80070d2:	dc09      	bgt.n	80070e8 <_printf_float+0x228>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	079b      	lsls	r3, r3, #30
 80070d8:	f100 8107 	bmi.w	80072ea <_printf_float+0x42a>
 80070dc:	68e0      	ldr	r0, [r4, #12]
 80070de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070e0:	4298      	cmp	r0, r3
 80070e2:	bfb8      	it	lt
 80070e4:	4618      	movlt	r0, r3
 80070e6:	e739      	b.n	8006f5c <_printf_float+0x9c>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4652      	mov	r2, sl
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af30 	beq.w	8006f58 <_printf_float+0x98>
 80070f8:	f109 0901 	add.w	r9, r9, #1
 80070fc:	e7e8      	b.n	80070d0 <_printf_float+0x210>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	dc3b      	bgt.n	800717c <_printf_float+0x2bc>
 8007104:	4a1c      	ldr	r2, [pc, #112]	@ (8007178 <_printf_float+0x2b8>)
 8007106:	2301      	movs	r3, #1
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f af22 	beq.w	8006f58 <_printf_float+0x98>
 8007114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007118:	ea59 0303 	orrs.w	r3, r9, r3
 800711c:	d102      	bne.n	8007124 <_printf_float+0x264>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	07d9      	lsls	r1, r3, #31
 8007122:	d5d7      	bpl.n	80070d4 <_printf_float+0x214>
 8007124:	9b05      	ldr	r3, [sp, #20]
 8007126:	465a      	mov	r2, fp
 8007128:	4631      	mov	r1, r6
 800712a:	4628      	mov	r0, r5
 800712c:	47b8      	blx	r7
 800712e:	3001      	adds	r0, #1
 8007130:	f43f af12 	beq.w	8006f58 <_printf_float+0x98>
 8007134:	f04f 0a00 	mov.w	sl, #0
 8007138:	f104 0b1a 	add.w	fp, r4, #26
 800713c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713e:	425b      	negs	r3, r3
 8007140:	4553      	cmp	r3, sl
 8007142:	dc01      	bgt.n	8007148 <_printf_float+0x288>
 8007144:	464b      	mov	r3, r9
 8007146:	e794      	b.n	8007072 <_printf_float+0x1b2>
 8007148:	2301      	movs	r3, #1
 800714a:	465a      	mov	r2, fp
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f af00 	beq.w	8006f58 <_printf_float+0x98>
 8007158:	f10a 0a01 	add.w	sl, sl, #1
 800715c:	e7ee      	b.n	800713c <_printf_float+0x27c>
 800715e:	bf00      	nop
 8007160:	ffffffff 	.word	0xffffffff
 8007164:	7fefffff 	.word	0x7fefffff
 8007168:	08009acc 	.word	0x08009acc
 800716c:	08009ad0 	.word	0x08009ad0
 8007170:	08009ad4 	.word	0x08009ad4
 8007174:	08009ad8 	.word	0x08009ad8
 8007178:	08009adc 	.word	0x08009adc
 800717c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800717e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007182:	4553      	cmp	r3, sl
 8007184:	bfa8      	it	ge
 8007186:	4653      	movge	r3, sl
 8007188:	2b00      	cmp	r3, #0
 800718a:	4699      	mov	r9, r3
 800718c:	dc37      	bgt.n	80071fe <_printf_float+0x33e>
 800718e:	2300      	movs	r3, #0
 8007190:	9307      	str	r3, [sp, #28]
 8007192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007196:	f104 021a 	add.w	r2, r4, #26
 800719a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800719c:	9907      	ldr	r1, [sp, #28]
 800719e:	9306      	str	r3, [sp, #24]
 80071a0:	eba3 0309 	sub.w	r3, r3, r9
 80071a4:	428b      	cmp	r3, r1
 80071a6:	dc31      	bgt.n	800720c <_printf_float+0x34c>
 80071a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071aa:	459a      	cmp	sl, r3
 80071ac:	dc3b      	bgt.n	8007226 <_printf_float+0x366>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07da      	lsls	r2, r3, #31
 80071b2:	d438      	bmi.n	8007226 <_printf_float+0x366>
 80071b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b6:	ebaa 0903 	sub.w	r9, sl, r3
 80071ba:	9b06      	ldr	r3, [sp, #24]
 80071bc:	ebaa 0303 	sub.w	r3, sl, r3
 80071c0:	4599      	cmp	r9, r3
 80071c2:	bfa8      	it	ge
 80071c4:	4699      	movge	r9, r3
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	dc34      	bgt.n	8007236 <_printf_float+0x376>
 80071cc:	f04f 0800 	mov.w	r8, #0
 80071d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d4:	f104 0b1a 	add.w	fp, r4, #26
 80071d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071da:	ebaa 0303 	sub.w	r3, sl, r3
 80071de:	eba3 0309 	sub.w	r3, r3, r9
 80071e2:	4543      	cmp	r3, r8
 80071e4:	f77f af76 	ble.w	80070d4 <_printf_float+0x214>
 80071e8:	2301      	movs	r3, #1
 80071ea:	465a      	mov	r2, fp
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f aeb0 	beq.w	8006f58 <_printf_float+0x98>
 80071f8:	f108 0801 	add.w	r8, r8, #1
 80071fc:	e7ec      	b.n	80071d8 <_printf_float+0x318>
 80071fe:	4642      	mov	r2, r8
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	d1c1      	bne.n	800718e <_printf_float+0x2ce>
 800720a:	e6a5      	b.n	8006f58 <_printf_float+0x98>
 800720c:	2301      	movs	r3, #1
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	9206      	str	r2, [sp, #24]
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f ae9e 	beq.w	8006f58 <_printf_float+0x98>
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	9a06      	ldr	r2, [sp, #24]
 8007220:	3301      	adds	r3, #1
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	e7b9      	b.n	800719a <_printf_float+0x2da>
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	465a      	mov	r2, fp
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d1bf      	bne.n	80071b4 <_printf_float+0x2f4>
 8007234:	e690      	b.n	8006f58 <_printf_float+0x98>
 8007236:	9a06      	ldr	r2, [sp, #24]
 8007238:	464b      	mov	r3, r9
 800723a:	4442      	add	r2, r8
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	d1c2      	bne.n	80071cc <_printf_float+0x30c>
 8007246:	e687      	b.n	8006f58 <_printf_float+0x98>
 8007248:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800724c:	f1b9 0f01 	cmp.w	r9, #1
 8007250:	dc01      	bgt.n	8007256 <_printf_float+0x396>
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d536      	bpl.n	80072c4 <_printf_float+0x404>
 8007256:	2301      	movs	r3, #1
 8007258:	4642      	mov	r2, r8
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f ae79 	beq.w	8006f58 <_printf_float+0x98>
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	465a      	mov	r2, fp
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f ae71 	beq.w	8006f58 <_printf_float+0x98>
 8007276:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800727a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007282:	f109 39ff 	add.w	r9, r9, #4294967295
 8007286:	d018      	beq.n	80072ba <_printf_float+0x3fa>
 8007288:	464b      	mov	r3, r9
 800728a:	f108 0201 	add.w	r2, r8, #1
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	d10c      	bne.n	80072b2 <_printf_float+0x3f2>
 8007298:	e65e      	b.n	8006f58 <_printf_float+0x98>
 800729a:	2301      	movs	r3, #1
 800729c:	465a      	mov	r2, fp
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae57 	beq.w	8006f58 <_printf_float+0x98>
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	45c8      	cmp	r8, r9
 80072b0:	dbf3      	blt.n	800729a <_printf_float+0x3da>
 80072b2:	4653      	mov	r3, sl
 80072b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072b8:	e6dc      	b.n	8007074 <_printf_float+0x1b4>
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	f104 0b1a 	add.w	fp, r4, #26
 80072c2:	e7f4      	b.n	80072ae <_printf_float+0x3ee>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4642      	mov	r2, r8
 80072c8:	e7e1      	b.n	800728e <_printf_float+0x3ce>
 80072ca:	2301      	movs	r3, #1
 80072cc:	464a      	mov	r2, r9
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f ae3f 	beq.w	8006f58 <_printf_float+0x98>
 80072da:	f108 0801 	add.w	r8, r8, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	4543      	cmp	r3, r8
 80072e6:	dcf0      	bgt.n	80072ca <_printf_float+0x40a>
 80072e8:	e6f8      	b.n	80070dc <_printf_float+0x21c>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	f104 0919 	add.w	r9, r4, #25
 80072f2:	e7f4      	b.n	80072de <_printf_float+0x41e>

080072f4 <_printf_common>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	4616      	mov	r6, r2
 80072fa:	4698      	mov	r8, r3
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007304:	4293      	cmp	r3, r2
 8007306:	bfb8      	it	lt
 8007308:	4613      	movlt	r3, r2
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007310:	4607      	mov	r7, r0
 8007312:	460c      	mov	r4, r1
 8007314:	b10a      	cbz	r2, 800731a <_printf_common+0x26>
 8007316:	3301      	adds	r3, #1
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	0699      	lsls	r1, r3, #26
 800731e:	bf42      	ittt	mi
 8007320:	6833      	ldrmi	r3, [r6, #0]
 8007322:	3302      	addmi	r3, #2
 8007324:	6033      	strmi	r3, [r6, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	f015 0506 	ands.w	r5, r5, #6
 800732c:	d106      	bne.n	800733c <_printf_common+0x48>
 800732e:	f104 0a19 	add.w	sl, r4, #25
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	6832      	ldr	r2, [r6, #0]
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42ab      	cmp	r3, r5
 800733a:	dc26      	bgt.n	800738a <_printf_common+0x96>
 800733c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	3b00      	subs	r3, #0
 8007344:	bf18      	it	ne
 8007346:	2301      	movne	r3, #1
 8007348:	0692      	lsls	r2, r2, #26
 800734a:	d42b      	bmi.n	80073a4 <_printf_common+0xb0>
 800734c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007350:	4641      	mov	r1, r8
 8007352:	4638      	mov	r0, r7
 8007354:	47c8      	blx	r9
 8007356:	3001      	adds	r0, #1
 8007358:	d01e      	beq.n	8007398 <_printf_common+0xa4>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	f003 0306 	and.w	r3, r3, #6
 8007362:	2b04      	cmp	r3, #4
 8007364:	bf02      	ittt	eq
 8007366:	68e5      	ldreq	r5, [r4, #12]
 8007368:	6833      	ldreq	r3, [r6, #0]
 800736a:	1aed      	subeq	r5, r5, r3
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	bf0c      	ite	eq
 8007370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007374:	2500      	movne	r5, #0
 8007376:	4293      	cmp	r3, r2
 8007378:	bfc4      	itt	gt
 800737a:	1a9b      	subgt	r3, r3, r2
 800737c:	18ed      	addgt	r5, r5, r3
 800737e:	2600      	movs	r6, #0
 8007380:	341a      	adds	r4, #26
 8007382:	42b5      	cmp	r5, r6
 8007384:	d11a      	bne.n	80073bc <_printf_common+0xc8>
 8007386:	2000      	movs	r0, #0
 8007388:	e008      	b.n	800739c <_printf_common+0xa8>
 800738a:	2301      	movs	r3, #1
 800738c:	4652      	mov	r2, sl
 800738e:	4641      	mov	r1, r8
 8007390:	4638      	mov	r0, r7
 8007392:	47c8      	blx	r9
 8007394:	3001      	adds	r0, #1
 8007396:	d103      	bne.n	80073a0 <_printf_common+0xac>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a0:	3501      	adds	r5, #1
 80073a2:	e7c6      	b.n	8007332 <_printf_common+0x3e>
 80073a4:	18e1      	adds	r1, r4, r3
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	2030      	movs	r0, #48	@ 0x30
 80073aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073ae:	4422      	add	r2, r4
 80073b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073b8:	3302      	adds	r3, #2
 80073ba:	e7c7      	b.n	800734c <_printf_common+0x58>
 80073bc:	2301      	movs	r3, #1
 80073be:	4622      	mov	r2, r4
 80073c0:	4641      	mov	r1, r8
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c8      	blx	r9
 80073c6:	3001      	adds	r0, #1
 80073c8:	d0e6      	beq.n	8007398 <_printf_common+0xa4>
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7d9      	b.n	8007382 <_printf_common+0x8e>
	...

080073d0 <_printf_i>:
 80073d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	7e0f      	ldrb	r7, [r1, #24]
 80073d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073d8:	2f78      	cmp	r7, #120	@ 0x78
 80073da:	4691      	mov	r9, r2
 80073dc:	4680      	mov	r8, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	469a      	mov	sl, r3
 80073e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073e6:	d807      	bhi.n	80073f8 <_printf_i+0x28>
 80073e8:	2f62      	cmp	r7, #98	@ 0x62
 80073ea:	d80a      	bhi.n	8007402 <_printf_i+0x32>
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	f000 80d2 	beq.w	8007596 <_printf_i+0x1c6>
 80073f2:	2f58      	cmp	r7, #88	@ 0x58
 80073f4:	f000 80b9 	beq.w	800756a <_printf_i+0x19a>
 80073f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007400:	e03a      	b.n	8007478 <_printf_i+0xa8>
 8007402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007406:	2b15      	cmp	r3, #21
 8007408:	d8f6      	bhi.n	80073f8 <_printf_i+0x28>
 800740a:	a101      	add	r1, pc, #4	@ (adr r1, 8007410 <_printf_i+0x40>)
 800740c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007410:	08007469 	.word	0x08007469
 8007414:	0800747d 	.word	0x0800747d
 8007418:	080073f9 	.word	0x080073f9
 800741c:	080073f9 	.word	0x080073f9
 8007420:	080073f9 	.word	0x080073f9
 8007424:	080073f9 	.word	0x080073f9
 8007428:	0800747d 	.word	0x0800747d
 800742c:	080073f9 	.word	0x080073f9
 8007430:	080073f9 	.word	0x080073f9
 8007434:	080073f9 	.word	0x080073f9
 8007438:	080073f9 	.word	0x080073f9
 800743c:	0800757d 	.word	0x0800757d
 8007440:	080074a7 	.word	0x080074a7
 8007444:	08007537 	.word	0x08007537
 8007448:	080073f9 	.word	0x080073f9
 800744c:	080073f9 	.word	0x080073f9
 8007450:	0800759f 	.word	0x0800759f
 8007454:	080073f9 	.word	0x080073f9
 8007458:	080074a7 	.word	0x080074a7
 800745c:	080073f9 	.word	0x080073f9
 8007460:	080073f9 	.word	0x080073f9
 8007464:	0800753f 	.word	0x0800753f
 8007468:	6833      	ldr	r3, [r6, #0]
 800746a:	1d1a      	adds	r2, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6032      	str	r2, [r6, #0]
 8007470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007478:	2301      	movs	r3, #1
 800747a:	e09d      	b.n	80075b8 <_printf_i+0x1e8>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	1d19      	adds	r1, r3, #4
 8007482:	6031      	str	r1, [r6, #0]
 8007484:	0606      	lsls	r6, r0, #24
 8007486:	d501      	bpl.n	800748c <_printf_i+0xbc>
 8007488:	681d      	ldr	r5, [r3, #0]
 800748a:	e003      	b.n	8007494 <_printf_i+0xc4>
 800748c:	0645      	lsls	r5, r0, #25
 800748e:	d5fb      	bpl.n	8007488 <_printf_i+0xb8>
 8007490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007494:	2d00      	cmp	r5, #0
 8007496:	da03      	bge.n	80074a0 <_printf_i+0xd0>
 8007498:	232d      	movs	r3, #45	@ 0x2d
 800749a:	426d      	negs	r5, r5
 800749c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a0:	4859      	ldr	r0, [pc, #356]	@ (8007608 <_printf_i+0x238>)
 80074a2:	230a      	movs	r3, #10
 80074a4:	e011      	b.n	80074ca <_printf_i+0xfa>
 80074a6:	6821      	ldr	r1, [r4, #0]
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	0608      	lsls	r0, r1, #24
 80074ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80074b0:	d402      	bmi.n	80074b8 <_printf_i+0xe8>
 80074b2:	0649      	lsls	r1, r1, #25
 80074b4:	bf48      	it	mi
 80074b6:	b2ad      	uxthmi	r5, r5
 80074b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074ba:	4853      	ldr	r0, [pc, #332]	@ (8007608 <_printf_i+0x238>)
 80074bc:	6033      	str	r3, [r6, #0]
 80074be:	bf14      	ite	ne
 80074c0:	230a      	movne	r3, #10
 80074c2:	2308      	moveq	r3, #8
 80074c4:	2100      	movs	r1, #0
 80074c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ca:	6866      	ldr	r6, [r4, #4]
 80074cc:	60a6      	str	r6, [r4, #8]
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	bfa2      	ittt	ge
 80074d2:	6821      	ldrge	r1, [r4, #0]
 80074d4:	f021 0104 	bicge.w	r1, r1, #4
 80074d8:	6021      	strge	r1, [r4, #0]
 80074da:	b90d      	cbnz	r5, 80074e0 <_printf_i+0x110>
 80074dc:	2e00      	cmp	r6, #0
 80074de:	d04b      	beq.n	8007578 <_printf_i+0x1a8>
 80074e0:	4616      	mov	r6, r2
 80074e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e6:	fb03 5711 	mls	r7, r3, r1, r5
 80074ea:	5dc7      	ldrb	r7, [r0, r7]
 80074ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074f0:	462f      	mov	r7, r5
 80074f2:	42bb      	cmp	r3, r7
 80074f4:	460d      	mov	r5, r1
 80074f6:	d9f4      	bls.n	80074e2 <_printf_i+0x112>
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d10b      	bne.n	8007514 <_printf_i+0x144>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	07df      	lsls	r7, r3, #31
 8007500:	d508      	bpl.n	8007514 <_printf_i+0x144>
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	6861      	ldr	r1, [r4, #4]
 8007506:	4299      	cmp	r1, r3
 8007508:	bfde      	ittt	le
 800750a:	2330      	movle	r3, #48	@ 0x30
 800750c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007514:	1b92      	subs	r2, r2, r6
 8007516:	6122      	str	r2, [r4, #16]
 8007518:	f8cd a000 	str.w	sl, [sp]
 800751c:	464b      	mov	r3, r9
 800751e:	aa03      	add	r2, sp, #12
 8007520:	4621      	mov	r1, r4
 8007522:	4640      	mov	r0, r8
 8007524:	f7ff fee6 	bl	80072f4 <_printf_common>
 8007528:	3001      	adds	r0, #1
 800752a:	d14a      	bne.n	80075c2 <_printf_i+0x1f2>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	b004      	add	sp, #16
 8007532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	f043 0320 	orr.w	r3, r3, #32
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	4833      	ldr	r0, [pc, #204]	@ (800760c <_printf_i+0x23c>)
 8007540:	2778      	movs	r7, #120	@ 0x78
 8007542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	6831      	ldr	r1, [r6, #0]
 800754a:	061f      	lsls	r7, r3, #24
 800754c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007550:	d402      	bmi.n	8007558 <_printf_i+0x188>
 8007552:	065f      	lsls	r7, r3, #25
 8007554:	bf48      	it	mi
 8007556:	b2ad      	uxthmi	r5, r5
 8007558:	6031      	str	r1, [r6, #0]
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	bf44      	itt	mi
 800755e:	f043 0320 	orrmi.w	r3, r3, #32
 8007562:	6023      	strmi	r3, [r4, #0]
 8007564:	b11d      	cbz	r5, 800756e <_printf_i+0x19e>
 8007566:	2310      	movs	r3, #16
 8007568:	e7ac      	b.n	80074c4 <_printf_i+0xf4>
 800756a:	4827      	ldr	r0, [pc, #156]	@ (8007608 <_printf_i+0x238>)
 800756c:	e7e9      	b.n	8007542 <_printf_i+0x172>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	f023 0320 	bic.w	r3, r3, #32
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	e7f6      	b.n	8007566 <_printf_i+0x196>
 8007578:	4616      	mov	r6, r2
 800757a:	e7bd      	b.n	80074f8 <_printf_i+0x128>
 800757c:	6833      	ldr	r3, [r6, #0]
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	6961      	ldr	r1, [r4, #20]
 8007582:	1d18      	adds	r0, r3, #4
 8007584:	6030      	str	r0, [r6, #0]
 8007586:	062e      	lsls	r6, r5, #24
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	d501      	bpl.n	8007590 <_printf_i+0x1c0>
 800758c:	6019      	str	r1, [r3, #0]
 800758e:	e002      	b.n	8007596 <_printf_i+0x1c6>
 8007590:	0668      	lsls	r0, r5, #25
 8007592:	d5fb      	bpl.n	800758c <_printf_i+0x1bc>
 8007594:	8019      	strh	r1, [r3, #0]
 8007596:	2300      	movs	r3, #0
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	4616      	mov	r6, r2
 800759c:	e7bc      	b.n	8007518 <_printf_i+0x148>
 800759e:	6833      	ldr	r3, [r6, #0]
 80075a0:	1d1a      	adds	r2, r3, #4
 80075a2:	6032      	str	r2, [r6, #0]
 80075a4:	681e      	ldr	r6, [r3, #0]
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	2100      	movs	r1, #0
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7f8 fe98 	bl	80002e0 <memchr>
 80075b0:	b108      	cbz	r0, 80075b6 <_printf_i+0x1e6>
 80075b2:	1b80      	subs	r0, r0, r6
 80075b4:	6060      	str	r0, [r4, #4]
 80075b6:	6863      	ldr	r3, [r4, #4]
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	2300      	movs	r3, #0
 80075bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c0:	e7aa      	b.n	8007518 <_printf_i+0x148>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	4632      	mov	r2, r6
 80075c6:	4649      	mov	r1, r9
 80075c8:	4640      	mov	r0, r8
 80075ca:	47d0      	blx	sl
 80075cc:	3001      	adds	r0, #1
 80075ce:	d0ad      	beq.n	800752c <_printf_i+0x15c>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	079b      	lsls	r3, r3, #30
 80075d4:	d413      	bmi.n	80075fe <_printf_i+0x22e>
 80075d6:	68e0      	ldr	r0, [r4, #12]
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	4298      	cmp	r0, r3
 80075dc:	bfb8      	it	lt
 80075de:	4618      	movlt	r0, r3
 80075e0:	e7a6      	b.n	8007530 <_printf_i+0x160>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4632      	mov	r2, r6
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d09d      	beq.n	800752c <_printf_i+0x15c>
 80075f0:	3501      	adds	r5, #1
 80075f2:	68e3      	ldr	r3, [r4, #12]
 80075f4:	9903      	ldr	r1, [sp, #12]
 80075f6:	1a5b      	subs	r3, r3, r1
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	dcf2      	bgt.n	80075e2 <_printf_i+0x212>
 80075fc:	e7eb      	b.n	80075d6 <_printf_i+0x206>
 80075fe:	2500      	movs	r5, #0
 8007600:	f104 0619 	add.w	r6, r4, #25
 8007604:	e7f5      	b.n	80075f2 <_printf_i+0x222>
 8007606:	bf00      	nop
 8007608:	08009ade 	.word	0x08009ade
 800760c:	08009aef 	.word	0x08009aef

08007610 <std>:
 8007610:	2300      	movs	r3, #0
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	e9c0 3300 	strd	r3, r3, [r0]
 800761a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	8181      	strh	r1, [r0, #12]
 8007622:	6643      	str	r3, [r0, #100]	@ 0x64
 8007624:	81c2      	strh	r2, [r0, #14]
 8007626:	6183      	str	r3, [r0, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	2208      	movs	r2, #8
 800762c:	305c      	adds	r0, #92	@ 0x5c
 800762e:	f000 f906 	bl	800783e <memset>
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <std+0x58>)
 8007634:	6263      	str	r3, [r4, #36]	@ 0x24
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <std+0x5c>)
 8007638:	62a3      	str	r3, [r4, #40]	@ 0x28
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <std+0x60>)
 800763c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <std+0x64>)
 8007640:	6323      	str	r3, [r4, #48]	@ 0x30
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x68>)
 8007644:	6224      	str	r4, [r4, #32]
 8007646:	429c      	cmp	r4, r3
 8007648:	d006      	beq.n	8007658 <std+0x48>
 800764a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800764e:	4294      	cmp	r4, r2
 8007650:	d002      	beq.n	8007658 <std+0x48>
 8007652:	33d0      	adds	r3, #208	@ 0xd0
 8007654:	429c      	cmp	r4, r3
 8007656:	d105      	bne.n	8007664 <std+0x54>
 8007658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007660:	f000 b96a 	b.w	8007938 <__retarget_lock_init_recursive>
 8007664:	bd10      	pop	{r4, pc}
 8007666:	bf00      	nop
 8007668:	080077b9 	.word	0x080077b9
 800766c:	080077db 	.word	0x080077db
 8007670:	08007813 	.word	0x08007813
 8007674:	08007837 	.word	0x08007837
 8007678:	24000334 	.word	0x24000334

0800767c <stdio_exit_handler>:
 800767c:	4a02      	ldr	r2, [pc, #8]	@ (8007688 <stdio_exit_handler+0xc>)
 800767e:	4903      	ldr	r1, [pc, #12]	@ (800768c <stdio_exit_handler+0x10>)
 8007680:	4803      	ldr	r0, [pc, #12]	@ (8007690 <stdio_exit_handler+0x14>)
 8007682:	f000 b869 	b.w	8007758 <_fwalk_sglue>
 8007686:	bf00      	nop
 8007688:	24000010 	.word	0x24000010
 800768c:	0800918d 	.word	0x0800918d
 8007690:	24000020 	.word	0x24000020

08007694 <cleanup_stdio>:
 8007694:	6841      	ldr	r1, [r0, #4]
 8007696:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <cleanup_stdio+0x34>)
 8007698:	4299      	cmp	r1, r3
 800769a:	b510      	push	{r4, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	d001      	beq.n	80076a4 <cleanup_stdio+0x10>
 80076a0:	f001 fd74 	bl	800918c <_fflush_r>
 80076a4:	68a1      	ldr	r1, [r4, #8]
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <cleanup_stdio+0x38>)
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d002      	beq.n	80076b2 <cleanup_stdio+0x1e>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f001 fd6d 	bl	800918c <_fflush_r>
 80076b2:	68e1      	ldr	r1, [r4, #12]
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <cleanup_stdio+0x3c>)
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d004      	beq.n	80076c4 <cleanup_stdio+0x30>
 80076ba:	4620      	mov	r0, r4
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	f001 bd64 	b.w	800918c <_fflush_r>
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	bf00      	nop
 80076c8:	24000334 	.word	0x24000334
 80076cc:	2400039c 	.word	0x2400039c
 80076d0:	24000404 	.word	0x24000404

080076d4 <global_stdio_init.part.0>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <global_stdio_init.part.0+0x30>)
 80076d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007708 <global_stdio_init.part.0+0x34>)
 80076da:	4a0c      	ldr	r2, [pc, #48]	@ (800770c <global_stdio_init.part.0+0x38>)
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	2200      	movs	r2, #0
 80076e2:	2104      	movs	r1, #4
 80076e4:	f7ff ff94 	bl	8007610 <std>
 80076e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076ec:	2201      	movs	r2, #1
 80076ee:	2109      	movs	r1, #9
 80076f0:	f7ff ff8e 	bl	8007610 <std>
 80076f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076f8:	2202      	movs	r2, #2
 80076fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fe:	2112      	movs	r1, #18
 8007700:	f7ff bf86 	b.w	8007610 <std>
 8007704:	2400046c 	.word	0x2400046c
 8007708:	24000334 	.word	0x24000334
 800770c:	0800767d 	.word	0x0800767d

08007710 <__sfp_lock_acquire>:
 8007710:	4801      	ldr	r0, [pc, #4]	@ (8007718 <__sfp_lock_acquire+0x8>)
 8007712:	f000 b912 	b.w	800793a <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	24000475 	.word	0x24000475

0800771c <__sfp_lock_release>:
 800771c:	4801      	ldr	r0, [pc, #4]	@ (8007724 <__sfp_lock_release+0x8>)
 800771e:	f000 b90d 	b.w	800793c <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	24000475 	.word	0x24000475

08007728 <__sinit>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	f7ff fff0 	bl	8007710 <__sfp_lock_acquire>
 8007730:	6a23      	ldr	r3, [r4, #32]
 8007732:	b11b      	cbz	r3, 800773c <__sinit+0x14>
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f7ff bff0 	b.w	800771c <__sfp_lock_release>
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <__sinit+0x28>)
 800773e:	6223      	str	r3, [r4, #32]
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <__sinit+0x2c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f5      	bne.n	8007734 <__sinit+0xc>
 8007748:	f7ff ffc4 	bl	80076d4 <global_stdio_init.part.0>
 800774c:	e7f2      	b.n	8007734 <__sinit+0xc>
 800774e:	bf00      	nop
 8007750:	08007695 	.word	0x08007695
 8007754:	2400046c 	.word	0x2400046c

08007758 <_fwalk_sglue>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	4607      	mov	r7, r0
 800775e:	4688      	mov	r8, r1
 8007760:	4614      	mov	r4, r2
 8007762:	2600      	movs	r6, #0
 8007764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007768:	f1b9 0901 	subs.w	r9, r9, #1
 800776c:	d505      	bpl.n	800777a <_fwalk_sglue+0x22>
 800776e:	6824      	ldr	r4, [r4, #0]
 8007770:	2c00      	cmp	r4, #0
 8007772:	d1f7      	bne.n	8007764 <_fwalk_sglue+0xc>
 8007774:	4630      	mov	r0, r6
 8007776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d907      	bls.n	8007790 <_fwalk_sglue+0x38>
 8007780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007784:	3301      	adds	r3, #1
 8007786:	d003      	beq.n	8007790 <_fwalk_sglue+0x38>
 8007788:	4629      	mov	r1, r5
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	4306      	orrs	r6, r0
 8007790:	3568      	adds	r5, #104	@ 0x68
 8007792:	e7e9      	b.n	8007768 <_fwalk_sglue+0x10>

08007794 <iprintf>:
 8007794:	b40f      	push	{r0, r1, r2, r3}
 8007796:	b507      	push	{r0, r1, r2, lr}
 8007798:	4906      	ldr	r1, [pc, #24]	@ (80077b4 <iprintf+0x20>)
 800779a:	ab04      	add	r3, sp, #16
 800779c:	6808      	ldr	r0, [r1, #0]
 800779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a2:	6881      	ldr	r1, [r0, #8]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	f001 fb55 	bl	8008e54 <_vfiprintf_r>
 80077aa:	b003      	add	sp, #12
 80077ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b0:	b004      	add	sp, #16
 80077b2:	4770      	bx	lr
 80077b4:	2400001c 	.word	0x2400001c

080077b8 <__sread>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	f000 f86c 	bl	800789c <_read_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	bfab      	itete	ge
 80077c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077ca:	89a3      	ldrhlt	r3, [r4, #12]
 80077cc:	181b      	addge	r3, r3, r0
 80077ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077d2:	bfac      	ite	ge
 80077d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077d6:	81a3      	strhlt	r3, [r4, #12]
 80077d8:	bd10      	pop	{r4, pc}

080077da <__swrite>:
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	461f      	mov	r7, r3
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d505      	bpl.n	80077f8 <__swrite+0x1e>
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2302      	movs	r3, #2
 80077f2:	2200      	movs	r2, #0
 80077f4:	f000 f840 	bl	8007878 <_lseek_r>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	f000 b857 	b.w	80078c0 <_write_r>

08007812 <__sseek>:
 8007812:	b510      	push	{r4, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 f82d 	bl	8007878 <_lseek_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	bf15      	itete	ne
 8007824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800782a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800782e:	81a3      	strheq	r3, [r4, #12]
 8007830:	bf18      	it	ne
 8007832:	81a3      	strhne	r3, [r4, #12]
 8007834:	bd10      	pop	{r4, pc}

08007836 <__sclose>:
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 b80d 	b.w	8007858 <_close_r>

0800783e <memset>:
 800783e:	4402      	add	r2, r0
 8007840:	4603      	mov	r3, r0
 8007842:	4293      	cmp	r3, r2
 8007844:	d100      	bne.n	8007848 <memset+0xa>
 8007846:	4770      	bx	lr
 8007848:	f803 1b01 	strb.w	r1, [r3], #1
 800784c:	e7f9      	b.n	8007842 <memset+0x4>
	...

08007850 <_localeconv_r>:
 8007850:	4800      	ldr	r0, [pc, #0]	@ (8007854 <_localeconv_r+0x4>)
 8007852:	4770      	bx	lr
 8007854:	2400015c 	.word	0x2400015c

08007858 <_close_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	@ (8007874 <_close_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7f9 ff69 	bl	800173a <_close>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_close_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_close_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	24000470 	.word	0x24000470

08007878 <_lseek_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	@ (8007898 <_lseek_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7f9 ff7e 	bl	8001788 <_lseek>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_lseek_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_lseek_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	24000470 	.word	0x24000470

0800789c <_read_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	@ (80078bc <_read_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7f9 ff0c 	bl	80016c8 <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_read_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_read_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	24000470 	.word	0x24000470

080078c0 <_write_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	@ (80078e0 <_write_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7f9 ff17 	bl	8001702 <_write>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_write_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_write_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	24000470 	.word	0x24000470

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	@ (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2400001c 	.word	0x2400001c

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	@ (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	@ (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	@ (8007934 <__libc_init_array+0x44>)
 8007904:	f002 f83e 	bl	8009984 <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	08009eb8 	.word	0x08009eb8
 800792c:	08009eb8 	.word	0x08009eb8
 8007930:	08009eb8 	.word	0x08009eb8
 8007934:	08009ebc 	.word	0x08009ebc

08007938 <__retarget_lock_init_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_acquire_recursive>:
 800793a:	4770      	bx	lr

0800793c <__retarget_lock_release_recursive>:
 800793c:	4770      	bx	lr

0800793e <quorem>:
 800793e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007942:	6903      	ldr	r3, [r0, #16]
 8007944:	690c      	ldr	r4, [r1, #16]
 8007946:	42a3      	cmp	r3, r4
 8007948:	4607      	mov	r7, r0
 800794a:	db7e      	blt.n	8007a4a <quorem+0x10c>
 800794c:	3c01      	subs	r4, #1
 800794e:	f101 0814 	add.w	r8, r1, #20
 8007952:	00a3      	lsls	r3, r4, #2
 8007954:	f100 0514 	add.w	r5, r0, #20
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007968:	3301      	adds	r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007970:	fbb2 f6f3 	udiv	r6, r2, r3
 8007974:	d32e      	bcc.n	80079d4 <quorem+0x96>
 8007976:	f04f 0a00 	mov.w	sl, #0
 800797a:	46c4      	mov	ip, r8
 800797c:	46ae      	mov	lr, r5
 800797e:	46d3      	mov	fp, sl
 8007980:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007984:	b298      	uxth	r0, r3
 8007986:	fb06 a000 	mla	r0, r6, r0, sl
 800798a:	0c02      	lsrs	r2, r0, #16
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	fb06 2303 	mla	r3, r6, r3, r2
 8007992:	f8de 2000 	ldr.w	r2, [lr]
 8007996:	b280      	uxth	r0, r0
 8007998:	b292      	uxth	r2, r2
 800799a:	1a12      	subs	r2, r2, r0
 800799c:	445a      	add	r2, fp
 800799e:	f8de 0000 	ldr.w	r0, [lr]
 80079a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079b0:	b292      	uxth	r2, r2
 80079b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079b6:	45e1      	cmp	r9, ip
 80079b8:	f84e 2b04 	str.w	r2, [lr], #4
 80079bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079c0:	d2de      	bcs.n	8007980 <quorem+0x42>
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	58eb      	ldr	r3, [r5, r3]
 80079c6:	b92b      	cbnz	r3, 80079d4 <quorem+0x96>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	429d      	cmp	r5, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	d32f      	bcc.n	8007a32 <quorem+0xf4>
 80079d2:	613c      	str	r4, [r7, #16]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f001 f90b 	bl	8008bf0 <__mcmp>
 80079da:	2800      	cmp	r0, #0
 80079dc:	db25      	blt.n	8007a2a <quorem+0xec>
 80079de:	4629      	mov	r1, r5
 80079e0:	2000      	movs	r0, #0
 80079e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80079e6:	f8d1 c000 	ldr.w	ip, [r1]
 80079ea:	fa1f fe82 	uxth.w	lr, r2
 80079ee:	fa1f f38c 	uxth.w	r3, ip
 80079f2:	eba3 030e 	sub.w	r3, r3, lr
 80079f6:	4403      	add	r3, r0
 80079f8:	0c12      	lsrs	r2, r2, #16
 80079fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a08:	45c1      	cmp	r9, r8
 8007a0a:	f841 3b04 	str.w	r3, [r1], #4
 8007a0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a12:	d2e6      	bcs.n	80079e2 <quorem+0xa4>
 8007a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1c:	b922      	cbnz	r2, 8007a28 <quorem+0xea>
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	429d      	cmp	r5, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	d30b      	bcc.n	8007a3e <quorem+0x100>
 8007a26:	613c      	str	r4, [r7, #16]
 8007a28:	3601      	adds	r6, #1
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	b003      	add	sp, #12
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d1cb      	bne.n	80079d2 <quorem+0x94>
 8007a3a:	3c01      	subs	r4, #1
 8007a3c:	e7c6      	b.n	80079cc <quorem+0x8e>
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	3b04      	subs	r3, #4
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1ef      	bne.n	8007a26 <quorem+0xe8>
 8007a46:	3c01      	subs	r4, #1
 8007a48:	e7ea      	b.n	8007a20 <quorem+0xe2>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e7ee      	b.n	8007a2c <quorem+0xee>
	...

08007a50 <_dtoa_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ed2d 8b02 	vpush	{d8}
 8007a58:	69c7      	ldr	r7, [r0, #28]
 8007a5a:	b091      	sub	sp, #68	@ 0x44
 8007a5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a60:	ec55 4b10 	vmov	r4, r5, d0
 8007a64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	4681      	mov	r9, r0
 8007a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a6e:	b97f      	cbnz	r7, 8007a90 <_dtoa_r+0x40>
 8007a70:	2010      	movs	r0, #16
 8007a72:	f000 fd8d 	bl	8008590 <malloc>
 8007a76:	4602      	mov	r2, r0
 8007a78:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a7c:	b920      	cbnz	r0, 8007a88 <_dtoa_r+0x38>
 8007a7e:	4ba0      	ldr	r3, [pc, #640]	@ (8007d00 <_dtoa_r+0x2b0>)
 8007a80:	21ef      	movs	r1, #239	@ 0xef
 8007a82:	48a0      	ldr	r0, [pc, #640]	@ (8007d04 <_dtoa_r+0x2b4>)
 8007a84:	f001 fc5c 	bl	8009340 <__assert_func>
 8007a88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a8c:	6007      	str	r7, [r0, #0]
 8007a8e:	60c7      	str	r7, [r0, #12]
 8007a90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	b159      	cbz	r1, 8007ab0 <_dtoa_r+0x60>
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	604a      	str	r2, [r1, #4]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4093      	lsls	r3, r2
 8007aa0:	608b      	str	r3, [r1, #8]
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	f000 fe6a 	bl	800877c <_Bfree>
 8007aa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	1e2b      	subs	r3, r5, #0
 8007ab2:	bfbb      	ittet	lt
 8007ab4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ab8:	9303      	strlt	r3, [sp, #12]
 8007aba:	2300      	movge	r3, #0
 8007abc:	2201      	movlt	r2, #1
 8007abe:	bfac      	ite	ge
 8007ac0:	6033      	strge	r3, [r6, #0]
 8007ac2:	6032      	strlt	r2, [r6, #0]
 8007ac4:	4b90      	ldr	r3, [pc, #576]	@ (8007d08 <_dtoa_r+0x2b8>)
 8007ac6:	9e03      	ldr	r6, [sp, #12]
 8007ac8:	43b3      	bics	r3, r6
 8007aca:	d110      	bne.n	8007aee <_dtoa_r+0x9e>
 8007acc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ace:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007ad8:	4323      	orrs	r3, r4
 8007ada:	f000 84de 	beq.w	800849a <_dtoa_r+0xa4a>
 8007ade:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ae0:	4f8a      	ldr	r7, [pc, #552]	@ (8007d0c <_dtoa_r+0x2bc>)
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 84e0 	beq.w	80084a8 <_dtoa_r+0xa58>
 8007ae8:	1cfb      	adds	r3, r7, #3
 8007aea:	f000 bcdb 	b.w	80084a4 <_dtoa_r+0xa54>
 8007aee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007af2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	d10a      	bne.n	8007b12 <_dtoa_r+0xc2>
 8007afc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007afe:	2301      	movs	r3, #1
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b04:	b113      	cbz	r3, 8007b0c <_dtoa_r+0xbc>
 8007b06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007b08:	4b81      	ldr	r3, [pc, #516]	@ (8007d10 <_dtoa_r+0x2c0>)
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	4f81      	ldr	r7, [pc, #516]	@ (8007d14 <_dtoa_r+0x2c4>)
 8007b0e:	f000 bccb 	b.w	80084a8 <_dtoa_r+0xa58>
 8007b12:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b14:	a90f      	add	r1, sp, #60	@ 0x3c
 8007b16:	4648      	mov	r0, r9
 8007b18:	eeb0 0b48 	vmov.f64	d0, d8
 8007b1c:	f001 f918 	bl	8008d50 <__d2b>
 8007b20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007b24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b26:	9001      	str	r0, [sp, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d045      	beq.n	8007bb8 <_dtoa_r+0x168>
 8007b2c:	eeb0 7b48 	vmov.f64	d7, d8
 8007b30:	ee18 1a90 	vmov	r1, s17
 8007b34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007b38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007b3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007b40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b44:	2500      	movs	r5, #0
 8007b46:	ee07 1a90 	vmov	s15, r1
 8007b4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007b4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007ce8 <_dtoa_r+0x298>
 8007b52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007cf0 <_dtoa_r+0x2a0>
 8007b5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007cf8 <_dtoa_r+0x2a8>
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007b6a:	eeb0 7b46 	vmov.f64	d7, d6
 8007b6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007b72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7e:	ee16 8a90 	vmov	r8, s13
 8007b82:	d508      	bpl.n	8007b96 <_dtoa_r+0x146>
 8007b84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b88:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b90:	bf18      	it	ne
 8007b92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007b96:	f1b8 0f16 	cmp.w	r8, #22
 8007b9a:	d82b      	bhi.n	8007bf4 <_dtoa_r+0x1a4>
 8007b9c:	495e      	ldr	r1, [pc, #376]	@ (8007d18 <_dtoa_r+0x2c8>)
 8007b9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007ba2:	ed91 7b00 	vldr	d7, [r1]
 8007ba6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bae:	d501      	bpl.n	8007bb4 <_dtoa_r+0x164>
 8007bb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	e01e      	b.n	8007bf6 <_dtoa_r+0x1a6>
 8007bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007bc0:	2920      	cmp	r1, #32
 8007bc2:	bfc1      	itttt	gt
 8007bc4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007bc8:	408e      	lslgt	r6, r1
 8007bca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007bce:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007bd2:	bfd6      	itet	le
 8007bd4:	f1c1 0120 	rsble	r1, r1, #32
 8007bd8:	4331      	orrgt	r1, r6
 8007bda:	fa04 f101 	lslle.w	r1, r4, r1
 8007bde:	ee07 1a90 	vmov	s15, r1
 8007be2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007be6:	3b01      	subs	r3, #1
 8007be8:	ee17 1a90 	vmov	r1, s15
 8007bec:	2501      	movs	r5, #1
 8007bee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007bf2:	e7a8      	b.n	8007b46 <_dtoa_r+0xf6>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	1e53      	subs	r3, r2, #1
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	bf45      	ittet	mi
 8007bfe:	f1c2 0301 	rsbmi	r3, r2, #1
 8007c02:	9305      	strmi	r3, [sp, #20]
 8007c04:	2300      	movpl	r3, #0
 8007c06:	2300      	movmi	r3, #0
 8007c08:	bf4c      	ite	mi
 8007c0a:	9306      	strmi	r3, [sp, #24]
 8007c0c:	9305      	strpl	r3, [sp, #20]
 8007c0e:	f1b8 0f00 	cmp.w	r8, #0
 8007c12:	910c      	str	r1, [sp, #48]	@ 0x30
 8007c14:	db18      	blt.n	8007c48 <_dtoa_r+0x1f8>
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007c1c:	4443      	add	r3, r8
 8007c1e:	9306      	str	r3, [sp, #24]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9a07      	ldr	r2, [sp, #28]
 8007c24:	2a09      	cmp	r2, #9
 8007c26:	d849      	bhi.n	8007cbc <_dtoa_r+0x26c>
 8007c28:	2a05      	cmp	r2, #5
 8007c2a:	bfc4      	itt	gt
 8007c2c:	3a04      	subgt	r2, #4
 8007c2e:	9207      	strgt	r2, [sp, #28]
 8007c30:	9a07      	ldr	r2, [sp, #28]
 8007c32:	f1a2 0202 	sub.w	r2, r2, #2
 8007c36:	bfcc      	ite	gt
 8007c38:	2400      	movgt	r4, #0
 8007c3a:	2401      	movle	r4, #1
 8007c3c:	2a03      	cmp	r2, #3
 8007c3e:	d848      	bhi.n	8007cd2 <_dtoa_r+0x282>
 8007c40:	e8df f002 	tbb	[pc, r2]
 8007c44:	3a2c2e0b 	.word	0x3a2c2e0b
 8007c48:	9b05      	ldr	r3, [sp, #20]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	eba3 0308 	sub.w	r3, r3, r8
 8007c50:	9305      	str	r3, [sp, #20]
 8007c52:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c54:	f1c8 0300 	rsb	r3, r8, #0
 8007c58:	e7e3      	b.n	8007c22 <_dtoa_r+0x1d2>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	9208      	str	r2, [sp, #32]
 8007c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	dc39      	bgt.n	8007cd8 <_dtoa_r+0x288>
 8007c64:	f04f 0b01 	mov.w	fp, #1
 8007c68:	46da      	mov	sl, fp
 8007c6a:	465a      	mov	r2, fp
 8007c6c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007c70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007c74:	2100      	movs	r1, #0
 8007c76:	2004      	movs	r0, #4
 8007c78:	f100 0614 	add.w	r6, r0, #20
 8007c7c:	4296      	cmp	r6, r2
 8007c7e:	d930      	bls.n	8007ce2 <_dtoa_r+0x292>
 8007c80:	6079      	str	r1, [r7, #4]
 8007c82:	4648      	mov	r0, r9
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f000 fd39 	bl	80086fc <_Balloc>
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d146      	bne.n	8007d20 <_dtoa_r+0x2d0>
 8007c92:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <_dtoa_r+0x2cc>)
 8007c94:	4602      	mov	r2, r0
 8007c96:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c9a:	e6f2      	b.n	8007a82 <_dtoa_r+0x32>
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	e7dd      	b.n	8007c5c <_dtoa_r+0x20c>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9208      	str	r2, [sp, #32]
 8007ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca6:	eb08 0b02 	add.w	fp, r8, r2
 8007caa:	f10b 0a01 	add.w	sl, fp, #1
 8007cae:	4652      	mov	r2, sl
 8007cb0:	2a01      	cmp	r2, #1
 8007cb2:	bfb8      	it	lt
 8007cb4:	2201      	movlt	r2, #1
 8007cb6:	e7db      	b.n	8007c70 <_dtoa_r+0x220>
 8007cb8:	2201      	movs	r2, #1
 8007cba:	e7f2      	b.n	8007ca2 <_dtoa_r+0x252>
 8007cbc:	2401      	movs	r4, #1
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007cc4:	f04f 3bff 	mov.w	fp, #4294967295
 8007cc8:	2100      	movs	r1, #0
 8007cca:	46da      	mov	sl, fp
 8007ccc:	2212      	movs	r2, #18
 8007cce:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cd0:	e7ce      	b.n	8007c70 <_dtoa_r+0x220>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	9208      	str	r2, [sp, #32]
 8007cd6:	e7f5      	b.n	8007cc4 <_dtoa_r+0x274>
 8007cd8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007cdc:	46da      	mov	sl, fp
 8007cde:	465a      	mov	r2, fp
 8007ce0:	e7c6      	b.n	8007c70 <_dtoa_r+0x220>
 8007ce2:	3101      	adds	r1, #1
 8007ce4:	0040      	lsls	r0, r0, #1
 8007ce6:	e7c7      	b.n	8007c78 <_dtoa_r+0x228>
 8007ce8:	636f4361 	.word	0x636f4361
 8007cec:	3fd287a7 	.word	0x3fd287a7
 8007cf0:	8b60c8b3 	.word	0x8b60c8b3
 8007cf4:	3fc68a28 	.word	0x3fc68a28
 8007cf8:	509f79fb 	.word	0x509f79fb
 8007cfc:	3fd34413 	.word	0x3fd34413
 8007d00:	08009b0d 	.word	0x08009b0d
 8007d04:	08009b24 	.word	0x08009b24
 8007d08:	7ff00000 	.word	0x7ff00000
 8007d0c:	08009b09 	.word	0x08009b09
 8007d10:	08009add 	.word	0x08009add
 8007d14:	08009adc 	.word	0x08009adc
 8007d18:	08009c20 	.word	0x08009c20
 8007d1c:	08009b7c 	.word	0x08009b7c
 8007d20:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007d24:	f1ba 0f0e 	cmp.w	sl, #14
 8007d28:	6010      	str	r0, [r2, #0]
 8007d2a:	d86f      	bhi.n	8007e0c <_dtoa_r+0x3bc>
 8007d2c:	2c00      	cmp	r4, #0
 8007d2e:	d06d      	beq.n	8007e0c <_dtoa_r+0x3bc>
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	f340 80c2 	ble.w	8007ebc <_dtoa_r+0x46c>
 8007d38:	4aca      	ldr	r2, [pc, #808]	@ (8008064 <_dtoa_r+0x614>)
 8007d3a:	f008 010f 	and.w	r1, r8, #15
 8007d3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007d42:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007d46:	ed92 7b00 	vldr	d7, [r2]
 8007d4a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007d4e:	f000 80a9 	beq.w	8007ea4 <_dtoa_r+0x454>
 8007d52:	4ac5      	ldr	r2, [pc, #788]	@ (8008068 <_dtoa_r+0x618>)
 8007d54:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007d5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d60:	f001 010f 	and.w	r1, r1, #15
 8007d64:	2203      	movs	r2, #3
 8007d66:	48c0      	ldr	r0, [pc, #768]	@ (8008068 <_dtoa_r+0x618>)
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	f040 809d 	bne.w	8007ea8 <_dtoa_r+0x458>
 8007d6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	f000 80c1 	beq.w	8007f08 <_dtoa_r+0x4b8>
 8007d86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007d8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d92:	f140 80b9 	bpl.w	8007f08 <_dtoa_r+0x4b8>
 8007d96:	f1ba 0f00 	cmp.w	sl, #0
 8007d9a:	f000 80b5 	beq.w	8007f08 <_dtoa_r+0x4b8>
 8007d9e:	f1bb 0f00 	cmp.w	fp, #0
 8007da2:	dd31      	ble.n	8007e08 <_dtoa_r+0x3b8>
 8007da4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007da8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007db0:	f108 31ff 	add.w	r1, r8, #4294967295
 8007db4:	9104      	str	r1, [sp, #16]
 8007db6:	3201      	adds	r2, #1
 8007db8:	465c      	mov	r4, fp
 8007dba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007dbe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007dc2:	ee07 2a90 	vmov	s15, r2
 8007dc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007dca:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007dce:	ee15 2a90 	vmov	r2, s11
 8007dd2:	ec51 0b15 	vmov	r0, r1, d5
 8007dd6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	f040 8098 	bne.w	8007f10 <_dtoa_r+0x4c0>
 8007de0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007de4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007de8:	ec41 0b17 	vmov	d7, r0, r1
 8007dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df4:	f300 8261 	bgt.w	80082ba <_dtoa_r+0x86a>
 8007df8:	eeb1 7b47 	vneg.f64	d7, d7
 8007dfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	f100 80f5 	bmi.w	8007ff2 <_dtoa_r+0x5a2>
 8007e08:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	f2c0 812c 	blt.w	800806c <_dtoa_r+0x61c>
 8007e14:	f1b8 0f0e 	cmp.w	r8, #14
 8007e18:	f300 8128 	bgt.w	800806c <_dtoa_r+0x61c>
 8007e1c:	4b91      	ldr	r3, [pc, #580]	@ (8008064 <_dtoa_r+0x614>)
 8007e1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e22:	ed93 6b00 	vldr	d6, [r3]
 8007e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da03      	bge.n	8007e34 <_dtoa_r+0x3e4>
 8007e2c:	f1ba 0f00 	cmp.w	sl, #0
 8007e30:	f340 80d2 	ble.w	8007fd8 <_dtoa_r+0x588>
 8007e34:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007e38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e3c:	463e      	mov	r6, r7
 8007e3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e46:	ee15 3a10 	vmov	r3, s10
 8007e4a:	3330      	adds	r3, #48	@ 0x30
 8007e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e50:	1bf3      	subs	r3, r6, r7
 8007e52:	459a      	cmp	sl, r3
 8007e54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e5c:	f040 80f8 	bne.w	8008050 <_dtoa_r+0x600>
 8007e60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6c:	f300 80dd 	bgt.w	800802a <_dtoa_r+0x5da>
 8007e70:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e78:	d104      	bne.n	8007e84 <_dtoa_r+0x434>
 8007e7a:	ee15 3a10 	vmov	r3, s10
 8007e7e:	07db      	lsls	r3, r3, #31
 8007e80:	f100 80d3 	bmi.w	800802a <_dtoa_r+0x5da>
 8007e84:	9901      	ldr	r1, [sp, #4]
 8007e86:	4648      	mov	r0, r9
 8007e88:	f000 fc78 	bl	800877c <_Bfree>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e90:	7033      	strb	r3, [r6, #0]
 8007e92:	f108 0301 	add.w	r3, r8, #1
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8304 	beq.w	80084a8 <_dtoa_r+0xa58>
 8007ea0:	601e      	str	r6, [r3, #0]
 8007ea2:	e301      	b.n	80084a8 <_dtoa_r+0xa58>
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	e75e      	b.n	8007d66 <_dtoa_r+0x316>
 8007ea8:	07cc      	lsls	r4, r1, #31
 8007eaa:	d504      	bpl.n	8007eb6 <_dtoa_r+0x466>
 8007eac:	ed90 6b00 	vldr	d6, [r0]
 8007eb0:	3201      	adds	r2, #1
 8007eb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eb6:	1049      	asrs	r1, r1, #1
 8007eb8:	3008      	adds	r0, #8
 8007eba:	e755      	b.n	8007d68 <_dtoa_r+0x318>
 8007ebc:	d022      	beq.n	8007f04 <_dtoa_r+0x4b4>
 8007ebe:	f1c8 0100 	rsb	r1, r8, #0
 8007ec2:	4a68      	ldr	r2, [pc, #416]	@ (8008064 <_dtoa_r+0x614>)
 8007ec4:	f001 000f 	and.w	r0, r1, #15
 8007ec8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ecc:	ed92 7b00 	vldr	d7, [r2]
 8007ed0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ed8:	4863      	ldr	r0, [pc, #396]	@ (8008068 <_dtoa_r+0x618>)
 8007eda:	1109      	asrs	r1, r1, #4
 8007edc:	2400      	movs	r4, #0
 8007ede:	2202      	movs	r2, #2
 8007ee0:	b929      	cbnz	r1, 8007eee <_dtoa_r+0x49e>
 8007ee2:	2c00      	cmp	r4, #0
 8007ee4:	f43f af49 	beq.w	8007d7a <_dtoa_r+0x32a>
 8007ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007eec:	e745      	b.n	8007d7a <_dtoa_r+0x32a>
 8007eee:	07ce      	lsls	r6, r1, #31
 8007ef0:	d505      	bpl.n	8007efe <_dtoa_r+0x4ae>
 8007ef2:	ed90 6b00 	vldr	d6, [r0]
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	2401      	movs	r4, #1
 8007efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007efe:	1049      	asrs	r1, r1, #1
 8007f00:	3008      	adds	r0, #8
 8007f02:	e7ed      	b.n	8007ee0 <_dtoa_r+0x490>
 8007f04:	2202      	movs	r2, #2
 8007f06:	e738      	b.n	8007d7a <_dtoa_r+0x32a>
 8007f08:	f8cd 8010 	str.w	r8, [sp, #16]
 8007f0c:	4654      	mov	r4, sl
 8007f0e:	e754      	b.n	8007dba <_dtoa_r+0x36a>
 8007f10:	4a54      	ldr	r2, [pc, #336]	@ (8008064 <_dtoa_r+0x614>)
 8007f12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007f16:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007f1a:	9a08      	ldr	r2, [sp, #32]
 8007f1c:	ec41 0b17 	vmov	d7, r0, r1
 8007f20:	443c      	add	r4, r7
 8007f22:	b34a      	cbz	r2, 8007f78 <_dtoa_r+0x528>
 8007f24:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007f28:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007f2c:	463e      	mov	r6, r7
 8007f2e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007f32:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f36:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f3a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f3e:	ee14 2a90 	vmov	r2, s9
 8007f42:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f46:	3230      	adds	r2, #48	@ 0x30
 8007f48:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f54:	f806 2b01 	strb.w	r2, [r6], #1
 8007f58:	d438      	bmi.n	8007fcc <_dtoa_r+0x57c>
 8007f5a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007f5e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f66:	d462      	bmi.n	800802e <_dtoa_r+0x5de>
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	f43f af4d 	beq.w	8007e08 <_dtoa_r+0x3b8>
 8007f6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007f72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f76:	e7e0      	b.n	8007f3a <_dtoa_r+0x4ea>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	463e      	mov	r6, r7
 8007f7c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f80:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f88:	ee14 2a90 	vmov	r2, s9
 8007f8c:	3230      	adds	r2, #48	@ 0x30
 8007f8e:	f806 2b01 	strb.w	r2, [r6], #1
 8007f92:	42a6      	cmp	r6, r4
 8007f94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f9c:	d119      	bne.n	8007fd2 <_dtoa_r+0x582>
 8007f9e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007fa2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007fa6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	dc3e      	bgt.n	800802e <_dtoa_r+0x5de>
 8007fb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007fb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fbc:	f57f af24 	bpl.w	8007e08 <_dtoa_r+0x3b8>
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	3901      	subs	r1, #1
 8007fc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fc8:	2b30      	cmp	r3, #48	@ 0x30
 8007fca:	d0f9      	beq.n	8007fc0 <_dtoa_r+0x570>
 8007fcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007fd0:	e758      	b.n	8007e84 <_dtoa_r+0x434>
 8007fd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007fd6:	e7d5      	b.n	8007f84 <_dtoa_r+0x534>
 8007fd8:	d10b      	bne.n	8007ff2 <_dtoa_r+0x5a2>
 8007fda:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007fde:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fe6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	f2c0 8161 	blt.w	80082b4 <_dtoa_r+0x864>
 8007ff2:	2400      	movs	r4, #0
 8007ff4:	4625      	mov	r5, r4
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	463e      	mov	r6, r7
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	4621      	mov	r1, r4
 8008004:	4648      	mov	r0, r9
 8008006:	f000 fbb9 	bl	800877c <_Bfree>
 800800a:	2d00      	cmp	r5, #0
 800800c:	d0de      	beq.n	8007fcc <_dtoa_r+0x57c>
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	d005      	beq.n	8008020 <_dtoa_r+0x5d0>
 8008014:	45a8      	cmp	r8, r5
 8008016:	d003      	beq.n	8008020 <_dtoa_r+0x5d0>
 8008018:	4641      	mov	r1, r8
 800801a:	4648      	mov	r0, r9
 800801c:	f000 fbae 	bl	800877c <_Bfree>
 8008020:	4629      	mov	r1, r5
 8008022:	4648      	mov	r0, r9
 8008024:	f000 fbaa 	bl	800877c <_Bfree>
 8008028:	e7d0      	b.n	8007fcc <_dtoa_r+0x57c>
 800802a:	f8cd 8010 	str.w	r8, [sp, #16]
 800802e:	4633      	mov	r3, r6
 8008030:	461e      	mov	r6, r3
 8008032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008036:	2a39      	cmp	r2, #57	@ 0x39
 8008038:	d106      	bne.n	8008048 <_dtoa_r+0x5f8>
 800803a:	429f      	cmp	r7, r3
 800803c:	d1f8      	bne.n	8008030 <_dtoa_r+0x5e0>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	3201      	adds	r2, #1
 8008042:	9204      	str	r2, [sp, #16]
 8008044:	2230      	movs	r2, #48	@ 0x30
 8008046:	703a      	strb	r2, [r7, #0]
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	3201      	adds	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e7bd      	b.n	8007fcc <_dtoa_r+0x57c>
 8008050:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008054:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805c:	f47f aeef 	bne.w	8007e3e <_dtoa_r+0x3ee>
 8008060:	e710      	b.n	8007e84 <_dtoa_r+0x434>
 8008062:	bf00      	nop
 8008064:	08009c20 	.word	0x08009c20
 8008068:	08009bf8 	.word	0x08009bf8
 800806c:	9908      	ldr	r1, [sp, #32]
 800806e:	2900      	cmp	r1, #0
 8008070:	f000 80e3 	beq.w	800823a <_dtoa_r+0x7ea>
 8008074:	9907      	ldr	r1, [sp, #28]
 8008076:	2901      	cmp	r1, #1
 8008078:	f300 80c8 	bgt.w	800820c <_dtoa_r+0x7bc>
 800807c:	2d00      	cmp	r5, #0
 800807e:	f000 80c1 	beq.w	8008204 <_dtoa_r+0x7b4>
 8008082:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008086:	9e05      	ldr	r6, [sp, #20]
 8008088:	461c      	mov	r4, r3
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	9b05      	ldr	r3, [sp, #20]
 800808e:	4413      	add	r3, r2
 8008090:	9305      	str	r3, [sp, #20]
 8008092:	9b06      	ldr	r3, [sp, #24]
 8008094:	2101      	movs	r1, #1
 8008096:	4413      	add	r3, r2
 8008098:	4648      	mov	r0, r9
 800809a:	9306      	str	r3, [sp, #24]
 800809c:	f000 fc22 	bl	80088e4 <__i2b>
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	4605      	mov	r5, r0
 80080a4:	b166      	cbz	r6, 80080c0 <_dtoa_r+0x670>
 80080a6:	9a06      	ldr	r2, [sp, #24]
 80080a8:	2a00      	cmp	r2, #0
 80080aa:	dd09      	ble.n	80080c0 <_dtoa_r+0x670>
 80080ac:	42b2      	cmp	r2, r6
 80080ae:	9905      	ldr	r1, [sp, #20]
 80080b0:	bfa8      	it	ge
 80080b2:	4632      	movge	r2, r6
 80080b4:	1a89      	subs	r1, r1, r2
 80080b6:	9105      	str	r1, [sp, #20]
 80080b8:	9906      	ldr	r1, [sp, #24]
 80080ba:	1ab6      	subs	r6, r6, r2
 80080bc:	1a8a      	subs	r2, r1, r2
 80080be:	9206      	str	r2, [sp, #24]
 80080c0:	b1fb      	cbz	r3, 8008102 <_dtoa_r+0x6b2>
 80080c2:	9a08      	ldr	r2, [sp, #32]
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	f000 80bc 	beq.w	8008242 <_dtoa_r+0x7f2>
 80080ca:	b19c      	cbz	r4, 80080f4 <_dtoa_r+0x6a4>
 80080cc:	4629      	mov	r1, r5
 80080ce:	4622      	mov	r2, r4
 80080d0:	4648      	mov	r0, r9
 80080d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d4:	f000 fcc6 	bl	8008a64 <__pow5mult>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	4601      	mov	r1, r0
 80080dc:	4605      	mov	r5, r0
 80080de:	4648      	mov	r0, r9
 80080e0:	f000 fc16 	bl	8008910 <__multiply>
 80080e4:	9901      	ldr	r1, [sp, #4]
 80080e6:	9004      	str	r0, [sp, #16]
 80080e8:	4648      	mov	r0, r9
 80080ea:	f000 fb47 	bl	800877c <_Bfree>
 80080ee:	9a04      	ldr	r2, [sp, #16]
 80080f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080f2:	9201      	str	r2, [sp, #4]
 80080f4:	1b1a      	subs	r2, r3, r4
 80080f6:	d004      	beq.n	8008102 <_dtoa_r+0x6b2>
 80080f8:	9901      	ldr	r1, [sp, #4]
 80080fa:	4648      	mov	r0, r9
 80080fc:	f000 fcb2 	bl	8008a64 <__pow5mult>
 8008100:	9001      	str	r0, [sp, #4]
 8008102:	2101      	movs	r1, #1
 8008104:	4648      	mov	r0, r9
 8008106:	f000 fbed 	bl	80088e4 <__i2b>
 800810a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810c:	4604      	mov	r4, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 81d0 	beq.w	80084b4 <_dtoa_r+0xa64>
 8008114:	461a      	mov	r2, r3
 8008116:	4601      	mov	r1, r0
 8008118:	4648      	mov	r0, r9
 800811a:	f000 fca3 	bl	8008a64 <__pow5mult>
 800811e:	9b07      	ldr	r3, [sp, #28]
 8008120:	2b01      	cmp	r3, #1
 8008122:	4604      	mov	r4, r0
 8008124:	f300 8095 	bgt.w	8008252 <_dtoa_r+0x802>
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 808b 	bne.w	8008246 <_dtoa_r+0x7f6>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008136:	2a00      	cmp	r2, #0
 8008138:	f040 8087 	bne.w	800824a <_dtoa_r+0x7fa>
 800813c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008140:	0d12      	lsrs	r2, r2, #20
 8008142:	0512      	lsls	r2, r2, #20
 8008144:	2a00      	cmp	r2, #0
 8008146:	f000 8082 	beq.w	800824e <_dtoa_r+0x7fe>
 800814a:	9b05      	ldr	r3, [sp, #20]
 800814c:	3301      	adds	r3, #1
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	9b06      	ldr	r3, [sp, #24]
 8008152:	3301      	adds	r3, #1
 8008154:	9306      	str	r3, [sp, #24]
 8008156:	2301      	movs	r3, #1
 8008158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800815a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 81af 	beq.w	80084c0 <_dtoa_r+0xa70>
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008168:	6910      	ldr	r0, [r2, #16]
 800816a:	f000 fb6f 	bl	800884c <__hi0bits>
 800816e:	f1c0 0020 	rsb	r0, r0, #32
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	4418      	add	r0, r3
 8008176:	f010 001f 	ands.w	r0, r0, #31
 800817a:	d076      	beq.n	800826a <_dtoa_r+0x81a>
 800817c:	f1c0 0220 	rsb	r2, r0, #32
 8008180:	2a04      	cmp	r2, #4
 8008182:	dd69      	ble.n	8008258 <_dtoa_r+0x808>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	f1c0 001c 	rsb	r0, r0, #28
 800818a:	4403      	add	r3, r0
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	4406      	add	r6, r0
 8008192:	4403      	add	r3, r0
 8008194:	9306      	str	r3, [sp, #24]
 8008196:	9b05      	ldr	r3, [sp, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dd05      	ble.n	80081a8 <_dtoa_r+0x758>
 800819c:	9901      	ldr	r1, [sp, #4]
 800819e:	461a      	mov	r2, r3
 80081a0:	4648      	mov	r0, r9
 80081a2:	f000 fcb9 	bl	8008b18 <__lshift>
 80081a6:	9001      	str	r0, [sp, #4]
 80081a8:	9b06      	ldr	r3, [sp, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd05      	ble.n	80081ba <_dtoa_r+0x76a>
 80081ae:	4621      	mov	r1, r4
 80081b0:	461a      	mov	r2, r3
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fcb0 	bl	8008b18 <__lshift>
 80081b8:	4604      	mov	r4, r0
 80081ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d056      	beq.n	800826e <_dtoa_r+0x81e>
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	4621      	mov	r1, r4
 80081c4:	f000 fd14 	bl	8008bf0 <__mcmp>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	da50      	bge.n	800826e <_dtoa_r+0x81e>
 80081cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	9901      	ldr	r1, [sp, #4]
 80081d4:	2300      	movs	r3, #0
 80081d6:	220a      	movs	r2, #10
 80081d8:	4648      	mov	r0, r9
 80081da:	f000 faf1 	bl	80087c0 <__multadd>
 80081de:	9b08      	ldr	r3, [sp, #32]
 80081e0:	9001      	str	r0, [sp, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 816e 	beq.w	80084c4 <_dtoa_r+0xa74>
 80081e8:	4629      	mov	r1, r5
 80081ea:	2300      	movs	r3, #0
 80081ec:	220a      	movs	r2, #10
 80081ee:	4648      	mov	r0, r9
 80081f0:	f000 fae6 	bl	80087c0 <__multadd>
 80081f4:	f1bb 0f00 	cmp.w	fp, #0
 80081f8:	4605      	mov	r5, r0
 80081fa:	dc64      	bgt.n	80082c6 <_dtoa_r+0x876>
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	dc3e      	bgt.n	8008280 <_dtoa_r+0x830>
 8008202:	e060      	b.n	80082c6 <_dtoa_r+0x876>
 8008204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008206:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800820a:	e73c      	b.n	8008086 <_dtoa_r+0x636>
 800820c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008210:	42a3      	cmp	r3, r4
 8008212:	bfbf      	itttt	lt
 8008214:	1ae2      	sublt	r2, r4, r3
 8008216:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008218:	189b      	addlt	r3, r3, r2
 800821a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800821c:	bfae      	itee	ge
 800821e:	1b1c      	subge	r4, r3, r4
 8008220:	4623      	movlt	r3, r4
 8008222:	2400      	movlt	r4, #0
 8008224:	f1ba 0f00 	cmp.w	sl, #0
 8008228:	bfb5      	itete	lt
 800822a:	9a05      	ldrlt	r2, [sp, #20]
 800822c:	9e05      	ldrge	r6, [sp, #20]
 800822e:	eba2 060a 	sublt.w	r6, r2, sl
 8008232:	4652      	movge	r2, sl
 8008234:	bfb8      	it	lt
 8008236:	2200      	movlt	r2, #0
 8008238:	e727      	b.n	800808a <_dtoa_r+0x63a>
 800823a:	9e05      	ldr	r6, [sp, #20]
 800823c:	9d08      	ldr	r5, [sp, #32]
 800823e:	461c      	mov	r4, r3
 8008240:	e730      	b.n	80080a4 <_dtoa_r+0x654>
 8008242:	461a      	mov	r2, r3
 8008244:	e758      	b.n	80080f8 <_dtoa_r+0x6a8>
 8008246:	2300      	movs	r3, #0
 8008248:	e786      	b.n	8008158 <_dtoa_r+0x708>
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	e784      	b.n	8008158 <_dtoa_r+0x708>
 800824e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008250:	e783      	b.n	800815a <_dtoa_r+0x70a>
 8008252:	2300      	movs	r3, #0
 8008254:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008256:	e784      	b.n	8008162 <_dtoa_r+0x712>
 8008258:	d09d      	beq.n	8008196 <_dtoa_r+0x746>
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	321c      	adds	r2, #28
 800825e:	4413      	add	r3, r2
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	9b06      	ldr	r3, [sp, #24]
 8008264:	4416      	add	r6, r2
 8008266:	4413      	add	r3, r2
 8008268:	e794      	b.n	8008194 <_dtoa_r+0x744>
 800826a:	4602      	mov	r2, r0
 800826c:	e7f5      	b.n	800825a <_dtoa_r+0x80a>
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	f8cd 8010 	str.w	r8, [sp, #16]
 8008276:	46d3      	mov	fp, sl
 8008278:	dc21      	bgt.n	80082be <_dtoa_r+0x86e>
 800827a:	9b07      	ldr	r3, [sp, #28]
 800827c:	2b02      	cmp	r3, #2
 800827e:	dd1e      	ble.n	80082be <_dtoa_r+0x86e>
 8008280:	f1bb 0f00 	cmp.w	fp, #0
 8008284:	f47f aeb7 	bne.w	8007ff6 <_dtoa_r+0x5a6>
 8008288:	4621      	mov	r1, r4
 800828a:	465b      	mov	r3, fp
 800828c:	2205      	movs	r2, #5
 800828e:	4648      	mov	r0, r9
 8008290:	f000 fa96 	bl	80087c0 <__multadd>
 8008294:	4601      	mov	r1, r0
 8008296:	4604      	mov	r4, r0
 8008298:	9801      	ldr	r0, [sp, #4]
 800829a:	f000 fca9 	bl	8008bf0 <__mcmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f77f aea9 	ble.w	8007ff6 <_dtoa_r+0x5a6>
 80082a4:	463e      	mov	r6, r7
 80082a6:	2331      	movs	r3, #49	@ 0x31
 80082a8:	f806 3b01 	strb.w	r3, [r6], #1
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	3301      	adds	r3, #1
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	e6a4      	b.n	8007ffe <_dtoa_r+0x5ae>
 80082b4:	f8cd 8010 	str.w	r8, [sp, #16]
 80082b8:	4654      	mov	r4, sl
 80082ba:	4625      	mov	r5, r4
 80082bc:	e7f2      	b.n	80082a4 <_dtoa_r+0x854>
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8103 	beq.w	80084cc <_dtoa_r+0xa7c>
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	dd05      	ble.n	80082d6 <_dtoa_r+0x886>
 80082ca:	4629      	mov	r1, r5
 80082cc:	4632      	mov	r2, r6
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 fc22 	bl	8008b18 <__lshift>
 80082d4:	4605      	mov	r5, r0
 80082d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d058      	beq.n	800838e <_dtoa_r+0x93e>
 80082dc:	6869      	ldr	r1, [r5, #4]
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 fa0c 	bl	80086fc <_Balloc>
 80082e4:	4606      	mov	r6, r0
 80082e6:	b928      	cbnz	r0, 80082f4 <_dtoa_r+0x8a4>
 80082e8:	4b82      	ldr	r3, [pc, #520]	@ (80084f4 <_dtoa_r+0xaa4>)
 80082ea:	4602      	mov	r2, r0
 80082ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082f0:	f7ff bbc7 	b.w	8007a82 <_dtoa_r+0x32>
 80082f4:	692a      	ldr	r2, [r5, #16]
 80082f6:	3202      	adds	r2, #2
 80082f8:	0092      	lsls	r2, r2, #2
 80082fa:	f105 010c 	add.w	r1, r5, #12
 80082fe:	300c      	adds	r0, #12
 8008300:	f001 f810 	bl	8009324 <memcpy>
 8008304:	2201      	movs	r2, #1
 8008306:	4631      	mov	r1, r6
 8008308:	4648      	mov	r0, r9
 800830a:	f000 fc05 	bl	8008b18 <__lshift>
 800830e:	1c7b      	adds	r3, r7, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	eb07 030b 	add.w	r3, r7, fp
 8008316:	9309      	str	r3, [sp, #36]	@ 0x24
 8008318:	9b02      	ldr	r3, [sp, #8]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	46a8      	mov	r8, r5
 8008320:	9308      	str	r3, [sp, #32]
 8008322:	4605      	mov	r5, r0
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	9801      	ldr	r0, [sp, #4]
 8008328:	4621      	mov	r1, r4
 800832a:	f103 3bff 	add.w	fp, r3, #4294967295
 800832e:	f7ff fb06 	bl	800793e <quorem>
 8008332:	4641      	mov	r1, r8
 8008334:	9002      	str	r0, [sp, #8]
 8008336:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800833a:	9801      	ldr	r0, [sp, #4]
 800833c:	f000 fc58 	bl	8008bf0 <__mcmp>
 8008340:	462a      	mov	r2, r5
 8008342:	9006      	str	r0, [sp, #24]
 8008344:	4621      	mov	r1, r4
 8008346:	4648      	mov	r0, r9
 8008348:	f000 fc6e 	bl	8008c28 <__mdiff>
 800834c:	68c2      	ldr	r2, [r0, #12]
 800834e:	4606      	mov	r6, r0
 8008350:	b9fa      	cbnz	r2, 8008392 <_dtoa_r+0x942>
 8008352:	4601      	mov	r1, r0
 8008354:	9801      	ldr	r0, [sp, #4]
 8008356:	f000 fc4b 	bl	8008bf0 <__mcmp>
 800835a:	4602      	mov	r2, r0
 800835c:	4631      	mov	r1, r6
 800835e:	4648      	mov	r0, r9
 8008360:	920a      	str	r2, [sp, #40]	@ 0x28
 8008362:	f000 fa0b 	bl	800877c <_Bfree>
 8008366:	9b07      	ldr	r3, [sp, #28]
 8008368:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800836a:	9e05      	ldr	r6, [sp, #20]
 800836c:	ea43 0102 	orr.w	r1, r3, r2
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	4319      	orrs	r1, r3
 8008374:	d10f      	bne.n	8008396 <_dtoa_r+0x946>
 8008376:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800837a:	d028      	beq.n	80083ce <_dtoa_r+0x97e>
 800837c:	9b06      	ldr	r3, [sp, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd02      	ble.n	8008388 <_dtoa_r+0x938>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008388:	f88b a000 	strb.w	sl, [fp]
 800838c:	e639      	b.n	8008002 <_dtoa_r+0x5b2>
 800838e:	4628      	mov	r0, r5
 8008390:	e7bd      	b.n	800830e <_dtoa_r+0x8be>
 8008392:	2201      	movs	r2, #1
 8008394:	e7e2      	b.n	800835c <_dtoa_r+0x90c>
 8008396:	9b06      	ldr	r3, [sp, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	db04      	blt.n	80083a6 <_dtoa_r+0x956>
 800839c:	9907      	ldr	r1, [sp, #28]
 800839e:	430b      	orrs	r3, r1
 80083a0:	9908      	ldr	r1, [sp, #32]
 80083a2:	430b      	orrs	r3, r1
 80083a4:	d120      	bne.n	80083e8 <_dtoa_r+0x998>
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	ddee      	ble.n	8008388 <_dtoa_r+0x938>
 80083aa:	9901      	ldr	r1, [sp, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	4648      	mov	r0, r9
 80083b0:	f000 fbb2 	bl	8008b18 <__lshift>
 80083b4:	4621      	mov	r1, r4
 80083b6:	9001      	str	r0, [sp, #4]
 80083b8:	f000 fc1a 	bl	8008bf0 <__mcmp>
 80083bc:	2800      	cmp	r0, #0
 80083be:	dc03      	bgt.n	80083c8 <_dtoa_r+0x978>
 80083c0:	d1e2      	bne.n	8008388 <_dtoa_r+0x938>
 80083c2:	f01a 0f01 	tst.w	sl, #1
 80083c6:	d0df      	beq.n	8008388 <_dtoa_r+0x938>
 80083c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083cc:	d1d9      	bne.n	8008382 <_dtoa_r+0x932>
 80083ce:	2339      	movs	r3, #57	@ 0x39
 80083d0:	f88b 3000 	strb.w	r3, [fp]
 80083d4:	4633      	mov	r3, r6
 80083d6:	461e      	mov	r6, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083de:	2a39      	cmp	r2, #57	@ 0x39
 80083e0:	d053      	beq.n	800848a <_dtoa_r+0xa3a>
 80083e2:	3201      	adds	r2, #1
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e60c      	b.n	8008002 <_dtoa_r+0x5b2>
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	dd07      	ble.n	80083fc <_dtoa_r+0x9ac>
 80083ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083f0:	d0ed      	beq.n	80083ce <_dtoa_r+0x97e>
 80083f2:	f10a 0301 	add.w	r3, sl, #1
 80083f6:	f88b 3000 	strb.w	r3, [fp]
 80083fa:	e602      	b.n	8008002 <_dtoa_r+0x5b2>
 80083fc:	9b05      	ldr	r3, [sp, #20]
 80083fe:	9a05      	ldr	r2, [sp, #20]
 8008400:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008406:	4293      	cmp	r3, r2
 8008408:	d029      	beq.n	800845e <_dtoa_r+0xa0e>
 800840a:	9901      	ldr	r1, [sp, #4]
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4648      	mov	r0, r9
 8008412:	f000 f9d5 	bl	80087c0 <__multadd>
 8008416:	45a8      	cmp	r8, r5
 8008418:	9001      	str	r0, [sp, #4]
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	f04f 020a 	mov.w	r2, #10
 8008422:	4641      	mov	r1, r8
 8008424:	4648      	mov	r0, r9
 8008426:	d107      	bne.n	8008438 <_dtoa_r+0x9e8>
 8008428:	f000 f9ca 	bl	80087c0 <__multadd>
 800842c:	4680      	mov	r8, r0
 800842e:	4605      	mov	r5, r0
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	3301      	adds	r3, #1
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	e775      	b.n	8008324 <_dtoa_r+0x8d4>
 8008438:	f000 f9c2 	bl	80087c0 <__multadd>
 800843c:	4629      	mov	r1, r5
 800843e:	4680      	mov	r8, r0
 8008440:	2300      	movs	r3, #0
 8008442:	220a      	movs	r2, #10
 8008444:	4648      	mov	r0, r9
 8008446:	f000 f9bb 	bl	80087c0 <__multadd>
 800844a:	4605      	mov	r5, r0
 800844c:	e7f0      	b.n	8008430 <_dtoa_r+0x9e0>
 800844e:	f1bb 0f00 	cmp.w	fp, #0
 8008452:	bfcc      	ite	gt
 8008454:	465e      	movgt	r6, fp
 8008456:	2601      	movle	r6, #1
 8008458:	443e      	add	r6, r7
 800845a:	f04f 0800 	mov.w	r8, #0
 800845e:	9901      	ldr	r1, [sp, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	4648      	mov	r0, r9
 8008464:	f000 fb58 	bl	8008b18 <__lshift>
 8008468:	4621      	mov	r1, r4
 800846a:	9001      	str	r0, [sp, #4]
 800846c:	f000 fbc0 	bl	8008bf0 <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	dcaf      	bgt.n	80083d4 <_dtoa_r+0x984>
 8008474:	d102      	bne.n	800847c <_dtoa_r+0xa2c>
 8008476:	f01a 0f01 	tst.w	sl, #1
 800847a:	d1ab      	bne.n	80083d4 <_dtoa_r+0x984>
 800847c:	4633      	mov	r3, r6
 800847e:	461e      	mov	r6, r3
 8008480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008484:	2a30      	cmp	r2, #48	@ 0x30
 8008486:	d0fa      	beq.n	800847e <_dtoa_r+0xa2e>
 8008488:	e5bb      	b.n	8008002 <_dtoa_r+0x5b2>
 800848a:	429f      	cmp	r7, r3
 800848c:	d1a3      	bne.n	80083d6 <_dtoa_r+0x986>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	3301      	adds	r3, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	2331      	movs	r3, #49	@ 0x31
 8008496:	703b      	strb	r3, [r7, #0]
 8008498:	e5b3      	b.n	8008002 <_dtoa_r+0x5b2>
 800849a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800849c:	4f16      	ldr	r7, [pc, #88]	@ (80084f8 <_dtoa_r+0xaa8>)
 800849e:	b11b      	cbz	r3, 80084a8 <_dtoa_r+0xa58>
 80084a0:	f107 0308 	add.w	r3, r7, #8
 80084a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	4638      	mov	r0, r7
 80084aa:	b011      	add	sp, #68	@ 0x44
 80084ac:	ecbd 8b02 	vpop	{d8}
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	9b07      	ldr	r3, [sp, #28]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	f77f ae36 	ble.w	8008128 <_dtoa_r+0x6d8>
 80084bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084c0:	2001      	movs	r0, #1
 80084c2:	e656      	b.n	8008172 <_dtoa_r+0x722>
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	f77f aed7 	ble.w	800827a <_dtoa_r+0x82a>
 80084cc:	463e      	mov	r6, r7
 80084ce:	9801      	ldr	r0, [sp, #4]
 80084d0:	4621      	mov	r1, r4
 80084d2:	f7ff fa34 	bl	800793e <quorem>
 80084d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80084da:	f806 ab01 	strb.w	sl, [r6], #1
 80084de:	1bf2      	subs	r2, r6, r7
 80084e0:	4593      	cmp	fp, r2
 80084e2:	ddb4      	ble.n	800844e <_dtoa_r+0x9fe>
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	2300      	movs	r3, #0
 80084e8:	220a      	movs	r2, #10
 80084ea:	4648      	mov	r0, r9
 80084ec:	f000 f968 	bl	80087c0 <__multadd>
 80084f0:	9001      	str	r0, [sp, #4]
 80084f2:	e7ec      	b.n	80084ce <_dtoa_r+0xa7e>
 80084f4:	08009b7c 	.word	0x08009b7c
 80084f8:	08009b00 	.word	0x08009b00

080084fc <_free_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4605      	mov	r5, r0
 8008500:	2900      	cmp	r1, #0
 8008502:	d041      	beq.n	8008588 <_free_r+0x8c>
 8008504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008508:	1f0c      	subs	r4, r1, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	bfb8      	it	lt
 800850e:	18e4      	addlt	r4, r4, r3
 8008510:	f000 f8e8 	bl	80086e4 <__malloc_lock>
 8008514:	4a1d      	ldr	r2, [pc, #116]	@ (800858c <_free_r+0x90>)
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	b933      	cbnz	r3, 8008528 <_free_r+0x2c>
 800851a:	6063      	str	r3, [r4, #4]
 800851c:	6014      	str	r4, [r2, #0]
 800851e:	4628      	mov	r0, r5
 8008520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008524:	f000 b8e4 	b.w	80086f0 <__malloc_unlock>
 8008528:	42a3      	cmp	r3, r4
 800852a:	d908      	bls.n	800853e <_free_r+0x42>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	1821      	adds	r1, r4, r0
 8008530:	428b      	cmp	r3, r1
 8008532:	bf01      	itttt	eq
 8008534:	6819      	ldreq	r1, [r3, #0]
 8008536:	685b      	ldreq	r3, [r3, #4]
 8008538:	1809      	addeq	r1, r1, r0
 800853a:	6021      	streq	r1, [r4, #0]
 800853c:	e7ed      	b.n	800851a <_free_r+0x1e>
 800853e:	461a      	mov	r2, r3
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b10b      	cbz	r3, 8008548 <_free_r+0x4c>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d9fa      	bls.n	800853e <_free_r+0x42>
 8008548:	6811      	ldr	r1, [r2, #0]
 800854a:	1850      	adds	r0, r2, r1
 800854c:	42a0      	cmp	r0, r4
 800854e:	d10b      	bne.n	8008568 <_free_r+0x6c>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	4401      	add	r1, r0
 8008554:	1850      	adds	r0, r2, r1
 8008556:	4283      	cmp	r3, r0
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	d1e0      	bne.n	800851e <_free_r+0x22>
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	6053      	str	r3, [r2, #4]
 8008562:	4408      	add	r0, r1
 8008564:	6010      	str	r0, [r2, #0]
 8008566:	e7da      	b.n	800851e <_free_r+0x22>
 8008568:	d902      	bls.n	8008570 <_free_r+0x74>
 800856a:	230c      	movs	r3, #12
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	e7d6      	b.n	800851e <_free_r+0x22>
 8008570:	6820      	ldr	r0, [r4, #0]
 8008572:	1821      	adds	r1, r4, r0
 8008574:	428b      	cmp	r3, r1
 8008576:	bf04      	itt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	bf04      	itt	eq
 8008580:	1809      	addeq	r1, r1, r0
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	6054      	str	r4, [r2, #4]
 8008586:	e7ca      	b.n	800851e <_free_r+0x22>
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	2400047c 	.word	0x2400047c

08008590 <malloc>:
 8008590:	4b02      	ldr	r3, [pc, #8]	@ (800859c <malloc+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f000 b825 	b.w	80085e4 <_malloc_r>
 800859a:	bf00      	nop
 800859c:	2400001c 	.word	0x2400001c

080085a0 <sbrk_aligned>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4e0f      	ldr	r6, [pc, #60]	@ (80085e0 <sbrk_aligned+0x40>)
 80085a4:	460c      	mov	r4, r1
 80085a6:	6831      	ldr	r1, [r6, #0]
 80085a8:	4605      	mov	r5, r0
 80085aa:	b911      	cbnz	r1, 80085b2 <sbrk_aligned+0x12>
 80085ac:	f000 feaa 	bl	8009304 <_sbrk_r>
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 fea5 	bl	8009304 <_sbrk_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d103      	bne.n	80085c6 <sbrk_aligned+0x26>
 80085be:	f04f 34ff 	mov.w	r4, #4294967295
 80085c2:	4620      	mov	r0, r4
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
 80085c6:	1cc4      	adds	r4, r0, #3
 80085c8:	f024 0403 	bic.w	r4, r4, #3
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d0f8      	beq.n	80085c2 <sbrk_aligned+0x22>
 80085d0:	1a21      	subs	r1, r4, r0
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 fe96 	bl	8009304 <_sbrk_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d1f2      	bne.n	80085c2 <sbrk_aligned+0x22>
 80085dc:	e7ef      	b.n	80085be <sbrk_aligned+0x1e>
 80085de:	bf00      	nop
 80085e0:	24000478 	.word	0x24000478

080085e4 <_malloc_r>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	1ccd      	adds	r5, r1, #3
 80085ea:	f025 0503 	bic.w	r5, r5, #3
 80085ee:	3508      	adds	r5, #8
 80085f0:	2d0c      	cmp	r5, #12
 80085f2:	bf38      	it	cc
 80085f4:	250c      	movcc	r5, #12
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	4606      	mov	r6, r0
 80085fa:	db01      	blt.n	8008600 <_malloc_r+0x1c>
 80085fc:	42a9      	cmp	r1, r5
 80085fe:	d904      	bls.n	800860a <_malloc_r+0x26>
 8008600:	230c      	movs	r3, #12
 8008602:	6033      	str	r3, [r6, #0]
 8008604:	2000      	movs	r0, #0
 8008606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086e0 <_malloc_r+0xfc>
 800860e:	f000 f869 	bl	80086e4 <__malloc_lock>
 8008612:	f8d8 3000 	ldr.w	r3, [r8]
 8008616:	461c      	mov	r4, r3
 8008618:	bb44      	cbnz	r4, 800866c <_malloc_r+0x88>
 800861a:	4629      	mov	r1, r5
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ffbf 	bl	80085a0 <sbrk_aligned>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	4604      	mov	r4, r0
 8008626:	d158      	bne.n	80086da <_malloc_r+0xf6>
 8008628:	f8d8 4000 	ldr.w	r4, [r8]
 800862c:	4627      	mov	r7, r4
 800862e:	2f00      	cmp	r7, #0
 8008630:	d143      	bne.n	80086ba <_malloc_r+0xd6>
 8008632:	2c00      	cmp	r4, #0
 8008634:	d04b      	beq.n	80086ce <_malloc_r+0xea>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	4639      	mov	r1, r7
 800863a:	4630      	mov	r0, r6
 800863c:	eb04 0903 	add.w	r9, r4, r3
 8008640:	f000 fe60 	bl	8009304 <_sbrk_r>
 8008644:	4581      	cmp	r9, r0
 8008646:	d142      	bne.n	80086ce <_malloc_r+0xea>
 8008648:	6821      	ldr	r1, [r4, #0]
 800864a:	1a6d      	subs	r5, r5, r1
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ffa6 	bl	80085a0 <sbrk_aligned>
 8008654:	3001      	adds	r0, #1
 8008656:	d03a      	beq.n	80086ce <_malloc_r+0xea>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	442b      	add	r3, r5
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	f8d8 3000 	ldr.w	r3, [r8]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	bb62      	cbnz	r2, 80086c0 <_malloc_r+0xdc>
 8008666:	f8c8 7000 	str.w	r7, [r8]
 800866a:	e00f      	b.n	800868c <_malloc_r+0xa8>
 800866c:	6822      	ldr	r2, [r4, #0]
 800866e:	1b52      	subs	r2, r2, r5
 8008670:	d420      	bmi.n	80086b4 <_malloc_r+0xd0>
 8008672:	2a0b      	cmp	r2, #11
 8008674:	d917      	bls.n	80086a6 <_malloc_r+0xc2>
 8008676:	1961      	adds	r1, r4, r5
 8008678:	42a3      	cmp	r3, r4
 800867a:	6025      	str	r5, [r4, #0]
 800867c:	bf18      	it	ne
 800867e:	6059      	strne	r1, [r3, #4]
 8008680:	6863      	ldr	r3, [r4, #4]
 8008682:	bf08      	it	eq
 8008684:	f8c8 1000 	streq.w	r1, [r8]
 8008688:	5162      	str	r2, [r4, r5]
 800868a:	604b      	str	r3, [r1, #4]
 800868c:	4630      	mov	r0, r6
 800868e:	f000 f82f 	bl	80086f0 <__malloc_unlock>
 8008692:	f104 000b 	add.w	r0, r4, #11
 8008696:	1d23      	adds	r3, r4, #4
 8008698:	f020 0007 	bic.w	r0, r0, #7
 800869c:	1ac2      	subs	r2, r0, r3
 800869e:	bf1c      	itt	ne
 80086a0:	1a1b      	subne	r3, r3, r0
 80086a2:	50a3      	strne	r3, [r4, r2]
 80086a4:	e7af      	b.n	8008606 <_malloc_r+0x22>
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	bf0c      	ite	eq
 80086ac:	f8c8 2000 	streq.w	r2, [r8]
 80086b0:	605a      	strne	r2, [r3, #4]
 80086b2:	e7eb      	b.n	800868c <_malloc_r+0xa8>
 80086b4:	4623      	mov	r3, r4
 80086b6:	6864      	ldr	r4, [r4, #4]
 80086b8:	e7ae      	b.n	8008618 <_malloc_r+0x34>
 80086ba:	463c      	mov	r4, r7
 80086bc:	687f      	ldr	r7, [r7, #4]
 80086be:	e7b6      	b.n	800862e <_malloc_r+0x4a>
 80086c0:	461a      	mov	r2, r3
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d1fb      	bne.n	80086c0 <_malloc_r+0xdc>
 80086c8:	2300      	movs	r3, #0
 80086ca:	6053      	str	r3, [r2, #4]
 80086cc:	e7de      	b.n	800868c <_malloc_r+0xa8>
 80086ce:	230c      	movs	r3, #12
 80086d0:	6033      	str	r3, [r6, #0]
 80086d2:	4630      	mov	r0, r6
 80086d4:	f000 f80c 	bl	80086f0 <__malloc_unlock>
 80086d8:	e794      	b.n	8008604 <_malloc_r+0x20>
 80086da:	6005      	str	r5, [r0, #0]
 80086dc:	e7d6      	b.n	800868c <_malloc_r+0xa8>
 80086de:	bf00      	nop
 80086e0:	2400047c 	.word	0x2400047c

080086e4 <__malloc_lock>:
 80086e4:	4801      	ldr	r0, [pc, #4]	@ (80086ec <__malloc_lock+0x8>)
 80086e6:	f7ff b928 	b.w	800793a <__retarget_lock_acquire_recursive>
 80086ea:	bf00      	nop
 80086ec:	24000474 	.word	0x24000474

080086f0 <__malloc_unlock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	@ (80086f8 <__malloc_unlock+0x8>)
 80086f2:	f7ff b923 	b.w	800793c <__retarget_lock_release_recursive>
 80086f6:	bf00      	nop
 80086f8:	24000474 	.word	0x24000474

080086fc <_Balloc>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	69c6      	ldr	r6, [r0, #28]
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	b976      	cbnz	r6, 8008724 <_Balloc+0x28>
 8008706:	2010      	movs	r0, #16
 8008708:	f7ff ff42 	bl	8008590 <malloc>
 800870c:	4602      	mov	r2, r0
 800870e:	61e0      	str	r0, [r4, #28]
 8008710:	b920      	cbnz	r0, 800871c <_Balloc+0x20>
 8008712:	4b18      	ldr	r3, [pc, #96]	@ (8008774 <_Balloc+0x78>)
 8008714:	4818      	ldr	r0, [pc, #96]	@ (8008778 <_Balloc+0x7c>)
 8008716:	216b      	movs	r1, #107	@ 0x6b
 8008718:	f000 fe12 	bl	8009340 <__assert_func>
 800871c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008720:	6006      	str	r6, [r0, #0]
 8008722:	60c6      	str	r6, [r0, #12]
 8008724:	69e6      	ldr	r6, [r4, #28]
 8008726:	68f3      	ldr	r3, [r6, #12]
 8008728:	b183      	cbz	r3, 800874c <_Balloc+0x50>
 800872a:	69e3      	ldr	r3, [r4, #28]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008732:	b9b8      	cbnz	r0, 8008764 <_Balloc+0x68>
 8008734:	2101      	movs	r1, #1
 8008736:	fa01 f605 	lsl.w	r6, r1, r5
 800873a:	1d72      	adds	r2, r6, #5
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fe1c 	bl	800937c <_calloc_r>
 8008744:	b160      	cbz	r0, 8008760 <_Balloc+0x64>
 8008746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800874a:	e00e      	b.n	800876a <_Balloc+0x6e>
 800874c:	2221      	movs	r2, #33	@ 0x21
 800874e:	2104      	movs	r1, #4
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fe13 	bl	800937c <_calloc_r>
 8008756:	69e3      	ldr	r3, [r4, #28]
 8008758:	60f0      	str	r0, [r6, #12]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e4      	bne.n	800872a <_Balloc+0x2e>
 8008760:	2000      	movs	r0, #0
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	6802      	ldr	r2, [r0, #0]
 8008766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800876a:	2300      	movs	r3, #0
 800876c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008770:	e7f7      	b.n	8008762 <_Balloc+0x66>
 8008772:	bf00      	nop
 8008774:	08009b0d 	.word	0x08009b0d
 8008778:	08009b8d 	.word	0x08009b8d

0800877c <_Bfree>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	69c6      	ldr	r6, [r0, #28]
 8008780:	4605      	mov	r5, r0
 8008782:	460c      	mov	r4, r1
 8008784:	b976      	cbnz	r6, 80087a4 <_Bfree+0x28>
 8008786:	2010      	movs	r0, #16
 8008788:	f7ff ff02 	bl	8008590 <malloc>
 800878c:	4602      	mov	r2, r0
 800878e:	61e8      	str	r0, [r5, #28]
 8008790:	b920      	cbnz	r0, 800879c <_Bfree+0x20>
 8008792:	4b09      	ldr	r3, [pc, #36]	@ (80087b8 <_Bfree+0x3c>)
 8008794:	4809      	ldr	r0, [pc, #36]	@ (80087bc <_Bfree+0x40>)
 8008796:	218f      	movs	r1, #143	@ 0x8f
 8008798:	f000 fdd2 	bl	8009340 <__assert_func>
 800879c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087a0:	6006      	str	r6, [r0, #0]
 80087a2:	60c6      	str	r6, [r0, #12]
 80087a4:	b13c      	cbz	r4, 80087b6 <_Bfree+0x3a>
 80087a6:	69eb      	ldr	r3, [r5, #28]
 80087a8:	6862      	ldr	r2, [r4, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087b0:	6021      	str	r1, [r4, #0]
 80087b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	08009b0d 	.word	0x08009b0d
 80087bc:	08009b8d 	.word	0x08009b8d

080087c0 <__multadd>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	690d      	ldr	r5, [r1, #16]
 80087c6:	4607      	mov	r7, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	461e      	mov	r6, r3
 80087cc:	f101 0c14 	add.w	ip, r1, #20
 80087d0:	2000      	movs	r0, #0
 80087d2:	f8dc 3000 	ldr.w	r3, [ip]
 80087d6:	b299      	uxth	r1, r3
 80087d8:	fb02 6101 	mla	r1, r2, r1, r6
 80087dc:	0c1e      	lsrs	r6, r3, #16
 80087de:	0c0b      	lsrs	r3, r1, #16
 80087e0:	fb02 3306 	mla	r3, r2, r6, r3
 80087e4:	b289      	uxth	r1, r1
 80087e6:	3001      	adds	r0, #1
 80087e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087ec:	4285      	cmp	r5, r0
 80087ee:	f84c 1b04 	str.w	r1, [ip], #4
 80087f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087f6:	dcec      	bgt.n	80087d2 <__multadd+0x12>
 80087f8:	b30e      	cbz	r6, 800883e <__multadd+0x7e>
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	42ab      	cmp	r3, r5
 80087fe:	dc19      	bgt.n	8008834 <__multadd+0x74>
 8008800:	6861      	ldr	r1, [r4, #4]
 8008802:	4638      	mov	r0, r7
 8008804:	3101      	adds	r1, #1
 8008806:	f7ff ff79 	bl	80086fc <_Balloc>
 800880a:	4680      	mov	r8, r0
 800880c:	b928      	cbnz	r0, 800881a <__multadd+0x5a>
 800880e:	4602      	mov	r2, r0
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <__multadd+0x84>)
 8008812:	480d      	ldr	r0, [pc, #52]	@ (8008848 <__multadd+0x88>)
 8008814:	21ba      	movs	r1, #186	@ 0xba
 8008816:	f000 fd93 	bl	8009340 <__assert_func>
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	3202      	adds	r2, #2
 800881e:	f104 010c 	add.w	r1, r4, #12
 8008822:	0092      	lsls	r2, r2, #2
 8008824:	300c      	adds	r0, #12
 8008826:	f000 fd7d 	bl	8009324 <memcpy>
 800882a:	4621      	mov	r1, r4
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff ffa5 	bl	800877c <_Bfree>
 8008832:	4644      	mov	r4, r8
 8008834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008838:	3501      	adds	r5, #1
 800883a:	615e      	str	r6, [r3, #20]
 800883c:	6125      	str	r5, [r4, #16]
 800883e:	4620      	mov	r0, r4
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	08009b7c 	.word	0x08009b7c
 8008848:	08009b8d 	.word	0x08009b8d

0800884c <__hi0bits>:
 800884c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008850:	4603      	mov	r3, r0
 8008852:	bf36      	itet	cc
 8008854:	0403      	lslcc	r3, r0, #16
 8008856:	2000      	movcs	r0, #0
 8008858:	2010      	movcc	r0, #16
 800885a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800885e:	bf3c      	itt	cc
 8008860:	021b      	lslcc	r3, r3, #8
 8008862:	3008      	addcc	r0, #8
 8008864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008868:	bf3c      	itt	cc
 800886a:	011b      	lslcc	r3, r3, #4
 800886c:	3004      	addcc	r0, #4
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008872:	bf3c      	itt	cc
 8008874:	009b      	lslcc	r3, r3, #2
 8008876:	3002      	addcc	r0, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	db05      	blt.n	8008888 <__hi0bits+0x3c>
 800887c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008880:	f100 0001 	add.w	r0, r0, #1
 8008884:	bf08      	it	eq
 8008886:	2020      	moveq	r0, #32
 8008888:	4770      	bx	lr

0800888a <__lo0bits>:
 800888a:	6803      	ldr	r3, [r0, #0]
 800888c:	4602      	mov	r2, r0
 800888e:	f013 0007 	ands.w	r0, r3, #7
 8008892:	d00b      	beq.n	80088ac <__lo0bits+0x22>
 8008894:	07d9      	lsls	r1, r3, #31
 8008896:	d421      	bmi.n	80088dc <__lo0bits+0x52>
 8008898:	0798      	lsls	r0, r3, #30
 800889a:	bf49      	itett	mi
 800889c:	085b      	lsrmi	r3, r3, #1
 800889e:	089b      	lsrpl	r3, r3, #2
 80088a0:	2001      	movmi	r0, #1
 80088a2:	6013      	strmi	r3, [r2, #0]
 80088a4:	bf5c      	itt	pl
 80088a6:	6013      	strpl	r3, [r2, #0]
 80088a8:	2002      	movpl	r0, #2
 80088aa:	4770      	bx	lr
 80088ac:	b299      	uxth	r1, r3
 80088ae:	b909      	cbnz	r1, 80088b4 <__lo0bits+0x2a>
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	2010      	movs	r0, #16
 80088b4:	b2d9      	uxtb	r1, r3
 80088b6:	b909      	cbnz	r1, 80088bc <__lo0bits+0x32>
 80088b8:	3008      	adds	r0, #8
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	0719      	lsls	r1, r3, #28
 80088be:	bf04      	itt	eq
 80088c0:	091b      	lsreq	r3, r3, #4
 80088c2:	3004      	addeq	r0, #4
 80088c4:	0799      	lsls	r1, r3, #30
 80088c6:	bf04      	itt	eq
 80088c8:	089b      	lsreq	r3, r3, #2
 80088ca:	3002      	addeq	r0, #2
 80088cc:	07d9      	lsls	r1, r3, #31
 80088ce:	d403      	bmi.n	80088d8 <__lo0bits+0x4e>
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	f100 0001 	add.w	r0, r0, #1
 80088d6:	d003      	beq.n	80088e0 <__lo0bits+0x56>
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	4770      	bx	lr
 80088dc:	2000      	movs	r0, #0
 80088de:	4770      	bx	lr
 80088e0:	2020      	movs	r0, #32
 80088e2:	4770      	bx	lr

080088e4 <__i2b>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	2101      	movs	r1, #1
 80088ea:	f7ff ff07 	bl	80086fc <_Balloc>
 80088ee:	4602      	mov	r2, r0
 80088f0:	b928      	cbnz	r0, 80088fe <__i2b+0x1a>
 80088f2:	4b05      	ldr	r3, [pc, #20]	@ (8008908 <__i2b+0x24>)
 80088f4:	4805      	ldr	r0, [pc, #20]	@ (800890c <__i2b+0x28>)
 80088f6:	f240 1145 	movw	r1, #325	@ 0x145
 80088fa:	f000 fd21 	bl	8009340 <__assert_func>
 80088fe:	2301      	movs	r3, #1
 8008900:	6144      	str	r4, [r0, #20]
 8008902:	6103      	str	r3, [r0, #16]
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	08009b7c 	.word	0x08009b7c
 800890c:	08009b8d 	.word	0x08009b8d

08008910 <__multiply>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4614      	mov	r4, r2
 8008916:	690a      	ldr	r2, [r1, #16]
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	429a      	cmp	r2, r3
 800891c:	bfa8      	it	ge
 800891e:	4623      	movge	r3, r4
 8008920:	460f      	mov	r7, r1
 8008922:	bfa4      	itt	ge
 8008924:	460c      	movge	r4, r1
 8008926:	461f      	movge	r7, r3
 8008928:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800892c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	6861      	ldr	r1, [r4, #4]
 8008934:	eb0a 0609 	add.w	r6, sl, r9
 8008938:	42b3      	cmp	r3, r6
 800893a:	b085      	sub	sp, #20
 800893c:	bfb8      	it	lt
 800893e:	3101      	addlt	r1, #1
 8008940:	f7ff fedc 	bl	80086fc <_Balloc>
 8008944:	b930      	cbnz	r0, 8008954 <__multiply+0x44>
 8008946:	4602      	mov	r2, r0
 8008948:	4b44      	ldr	r3, [pc, #272]	@ (8008a5c <__multiply+0x14c>)
 800894a:	4845      	ldr	r0, [pc, #276]	@ (8008a60 <__multiply+0x150>)
 800894c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008950:	f000 fcf6 	bl	8009340 <__assert_func>
 8008954:	f100 0514 	add.w	r5, r0, #20
 8008958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800895c:	462b      	mov	r3, r5
 800895e:	2200      	movs	r2, #0
 8008960:	4543      	cmp	r3, r8
 8008962:	d321      	bcc.n	80089a8 <__multiply+0x98>
 8008964:	f107 0114 	add.w	r1, r7, #20
 8008968:	f104 0214 	add.w	r2, r4, #20
 800896c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008970:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	1b13      	subs	r3, r2, r4
 8008978:	3b15      	subs	r3, #21
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	3304      	adds	r3, #4
 8008980:	f104 0715 	add.w	r7, r4, #21
 8008984:	42ba      	cmp	r2, r7
 8008986:	bf38      	it	cc
 8008988:	2304      	movcc	r3, #4
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	9103      	str	r1, [sp, #12]
 8008990:	428b      	cmp	r3, r1
 8008992:	d80c      	bhi.n	80089ae <__multiply+0x9e>
 8008994:	2e00      	cmp	r6, #0
 8008996:	dd03      	ble.n	80089a0 <__multiply+0x90>
 8008998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05b      	beq.n	8008a58 <__multiply+0x148>
 80089a0:	6106      	str	r6, [r0, #16]
 80089a2:	b005      	add	sp, #20
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	f843 2b04 	str.w	r2, [r3], #4
 80089ac:	e7d8      	b.n	8008960 <__multiply+0x50>
 80089ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80089b2:	f1ba 0f00 	cmp.w	sl, #0
 80089b6:	d024      	beq.n	8008a02 <__multiply+0xf2>
 80089b8:	f104 0e14 	add.w	lr, r4, #20
 80089bc:	46a9      	mov	r9, r5
 80089be:	f04f 0c00 	mov.w	ip, #0
 80089c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089c6:	f8d9 3000 	ldr.w	r3, [r9]
 80089ca:	fa1f fb87 	uxth.w	fp, r7
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80089d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80089d8:	f8d9 7000 	ldr.w	r7, [r9]
 80089dc:	4463      	add	r3, ip
 80089de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80089e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089f0:	4572      	cmp	r2, lr
 80089f2:	f849 3b04 	str.w	r3, [r9], #4
 80089f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089fa:	d8e2      	bhi.n	80089c2 <__multiply+0xb2>
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	f845 c003 	str.w	ip, [r5, r3]
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a08:	3104      	adds	r1, #4
 8008a0a:	f1b9 0f00 	cmp.w	r9, #0
 8008a0e:	d021      	beq.n	8008a54 <__multiply+0x144>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	f104 0c14 	add.w	ip, r4, #20
 8008a16:	46ae      	mov	lr, r5
 8008a18:	f04f 0a00 	mov.w	sl, #0
 8008a1c:	f8bc b000 	ldrh.w	fp, [ip]
 8008a20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a24:	fb09 770b 	mla	r7, r9, fp, r7
 8008a28:	4457      	add	r7, sl
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a30:	f84e 3b04 	str.w	r3, [lr], #4
 8008a34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a3c:	f8be 3000 	ldrh.w	r3, [lr]
 8008a40:	fb09 330a 	mla	r3, r9, sl, r3
 8008a44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a48:	4562      	cmp	r2, ip
 8008a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a4e:	d8e5      	bhi.n	8008a1c <__multiply+0x10c>
 8008a50:	9f01      	ldr	r7, [sp, #4]
 8008a52:	51eb      	str	r3, [r5, r7]
 8008a54:	3504      	adds	r5, #4
 8008a56:	e799      	b.n	800898c <__multiply+0x7c>
 8008a58:	3e01      	subs	r6, #1
 8008a5a:	e79b      	b.n	8008994 <__multiply+0x84>
 8008a5c:	08009b7c 	.word	0x08009b7c
 8008a60:	08009b8d 	.word	0x08009b8d

08008a64 <__pow5mult>:
 8008a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a68:	4615      	mov	r5, r2
 8008a6a:	f012 0203 	ands.w	r2, r2, #3
 8008a6e:	4607      	mov	r7, r0
 8008a70:	460e      	mov	r6, r1
 8008a72:	d007      	beq.n	8008a84 <__pow5mult+0x20>
 8008a74:	4c25      	ldr	r4, [pc, #148]	@ (8008b0c <__pow5mult+0xa8>)
 8008a76:	3a01      	subs	r2, #1
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a7e:	f7ff fe9f 	bl	80087c0 <__multadd>
 8008a82:	4606      	mov	r6, r0
 8008a84:	10ad      	asrs	r5, r5, #2
 8008a86:	d03d      	beq.n	8008b04 <__pow5mult+0xa0>
 8008a88:	69fc      	ldr	r4, [r7, #28]
 8008a8a:	b97c      	cbnz	r4, 8008aac <__pow5mult+0x48>
 8008a8c:	2010      	movs	r0, #16
 8008a8e:	f7ff fd7f 	bl	8008590 <malloc>
 8008a92:	4602      	mov	r2, r0
 8008a94:	61f8      	str	r0, [r7, #28]
 8008a96:	b928      	cbnz	r0, 8008aa4 <__pow5mult+0x40>
 8008a98:	4b1d      	ldr	r3, [pc, #116]	@ (8008b10 <__pow5mult+0xac>)
 8008a9a:	481e      	ldr	r0, [pc, #120]	@ (8008b14 <__pow5mult+0xb0>)
 8008a9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008aa0:	f000 fc4e 	bl	8009340 <__assert_func>
 8008aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008aa8:	6004      	str	r4, [r0, #0]
 8008aaa:	60c4      	str	r4, [r0, #12]
 8008aac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ab4:	b94c      	cbnz	r4, 8008aca <__pow5mult+0x66>
 8008ab6:	f240 2171 	movw	r1, #625	@ 0x271
 8008aba:	4638      	mov	r0, r7
 8008abc:	f7ff ff12 	bl	80088e4 <__i2b>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	6003      	str	r3, [r0, #0]
 8008aca:	f04f 0900 	mov.w	r9, #0
 8008ace:	07eb      	lsls	r3, r5, #31
 8008ad0:	d50a      	bpl.n	8008ae8 <__pow5mult+0x84>
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f7ff ff1a 	bl	8008910 <__multiply>
 8008adc:	4631      	mov	r1, r6
 8008ade:	4680      	mov	r8, r0
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff fe4b 	bl	800877c <_Bfree>
 8008ae6:	4646      	mov	r6, r8
 8008ae8:	106d      	asrs	r5, r5, #1
 8008aea:	d00b      	beq.n	8008b04 <__pow5mult+0xa0>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	b938      	cbnz	r0, 8008b00 <__pow5mult+0x9c>
 8008af0:	4622      	mov	r2, r4
 8008af2:	4621      	mov	r1, r4
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff ff0b 	bl	8008910 <__multiply>
 8008afa:	6020      	str	r0, [r4, #0]
 8008afc:	f8c0 9000 	str.w	r9, [r0]
 8008b00:	4604      	mov	r4, r0
 8008b02:	e7e4      	b.n	8008ace <__pow5mult+0x6a>
 8008b04:	4630      	mov	r0, r6
 8008b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08009be8 	.word	0x08009be8
 8008b10:	08009b0d 	.word	0x08009b0d
 8008b14:	08009b8d 	.word	0x08009b8d

08008b18 <__lshift>:
 8008b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6849      	ldr	r1, [r1, #4]
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	4607      	mov	r7, r0
 8008b2a:	4691      	mov	r9, r2
 8008b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b30:	f108 0601 	add.w	r6, r8, #1
 8008b34:	42b3      	cmp	r3, r6
 8008b36:	db0b      	blt.n	8008b50 <__lshift+0x38>
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff fddf 	bl	80086fc <_Balloc>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	b948      	cbnz	r0, 8008b56 <__lshift+0x3e>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b28      	ldr	r3, [pc, #160]	@ (8008be8 <__lshift+0xd0>)
 8008b46:	4829      	ldr	r0, [pc, #164]	@ (8008bec <__lshift+0xd4>)
 8008b48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b4c:	f000 fbf8 	bl	8009340 <__assert_func>
 8008b50:	3101      	adds	r1, #1
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	e7ee      	b.n	8008b34 <__lshift+0x1c>
 8008b56:	2300      	movs	r3, #0
 8008b58:	f100 0114 	add.w	r1, r0, #20
 8008b5c:	f100 0210 	add.w	r2, r0, #16
 8008b60:	4618      	mov	r0, r3
 8008b62:	4553      	cmp	r3, sl
 8008b64:	db33      	blt.n	8008bce <__lshift+0xb6>
 8008b66:	6920      	ldr	r0, [r4, #16]
 8008b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b6c:	f104 0314 	add.w	r3, r4, #20
 8008b70:	f019 091f 	ands.w	r9, r9, #31
 8008b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b7c:	d02b      	beq.n	8008bd6 <__lshift+0xbe>
 8008b7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b82:	468a      	mov	sl, r1
 8008b84:	2200      	movs	r2, #0
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	fa00 f009 	lsl.w	r0, r0, r9
 8008b8c:	4310      	orrs	r0, r2
 8008b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b96:	459c      	cmp	ip, r3
 8008b98:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b9c:	d8f3      	bhi.n	8008b86 <__lshift+0x6e>
 8008b9e:	ebac 0304 	sub.w	r3, ip, r4
 8008ba2:	3b15      	subs	r3, #21
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	3304      	adds	r3, #4
 8008baa:	f104 0015 	add.w	r0, r4, #21
 8008bae:	4584      	cmp	ip, r0
 8008bb0:	bf38      	it	cc
 8008bb2:	2304      	movcc	r3, #4
 8008bb4:	50ca      	str	r2, [r1, r3]
 8008bb6:	b10a      	cbz	r2, 8008bbc <__lshift+0xa4>
 8008bb8:	f108 0602 	add.w	r6, r8, #2
 8008bbc:	3e01      	subs	r6, #1
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	612e      	str	r6, [r5, #16]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f7ff fdda 	bl	800877c <_Bfree>
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	e7c5      	b.n	8008b62 <__lshift+0x4a>
 8008bd6:	3904      	subs	r1, #4
 8008bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008be0:	459c      	cmp	ip, r3
 8008be2:	d8f9      	bhi.n	8008bd8 <__lshift+0xc0>
 8008be4:	e7ea      	b.n	8008bbc <__lshift+0xa4>
 8008be6:	bf00      	nop
 8008be8:	08009b7c 	.word	0x08009b7c
 8008bec:	08009b8d 	.word	0x08009b8d

08008bf0 <__mcmp>:
 8008bf0:	690a      	ldr	r2, [r1, #16]
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6900      	ldr	r0, [r0, #16]
 8008bf6:	1a80      	subs	r0, r0, r2
 8008bf8:	b530      	push	{r4, r5, lr}
 8008bfa:	d10e      	bne.n	8008c1a <__mcmp+0x2a>
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	3114      	adds	r1, #20
 8008c00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c10:	4295      	cmp	r5, r2
 8008c12:	d003      	beq.n	8008c1c <__mcmp+0x2c>
 8008c14:	d205      	bcs.n	8008c22 <__mcmp+0x32>
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	bd30      	pop	{r4, r5, pc}
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d3f3      	bcc.n	8008c08 <__mcmp+0x18>
 8008c20:	e7fb      	b.n	8008c1a <__mcmp+0x2a>
 8008c22:	2001      	movs	r0, #1
 8008c24:	e7f9      	b.n	8008c1a <__mcmp+0x2a>
	...

08008c28 <__mdiff>:
 8008c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	4606      	mov	r6, r0
 8008c30:	4611      	mov	r1, r2
 8008c32:	4648      	mov	r0, r9
 8008c34:	4614      	mov	r4, r2
 8008c36:	f7ff ffdb 	bl	8008bf0 <__mcmp>
 8008c3a:	1e05      	subs	r5, r0, #0
 8008c3c:	d112      	bne.n	8008c64 <__mdiff+0x3c>
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff fd5b 	bl	80086fc <_Balloc>
 8008c46:	4602      	mov	r2, r0
 8008c48:	b928      	cbnz	r0, 8008c56 <__mdiff+0x2e>
 8008c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d48 <__mdiff+0x120>)
 8008c4c:	f240 2137 	movw	r1, #567	@ 0x237
 8008c50:	483e      	ldr	r0, [pc, #248]	@ (8008d4c <__mdiff+0x124>)
 8008c52:	f000 fb75 	bl	8009340 <__assert_func>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	b003      	add	sp, #12
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	bfbc      	itt	lt
 8008c66:	464b      	movlt	r3, r9
 8008c68:	46a1      	movlt	r9, r4
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c70:	bfba      	itte	lt
 8008c72:	461c      	movlt	r4, r3
 8008c74:	2501      	movlt	r5, #1
 8008c76:	2500      	movge	r5, #0
 8008c78:	f7ff fd40 	bl	80086fc <_Balloc>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	b918      	cbnz	r0, 8008c88 <__mdiff+0x60>
 8008c80:	4b31      	ldr	r3, [pc, #196]	@ (8008d48 <__mdiff+0x120>)
 8008c82:	f240 2145 	movw	r1, #581	@ 0x245
 8008c86:	e7e3      	b.n	8008c50 <__mdiff+0x28>
 8008c88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c8c:	6926      	ldr	r6, [r4, #16]
 8008c8e:	60c5      	str	r5, [r0, #12]
 8008c90:	f109 0310 	add.w	r3, r9, #16
 8008c94:	f109 0514 	add.w	r5, r9, #20
 8008c98:	f104 0e14 	add.w	lr, r4, #20
 8008c9c:	f100 0b14 	add.w	fp, r0, #20
 8008ca0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ca4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	46d9      	mov	r9, fp
 8008cac:	f04f 0c00 	mov.w	ip, #0
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	fa1f f38a 	uxth.w	r3, sl
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	b283      	uxth	r3, r0
 8008cc4:	1acb      	subs	r3, r1, r3
 8008cc6:	0c00      	lsrs	r0, r0, #16
 8008cc8:	4463      	add	r3, ip
 8008cca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008cce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cd8:	4576      	cmp	r6, lr
 8008cda:	f849 3b04 	str.w	r3, [r9], #4
 8008cde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ce2:	d8e5      	bhi.n	8008cb0 <__mdiff+0x88>
 8008ce4:	1b33      	subs	r3, r6, r4
 8008ce6:	3b15      	subs	r3, #21
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	3415      	adds	r4, #21
 8008cee:	3304      	adds	r3, #4
 8008cf0:	42a6      	cmp	r6, r4
 8008cf2:	bf38      	it	cc
 8008cf4:	2304      	movcc	r3, #4
 8008cf6:	441d      	add	r5, r3
 8008cf8:	445b      	add	r3, fp
 8008cfa:	461e      	mov	r6, r3
 8008cfc:	462c      	mov	r4, r5
 8008cfe:	4544      	cmp	r4, r8
 8008d00:	d30e      	bcc.n	8008d20 <__mdiff+0xf8>
 8008d02:	f108 0103 	add.w	r1, r8, #3
 8008d06:	1b49      	subs	r1, r1, r5
 8008d08:	f021 0103 	bic.w	r1, r1, #3
 8008d0c:	3d03      	subs	r5, #3
 8008d0e:	45a8      	cmp	r8, r5
 8008d10:	bf38      	it	cc
 8008d12:	2100      	movcc	r1, #0
 8008d14:	440b      	add	r3, r1
 8008d16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d1a:	b191      	cbz	r1, 8008d42 <__mdiff+0x11a>
 8008d1c:	6117      	str	r7, [r2, #16]
 8008d1e:	e79d      	b.n	8008c5c <__mdiff+0x34>
 8008d20:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d24:	46e6      	mov	lr, ip
 8008d26:	0c08      	lsrs	r0, r1, #16
 8008d28:	fa1c fc81 	uxtah	ip, ip, r1
 8008d2c:	4471      	add	r1, lr
 8008d2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d32:	b289      	uxth	r1, r1
 8008d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d38:	f846 1b04 	str.w	r1, [r6], #4
 8008d3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d40:	e7dd      	b.n	8008cfe <__mdiff+0xd6>
 8008d42:	3f01      	subs	r7, #1
 8008d44:	e7e7      	b.n	8008d16 <__mdiff+0xee>
 8008d46:	bf00      	nop
 8008d48:	08009b7c 	.word	0x08009b7c
 8008d4c:	08009b8d 	.word	0x08009b8d

08008d50 <__d2b>:
 8008d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	460f      	mov	r7, r1
 8008d56:	2101      	movs	r1, #1
 8008d58:	ec59 8b10 	vmov	r8, r9, d0
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	f7ff fccd 	bl	80086fc <_Balloc>
 8008d62:	4604      	mov	r4, r0
 8008d64:	b930      	cbnz	r0, 8008d74 <__d2b+0x24>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <__d2b+0xa8>)
 8008d6a:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <__d2b+0xac>)
 8008d6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d70:	f000 fae6 	bl	8009340 <__assert_func>
 8008d74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d7c:	b10d      	cbz	r5, 8008d82 <__d2b+0x32>
 8008d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f1b8 0300 	subs.w	r3, r8, #0
 8008d88:	d023      	beq.n	8008dd2 <__d2b+0x82>
 8008d8a:	4668      	mov	r0, sp
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	f7ff fd7c 	bl	800888a <__lo0bits>
 8008d92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d96:	b1d0      	cbz	r0, 8008dce <__d2b+0x7e>
 8008d98:	f1c0 0320 	rsb	r3, r0, #32
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	430b      	orrs	r3, r1
 8008da2:	40c2      	lsrs	r2, r0
 8008da4:	6163      	str	r3, [r4, #20]
 8008da6:	9201      	str	r2, [sp, #4]
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	61a3      	str	r3, [r4, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf0c      	ite	eq
 8008db0:	2201      	moveq	r2, #1
 8008db2:	2202      	movne	r2, #2
 8008db4:	6122      	str	r2, [r4, #16]
 8008db6:	b1a5      	cbz	r5, 8008de2 <__d2b+0x92>
 8008db8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008dbc:	4405      	add	r5, r0
 8008dbe:	603d      	str	r5, [r7, #0]
 8008dc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008dc4:	6030      	str	r0, [r6, #0]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	b003      	add	sp, #12
 8008dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dce:	6161      	str	r1, [r4, #20]
 8008dd0:	e7ea      	b.n	8008da8 <__d2b+0x58>
 8008dd2:	a801      	add	r0, sp, #4
 8008dd4:	f7ff fd59 	bl	800888a <__lo0bits>
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	6163      	str	r3, [r4, #20]
 8008ddc:	3020      	adds	r0, #32
 8008dde:	2201      	movs	r2, #1
 8008de0:	e7e8      	b.n	8008db4 <__d2b+0x64>
 8008de2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008de6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dea:	6038      	str	r0, [r7, #0]
 8008dec:	6918      	ldr	r0, [r3, #16]
 8008dee:	f7ff fd2d 	bl	800884c <__hi0bits>
 8008df2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008df6:	e7e5      	b.n	8008dc4 <__d2b+0x74>
 8008df8:	08009b7c 	.word	0x08009b7c
 8008dfc:	08009b8d 	.word	0x08009b8d

08008e00 <__sfputc_r>:
 8008e00:	6893      	ldr	r3, [r2, #8]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	b410      	push	{r4}
 8008e08:	6093      	str	r3, [r2, #8]
 8008e0a:	da08      	bge.n	8008e1e <__sfputc_r+0x1e>
 8008e0c:	6994      	ldr	r4, [r2, #24]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	db01      	blt.n	8008e16 <__sfputc_r+0x16>
 8008e12:	290a      	cmp	r1, #10
 8008e14:	d103      	bne.n	8008e1e <__sfputc_r+0x1e>
 8008e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e1a:	f000 b9df 	b.w	80091dc <__swbuf_r>
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	1c58      	adds	r0, r3, #1
 8008e22:	6010      	str	r0, [r2, #0]
 8008e24:	7019      	strb	r1, [r3, #0]
 8008e26:	4608      	mov	r0, r1
 8008e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <__sfputs_r>:
 8008e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e30:	4606      	mov	r6, r0
 8008e32:	460f      	mov	r7, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	18d5      	adds	r5, r2, r3
 8008e38:	42ac      	cmp	r4, r5
 8008e3a:	d101      	bne.n	8008e40 <__sfputs_r+0x12>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e007      	b.n	8008e50 <__sfputs_r+0x22>
 8008e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e44:	463a      	mov	r2, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffda 	bl	8008e00 <__sfputc_r>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d1f3      	bne.n	8008e38 <__sfputs_r+0xa>
 8008e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e54 <_vfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	b09d      	sub	sp, #116	@ 0x74
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	4698      	mov	r8, r3
 8008e60:	4606      	mov	r6, r0
 8008e62:	b118      	cbz	r0, 8008e6c <_vfiprintf_r+0x18>
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b90b      	cbnz	r3, 8008e6c <_vfiprintf_r+0x18>
 8008e68:	f7fe fc5e 	bl	8007728 <__sinit>
 8008e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7fe fd5e 	bl	800793a <__retarget_lock_acquire_recursive>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	071b      	lsls	r3, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <_vfiprintf_r+0x34>
 8008e84:	692b      	ldr	r3, [r5, #16]
 8008e86:	b99b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x5c>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 f9e4 	bl	8009258 <__swsetup_r>
 8008e90:	b170      	cbz	r0, 8008eb0 <_vfiprintf_r+0x5c>
 8008e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e94:	07dc      	lsls	r4, r3, #31
 8008e96:	d504      	bpl.n	8008ea2 <_vfiprintf_r+0x4e>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	b01d      	add	sp, #116	@ 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	0598      	lsls	r0, r3, #22
 8008ea6:	d4f7      	bmi.n	8008e98 <_vfiprintf_r+0x44>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eaa:	f7fe fd47 	bl	800793c <__retarget_lock_release_recursive>
 8008eae:	e7f3      	b.n	8008e98 <_vfiprintf_r+0x44>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	2330      	movs	r3, #48	@ 0x30
 8008ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009070 <_vfiprintf_r+0x21c>
 8008ec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ec8:	f04f 0901 	mov.w	r9, #1
 8008ecc:	4623      	mov	r3, r4
 8008ece:	469a      	mov	sl, r3
 8008ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed4:	b10a      	cbz	r2, 8008eda <_vfiprintf_r+0x86>
 8008ed6:	2a25      	cmp	r2, #37	@ 0x25
 8008ed8:	d1f9      	bne.n	8008ece <_vfiprintf_r+0x7a>
 8008eda:	ebba 0b04 	subs.w	fp, sl, r4
 8008ede:	d00b      	beq.n	8008ef8 <_vfiprintf_r+0xa4>
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffa1 	bl	8008e2e <__sfputs_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	f000 80a7 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef4:	445a      	add	r2, fp
 8008ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 809f 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0c:	f10a 0a01 	add.w	sl, sl, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4853      	ldr	r0, [pc, #332]	@ (8009070 <_vfiprintf_r+0x21c>)
 8008f24:	f7f7 f9dc 	bl	80002e0 <memchr>
 8008f28:	9a04      	ldr	r2, [sp, #16]
 8008f2a:	b9d8      	cbnz	r0, 8008f64 <_vfiprintf_r+0x110>
 8008f2c:	06d1      	lsls	r1, r2, #27
 8008f2e:	bf44      	itt	mi
 8008f30:	2320      	movmi	r3, #32
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f36:	0713      	lsls	r3, r2, #28
 8008f38:	bf44      	itt	mi
 8008f3a:	232b      	movmi	r3, #43	@ 0x2b
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f46:	d015      	beq.n	8008f74 <_vfiprintf_r+0x120>
 8008f48:	9a07      	ldr	r2, [sp, #28]
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	4621      	mov	r1, r4
 8008f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f58:	3b30      	subs	r3, #48	@ 0x30
 8008f5a:	2b09      	cmp	r3, #9
 8008f5c:	d94b      	bls.n	8008ff6 <_vfiprintf_r+0x1a2>
 8008f5e:	b1b0      	cbz	r0, 8008f8e <_vfiprintf_r+0x13a>
 8008f60:	9207      	str	r2, [sp, #28]
 8008f62:	e014      	b.n	8008f8e <_vfiprintf_r+0x13a>
 8008f64:	eba0 0308 	sub.w	r3, r0, r8
 8008f68:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	46a2      	mov	sl, r4
 8008f72:	e7d2      	b.n	8008f1a <_vfiprintf_r+0xc6>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d19      	adds	r1, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9103      	str	r1, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfbb      	ittet	lt
 8008f80:	425b      	neglt	r3, r3
 8008f82:	f042 0202 	orrlt.w	r2, r2, #2
 8008f86:	9307      	strge	r3, [sp, #28]
 8008f88:	9307      	strlt	r3, [sp, #28]
 8008f8a:	bfb8      	it	lt
 8008f8c:	9204      	strlt	r2, [sp, #16]
 8008f8e:	7823      	ldrb	r3, [r4, #0]
 8008f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f92:	d10a      	bne.n	8008faa <_vfiprintf_r+0x156>
 8008f94:	7863      	ldrb	r3, [r4, #1]
 8008f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f98:	d132      	bne.n	8009000 <_vfiprintf_r+0x1ac>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9203      	str	r2, [sp, #12]
 8008fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fa6:	3402      	adds	r4, #2
 8008fa8:	9305      	str	r3, [sp, #20]
 8008faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009080 <_vfiprintf_r+0x22c>
 8008fae:	7821      	ldrb	r1, [r4, #0]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f7f7 f994 	bl	80002e0 <memchr>
 8008fb8:	b138      	cbz	r0, 8008fca <_vfiprintf_r+0x176>
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	eba0 000a 	sub.w	r0, r0, sl
 8008fc0:	2240      	movs	r2, #64	@ 0x40
 8008fc2:	4082      	lsls	r2, r0
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4829      	ldr	r0, [pc, #164]	@ (8009074 <_vfiprintf_r+0x220>)
 8008fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fd4:	2206      	movs	r2, #6
 8008fd6:	f7f7 f983 	bl	80002e0 <memchr>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d03f      	beq.n	800905e <_vfiprintf_r+0x20a>
 8008fde:	4b26      	ldr	r3, [pc, #152]	@ (8009078 <_vfiprintf_r+0x224>)
 8008fe0:	bb1b      	cbnz	r3, 800902a <_vfiprintf_r+0x1d6>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	3307      	adds	r3, #7
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	3308      	adds	r3, #8
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff0:	443b      	add	r3, r7
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	e76a      	b.n	8008ecc <_vfiprintf_r+0x78>
 8008ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	e7a8      	b.n	8008f52 <_vfiprintf_r+0xfe>
 8009000:	2300      	movs	r3, #0
 8009002:	3401      	adds	r4, #1
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	4619      	mov	r1, r3
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4620      	mov	r0, r4
 800900e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009012:	3a30      	subs	r2, #48	@ 0x30
 8009014:	2a09      	cmp	r2, #9
 8009016:	d903      	bls.n	8009020 <_vfiprintf_r+0x1cc>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0c6      	beq.n	8008faa <_vfiprintf_r+0x156>
 800901c:	9105      	str	r1, [sp, #20]
 800901e:	e7c4      	b.n	8008faa <_vfiprintf_r+0x156>
 8009020:	fb0c 2101 	mla	r1, ip, r1, r2
 8009024:	4604      	mov	r4, r0
 8009026:	2301      	movs	r3, #1
 8009028:	e7f0      	b.n	800900c <_vfiprintf_r+0x1b8>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4b12      	ldr	r3, [pc, #72]	@ (800907c <_vfiprintf_r+0x228>)
 8009032:	a904      	add	r1, sp, #16
 8009034:	4630      	mov	r0, r6
 8009036:	f7fd ff43 	bl	8006ec0 <_printf_float>
 800903a:	4607      	mov	r7, r0
 800903c:	1c78      	adds	r0, r7, #1
 800903e:	d1d6      	bne.n	8008fee <_vfiprintf_r+0x19a>
 8009040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d405      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	059a      	lsls	r2, r3, #22
 800904a:	d402      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7fe fc75 	bl	800793c <__retarget_lock_release_recursive>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af1f 	bmi.w	8008e98 <_vfiprintf_r+0x44>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e71e      	b.n	8008e9c <_vfiprintf_r+0x48>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_vfiprintf_r+0x228>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4630      	mov	r0, r6
 800906a:	f7fe f9b1 	bl	80073d0 <_printf_i>
 800906e:	e7e4      	b.n	800903a <_vfiprintf_r+0x1e6>
 8009070:	08009ce8 	.word	0x08009ce8
 8009074:	08009cf2 	.word	0x08009cf2
 8009078:	08006ec1 	.word	0x08006ec1
 800907c:	08008e2f 	.word	0x08008e2f
 8009080:	08009cee 	.word	0x08009cee

08009084 <__sflush_r>:
 8009084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	0716      	lsls	r6, r2, #28
 800908e:	4605      	mov	r5, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d454      	bmi.n	800913e <__sflush_r+0xba>
 8009094:	684b      	ldr	r3, [r1, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dc02      	bgt.n	80090a0 <__sflush_r+0x1c>
 800909a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd48      	ble.n	8009132 <__sflush_r+0xae>
 80090a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d045      	beq.n	8009132 <__sflush_r+0xae>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090ac:	682f      	ldr	r7, [r5, #0]
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	d030      	beq.n	8009116 <__sflush_r+0x92>
 80090b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0759      	lsls	r1, r3, #29
 80090ba:	d505      	bpl.n	80090c8 <__sflush_r+0x44>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090c2:	b10b      	cbz	r3, 80090c8 <__sflush_r+0x44>
 80090c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090cc:	6a21      	ldr	r1, [r4, #32]
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b0      	blx	r6
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	d106      	bne.n	80090e6 <__sflush_r+0x62>
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	291d      	cmp	r1, #29
 80090dc:	d82b      	bhi.n	8009136 <__sflush_r+0xb2>
 80090de:	4a2a      	ldr	r2, [pc, #168]	@ (8009188 <__sflush_r+0x104>)
 80090e0:	410a      	asrs	r2, r1
 80090e2:	07d6      	lsls	r6, r2, #31
 80090e4:	d427      	bmi.n	8009136 <__sflush_r+0xb2>
 80090e6:	2200      	movs	r2, #0
 80090e8:	6062      	str	r2, [r4, #4]
 80090ea:	04d9      	lsls	r1, r3, #19
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	6022      	str	r2, [r4, #0]
 80090f0:	d504      	bpl.n	80090fc <__sflush_r+0x78>
 80090f2:	1c42      	adds	r2, r0, #1
 80090f4:	d101      	bne.n	80090fa <__sflush_r+0x76>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b903      	cbnz	r3, 80090fc <__sflush_r+0x78>
 80090fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80090fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090fe:	602f      	str	r7, [r5, #0]
 8009100:	b1b9      	cbz	r1, 8009132 <__sflush_r+0xae>
 8009102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009106:	4299      	cmp	r1, r3
 8009108:	d002      	beq.n	8009110 <__sflush_r+0x8c>
 800910a:	4628      	mov	r0, r5
 800910c:	f7ff f9f6 	bl	80084fc <_free_r>
 8009110:	2300      	movs	r3, #0
 8009112:	6363      	str	r3, [r4, #52]	@ 0x34
 8009114:	e00d      	b.n	8009132 <__sflush_r+0xae>
 8009116:	2301      	movs	r3, #1
 8009118:	4628      	mov	r0, r5
 800911a:	47b0      	blx	r6
 800911c:	4602      	mov	r2, r0
 800911e:	1c50      	adds	r0, r2, #1
 8009120:	d1c9      	bne.n	80090b6 <__sflush_r+0x32>
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0c6      	beq.n	80090b6 <__sflush_r+0x32>
 8009128:	2b1d      	cmp	r3, #29
 800912a:	d001      	beq.n	8009130 <__sflush_r+0xac>
 800912c:	2b16      	cmp	r3, #22
 800912e:	d11e      	bne.n	800916e <__sflush_r+0xea>
 8009130:	602f      	str	r7, [r5, #0]
 8009132:	2000      	movs	r0, #0
 8009134:	e022      	b.n	800917c <__sflush_r+0xf8>
 8009136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913a:	b21b      	sxth	r3, r3
 800913c:	e01b      	b.n	8009176 <__sflush_r+0xf2>
 800913e:	690f      	ldr	r7, [r1, #16]
 8009140:	2f00      	cmp	r7, #0
 8009142:	d0f6      	beq.n	8009132 <__sflush_r+0xae>
 8009144:	0793      	lsls	r3, r2, #30
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	bf08      	it	eq
 800914a:	694b      	ldreq	r3, [r1, #20]
 800914c:	600f      	str	r7, [r1, #0]
 800914e:	bf18      	it	ne
 8009150:	2300      	movne	r3, #0
 8009152:	eba6 0807 	sub.w	r8, r6, r7
 8009156:	608b      	str	r3, [r1, #8]
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	dde9      	ble.n	8009132 <__sflush_r+0xae>
 800915e:	6a21      	ldr	r1, [r4, #32]
 8009160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009162:	4643      	mov	r3, r8
 8009164:	463a      	mov	r2, r7
 8009166:	4628      	mov	r0, r5
 8009168:	47b0      	blx	r6
 800916a:	2800      	cmp	r0, #0
 800916c:	dc08      	bgt.n	8009180 <__sflush_r+0xfc>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	4407      	add	r7, r0
 8009182:	eba8 0800 	sub.w	r8, r8, r0
 8009186:	e7e7      	b.n	8009158 <__sflush_r+0xd4>
 8009188:	dfbffffe 	.word	0xdfbffffe

0800918c <_fflush_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	4605      	mov	r5, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b913      	cbnz	r3, 800919c <_fflush_r+0x10>
 8009196:	2500      	movs	r5, #0
 8009198:	4628      	mov	r0, r5
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	b118      	cbz	r0, 80091a6 <_fflush_r+0x1a>
 800919e:	6a03      	ldr	r3, [r0, #32]
 80091a0:	b90b      	cbnz	r3, 80091a6 <_fflush_r+0x1a>
 80091a2:	f7fe fac1 	bl	8007728 <__sinit>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f3      	beq.n	8009196 <_fflush_r+0xa>
 80091ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b0:	07d0      	lsls	r0, r2, #31
 80091b2:	d404      	bmi.n	80091be <_fflush_r+0x32>
 80091b4:	0599      	lsls	r1, r3, #22
 80091b6:	d402      	bmi.n	80091be <_fflush_r+0x32>
 80091b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ba:	f7fe fbbe 	bl	800793a <__retarget_lock_acquire_recursive>
 80091be:	4628      	mov	r0, r5
 80091c0:	4621      	mov	r1, r4
 80091c2:	f7ff ff5f 	bl	8009084 <__sflush_r>
 80091c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	4605      	mov	r5, r0
 80091cc:	d4e4      	bmi.n	8009198 <_fflush_r+0xc>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	059b      	lsls	r3, r3, #22
 80091d2:	d4e1      	bmi.n	8009198 <_fflush_r+0xc>
 80091d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d6:	f7fe fbb1 	bl	800793c <__retarget_lock_release_recursive>
 80091da:	e7dd      	b.n	8009198 <_fflush_r+0xc>

080091dc <__swbuf_r>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	460e      	mov	r6, r1
 80091e0:	4614      	mov	r4, r2
 80091e2:	4605      	mov	r5, r0
 80091e4:	b118      	cbz	r0, 80091ee <__swbuf_r+0x12>
 80091e6:	6a03      	ldr	r3, [r0, #32]
 80091e8:	b90b      	cbnz	r3, 80091ee <__swbuf_r+0x12>
 80091ea:	f7fe fa9d 	bl	8007728 <__sinit>
 80091ee:	69a3      	ldr	r3, [r4, #24]
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	071a      	lsls	r2, r3, #28
 80091f6:	d501      	bpl.n	80091fc <__swbuf_r+0x20>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	b943      	cbnz	r3, 800920e <__swbuf_r+0x32>
 80091fc:	4621      	mov	r1, r4
 80091fe:	4628      	mov	r0, r5
 8009200:	f000 f82a 	bl	8009258 <__swsetup_r>
 8009204:	b118      	cbz	r0, 800920e <__swbuf_r+0x32>
 8009206:	f04f 37ff 	mov.w	r7, #4294967295
 800920a:	4638      	mov	r0, r7
 800920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6922      	ldr	r2, [r4, #16]
 8009212:	1a98      	subs	r0, r3, r2
 8009214:	6963      	ldr	r3, [r4, #20]
 8009216:	b2f6      	uxtb	r6, r6
 8009218:	4283      	cmp	r3, r0
 800921a:	4637      	mov	r7, r6
 800921c:	dc05      	bgt.n	800922a <__swbuf_r+0x4e>
 800921e:	4621      	mov	r1, r4
 8009220:	4628      	mov	r0, r5
 8009222:	f7ff ffb3 	bl	800918c <_fflush_r>
 8009226:	2800      	cmp	r0, #0
 8009228:	d1ed      	bne.n	8009206 <__swbuf_r+0x2a>
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	3b01      	subs	r3, #1
 800922e:	60a3      	str	r3, [r4, #8]
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	701e      	strb	r6, [r3, #0]
 8009238:	6962      	ldr	r2, [r4, #20]
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	429a      	cmp	r2, r3
 800923e:	d004      	beq.n	800924a <__swbuf_r+0x6e>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	07db      	lsls	r3, r3, #31
 8009244:	d5e1      	bpl.n	800920a <__swbuf_r+0x2e>
 8009246:	2e0a      	cmp	r6, #10
 8009248:	d1df      	bne.n	800920a <__swbuf_r+0x2e>
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f7ff ff9d 	bl	800918c <_fflush_r>
 8009252:	2800      	cmp	r0, #0
 8009254:	d0d9      	beq.n	800920a <__swbuf_r+0x2e>
 8009256:	e7d6      	b.n	8009206 <__swbuf_r+0x2a>

08009258 <__swsetup_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4b29      	ldr	r3, [pc, #164]	@ (8009300 <__swsetup_r+0xa8>)
 800925c:	4605      	mov	r5, r0
 800925e:	6818      	ldr	r0, [r3, #0]
 8009260:	460c      	mov	r4, r1
 8009262:	b118      	cbz	r0, 800926c <__swsetup_r+0x14>
 8009264:	6a03      	ldr	r3, [r0, #32]
 8009266:	b90b      	cbnz	r3, 800926c <__swsetup_r+0x14>
 8009268:	f7fe fa5e 	bl	8007728 <__sinit>
 800926c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009270:	0719      	lsls	r1, r3, #28
 8009272:	d422      	bmi.n	80092ba <__swsetup_r+0x62>
 8009274:	06da      	lsls	r2, r3, #27
 8009276:	d407      	bmi.n	8009288 <__swsetup_r+0x30>
 8009278:	2209      	movs	r2, #9
 800927a:	602a      	str	r2, [r5, #0]
 800927c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	e033      	b.n	80092f0 <__swsetup_r+0x98>
 8009288:	0758      	lsls	r0, r3, #29
 800928a:	d512      	bpl.n	80092b2 <__swsetup_r+0x5a>
 800928c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800928e:	b141      	cbz	r1, 80092a2 <__swsetup_r+0x4a>
 8009290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009294:	4299      	cmp	r1, r3
 8009296:	d002      	beq.n	800929e <__swsetup_r+0x46>
 8009298:	4628      	mov	r0, r5
 800929a:	f7ff f92f 	bl	80084fc <_free_r>
 800929e:	2300      	movs	r3, #0
 80092a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	2300      	movs	r3, #0
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f043 0308 	orr.w	r3, r3, #8
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	b94b      	cbnz	r3, 80092d2 <__swsetup_r+0x7a>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c8:	d003      	beq.n	80092d2 <__swsetup_r+0x7a>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f8c1 	bl	8009454 <__smakebuf_r>
 80092d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d6:	f013 0201 	ands.w	r2, r3, #1
 80092da:	d00a      	beq.n	80092f2 <__swsetup_r+0x9a>
 80092dc:	2200      	movs	r2, #0
 80092de:	60a2      	str	r2, [r4, #8]
 80092e0:	6962      	ldr	r2, [r4, #20]
 80092e2:	4252      	negs	r2, r2
 80092e4:	61a2      	str	r2, [r4, #24]
 80092e6:	6922      	ldr	r2, [r4, #16]
 80092e8:	b942      	cbnz	r2, 80092fc <__swsetup_r+0xa4>
 80092ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ee:	d1c5      	bne.n	800927c <__swsetup_r+0x24>
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	0799      	lsls	r1, r3, #30
 80092f4:	bf58      	it	pl
 80092f6:	6962      	ldrpl	r2, [r4, #20]
 80092f8:	60a2      	str	r2, [r4, #8]
 80092fa:	e7f4      	b.n	80092e6 <__swsetup_r+0x8e>
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7f7      	b.n	80092f0 <__swsetup_r+0x98>
 8009300:	2400001c 	.word	0x2400001c

08009304 <_sbrk_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	@ (8009320 <_sbrk_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f8 fa48 	bl	80017a4 <_sbrk>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_sbrk_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_sbrk_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	24000470 	.word	0x24000470

08009324 <memcpy>:
 8009324:	440a      	add	r2, r1
 8009326:	4291      	cmp	r1, r2
 8009328:	f100 33ff 	add.w	r3, r0, #4294967295
 800932c:	d100      	bne.n	8009330 <memcpy+0xc>
 800932e:	4770      	bx	lr
 8009330:	b510      	push	{r4, lr}
 8009332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800933a:	4291      	cmp	r1, r2
 800933c:	d1f9      	bne.n	8009332 <memcpy+0xe>
 800933e:	bd10      	pop	{r4, pc}

08009340 <__assert_func>:
 8009340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009342:	4614      	mov	r4, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4b09      	ldr	r3, [pc, #36]	@ (800936c <__assert_func+0x2c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4605      	mov	r5, r0
 800934c:	68d8      	ldr	r0, [r3, #12]
 800934e:	b954      	cbnz	r4, 8009366 <__assert_func+0x26>
 8009350:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <__assert_func+0x30>)
 8009352:	461c      	mov	r4, r3
 8009354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009358:	9100      	str	r1, [sp, #0]
 800935a:	462b      	mov	r3, r5
 800935c:	4905      	ldr	r1, [pc, #20]	@ (8009374 <__assert_func+0x34>)
 800935e:	f000 f841 	bl	80093e4 <fiprintf>
 8009362:	f000 f8d5 	bl	8009510 <abort>
 8009366:	4b04      	ldr	r3, [pc, #16]	@ (8009378 <__assert_func+0x38>)
 8009368:	e7f4      	b.n	8009354 <__assert_func+0x14>
 800936a:	bf00      	nop
 800936c:	2400001c 	.word	0x2400001c
 8009370:	08009d3e 	.word	0x08009d3e
 8009374:	08009d10 	.word	0x08009d10
 8009378:	08009d03 	.word	0x08009d03

0800937c <_calloc_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	fba1 5402 	umull	r5, r4, r1, r2
 8009382:	b93c      	cbnz	r4, 8009394 <_calloc_r+0x18>
 8009384:	4629      	mov	r1, r5
 8009386:	f7ff f92d 	bl	80085e4 <_malloc_r>
 800938a:	4606      	mov	r6, r0
 800938c:	b928      	cbnz	r0, 800939a <_calloc_r+0x1e>
 800938e:	2600      	movs	r6, #0
 8009390:	4630      	mov	r0, r6
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	220c      	movs	r2, #12
 8009396:	6002      	str	r2, [r0, #0]
 8009398:	e7f9      	b.n	800938e <_calloc_r+0x12>
 800939a:	462a      	mov	r2, r5
 800939c:	4621      	mov	r1, r4
 800939e:	f7fe fa4e 	bl	800783e <memset>
 80093a2:	e7f5      	b.n	8009390 <_calloc_r+0x14>

080093a4 <__ascii_mbtowc>:
 80093a4:	b082      	sub	sp, #8
 80093a6:	b901      	cbnz	r1, 80093aa <__ascii_mbtowc+0x6>
 80093a8:	a901      	add	r1, sp, #4
 80093aa:	b142      	cbz	r2, 80093be <__ascii_mbtowc+0x1a>
 80093ac:	b14b      	cbz	r3, 80093c2 <__ascii_mbtowc+0x1e>
 80093ae:	7813      	ldrb	r3, [r2, #0]
 80093b0:	600b      	str	r3, [r1, #0]
 80093b2:	7812      	ldrb	r2, [r2, #0]
 80093b4:	1e10      	subs	r0, r2, #0
 80093b6:	bf18      	it	ne
 80093b8:	2001      	movne	r0, #1
 80093ba:	b002      	add	sp, #8
 80093bc:	4770      	bx	lr
 80093be:	4610      	mov	r0, r2
 80093c0:	e7fb      	b.n	80093ba <__ascii_mbtowc+0x16>
 80093c2:	f06f 0001 	mvn.w	r0, #1
 80093c6:	e7f8      	b.n	80093ba <__ascii_mbtowc+0x16>

080093c8 <__ascii_wctomb>:
 80093c8:	4603      	mov	r3, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	b141      	cbz	r1, 80093e0 <__ascii_wctomb+0x18>
 80093ce:	2aff      	cmp	r2, #255	@ 0xff
 80093d0:	d904      	bls.n	80093dc <__ascii_wctomb+0x14>
 80093d2:	228a      	movs	r2, #138	@ 0x8a
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	4770      	bx	lr
 80093dc:	700a      	strb	r2, [r1, #0]
 80093de:	2001      	movs	r0, #1
 80093e0:	4770      	bx	lr
	...

080093e4 <fiprintf>:
 80093e4:	b40e      	push	{r1, r2, r3}
 80093e6:	b503      	push	{r0, r1, lr}
 80093e8:	4601      	mov	r1, r0
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	4805      	ldr	r0, [pc, #20]	@ (8009404 <fiprintf+0x20>)
 80093ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f2:	6800      	ldr	r0, [r0, #0]
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	f7ff fd2d 	bl	8008e54 <_vfiprintf_r>
 80093fa:	b002      	add	sp, #8
 80093fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009400:	b003      	add	sp, #12
 8009402:	4770      	bx	lr
 8009404:	2400001c 	.word	0x2400001c

08009408 <__swhatbuf_r>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	460c      	mov	r4, r1
 800940c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009410:	2900      	cmp	r1, #0
 8009412:	b096      	sub	sp, #88	@ 0x58
 8009414:	4615      	mov	r5, r2
 8009416:	461e      	mov	r6, r3
 8009418:	da0d      	bge.n	8009436 <__swhatbuf_r+0x2e>
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009420:	f04f 0100 	mov.w	r1, #0
 8009424:	bf14      	ite	ne
 8009426:	2340      	movne	r3, #64	@ 0x40
 8009428:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800942c:	2000      	movs	r0, #0
 800942e:	6031      	str	r1, [r6, #0]
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	b016      	add	sp, #88	@ 0x58
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	466a      	mov	r2, sp
 8009438:	f000 f848 	bl	80094cc <_fstat_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	dbec      	blt.n	800941a <__swhatbuf_r+0x12>
 8009440:	9901      	ldr	r1, [sp, #4]
 8009442:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009446:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800944a:	4259      	negs	r1, r3
 800944c:	4159      	adcs	r1, r3
 800944e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009452:	e7eb      	b.n	800942c <__swhatbuf_r+0x24>

08009454 <__smakebuf_r>:
 8009454:	898b      	ldrh	r3, [r1, #12]
 8009456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009458:	079d      	lsls	r5, r3, #30
 800945a:	4606      	mov	r6, r0
 800945c:	460c      	mov	r4, r1
 800945e:	d507      	bpl.n	8009470 <__smakebuf_r+0x1c>
 8009460:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	2301      	movs	r3, #1
 800946a:	6163      	str	r3, [r4, #20]
 800946c:	b003      	add	sp, #12
 800946e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009470:	ab01      	add	r3, sp, #4
 8009472:	466a      	mov	r2, sp
 8009474:	f7ff ffc8 	bl	8009408 <__swhatbuf_r>
 8009478:	9f00      	ldr	r7, [sp, #0]
 800947a:	4605      	mov	r5, r0
 800947c:	4639      	mov	r1, r7
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff f8b0 	bl	80085e4 <_malloc_r>
 8009484:	b948      	cbnz	r0, 800949a <__smakebuf_r+0x46>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	059a      	lsls	r2, r3, #22
 800948c:	d4ee      	bmi.n	800946c <__smakebuf_r+0x18>
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	f043 0302 	orr.w	r3, r3, #2
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	e7e2      	b.n	8009460 <__smakebuf_r+0xc>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	6020      	str	r0, [r4, #0]
 800949e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094aa:	b15b      	cbz	r3, 80094c4 <__smakebuf_r+0x70>
 80094ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094b0:	4630      	mov	r0, r6
 80094b2:	f000 f81d 	bl	80094f0 <_isatty_r>
 80094b6:	b128      	cbz	r0, 80094c4 <__smakebuf_r+0x70>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f023 0303 	bic.w	r3, r3, #3
 80094be:	f043 0301 	orr.w	r3, r3, #1
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	431d      	orrs	r5, r3
 80094c8:	81a5      	strh	r5, [r4, #12]
 80094ca:	e7cf      	b.n	800946c <__smakebuf_r+0x18>

080094cc <_fstat_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	@ (80094ec <_fstat_r+0x20>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f7f8 f93a 	bl	8001752 <_fstat>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_fstat_r+0x1c>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_fstat_r+0x1c>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	24000470 	.word	0x24000470

080094f0 <_isatty_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	@ (800950c <_isatty_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f8 f939 	bl	8001772 <_isatty>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_isatty_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_isatty_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	24000470 	.word	0x24000470

08009510 <abort>:
 8009510:	b508      	push	{r3, lr}
 8009512:	2006      	movs	r0, #6
 8009514:	f000 f82c 	bl	8009570 <raise>
 8009518:	2001      	movs	r0, #1
 800951a:	f7f8 f8ca 	bl	80016b2 <_exit>

0800951e <_raise_r>:
 800951e:	291f      	cmp	r1, #31
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4605      	mov	r5, r0
 8009524:	460c      	mov	r4, r1
 8009526:	d904      	bls.n	8009532 <_raise_r+0x14>
 8009528:	2316      	movs	r3, #22
 800952a:	6003      	str	r3, [r0, #0]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	bd38      	pop	{r3, r4, r5, pc}
 8009532:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009534:	b112      	cbz	r2, 800953c <_raise_r+0x1e>
 8009536:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800953a:	b94b      	cbnz	r3, 8009550 <_raise_r+0x32>
 800953c:	4628      	mov	r0, r5
 800953e:	f000 f831 	bl	80095a4 <_getpid_r>
 8009542:	4622      	mov	r2, r4
 8009544:	4601      	mov	r1, r0
 8009546:	4628      	mov	r0, r5
 8009548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800954c:	f000 b818 	b.w	8009580 <_kill_r>
 8009550:	2b01      	cmp	r3, #1
 8009552:	d00a      	beq.n	800956a <_raise_r+0x4c>
 8009554:	1c59      	adds	r1, r3, #1
 8009556:	d103      	bne.n	8009560 <_raise_r+0x42>
 8009558:	2316      	movs	r3, #22
 800955a:	6003      	str	r3, [r0, #0]
 800955c:	2001      	movs	r0, #1
 800955e:	e7e7      	b.n	8009530 <_raise_r+0x12>
 8009560:	2100      	movs	r1, #0
 8009562:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009566:	4620      	mov	r0, r4
 8009568:	4798      	blx	r3
 800956a:	2000      	movs	r0, #0
 800956c:	e7e0      	b.n	8009530 <_raise_r+0x12>
	...

08009570 <raise>:
 8009570:	4b02      	ldr	r3, [pc, #8]	@ (800957c <raise+0xc>)
 8009572:	4601      	mov	r1, r0
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	f7ff bfd2 	b.w	800951e <_raise_r>
 800957a:	bf00      	nop
 800957c:	2400001c 	.word	0x2400001c

08009580 <_kill_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d07      	ldr	r5, [pc, #28]	@ (80095a0 <_kill_r+0x20>)
 8009584:	2300      	movs	r3, #0
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	f7f8 f880 	bl	8001692 <_kill>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	d102      	bne.n	800959c <_kill_r+0x1c>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	b103      	cbz	r3, 800959c <_kill_r+0x1c>
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	bd38      	pop	{r3, r4, r5, pc}
 800959e:	bf00      	nop
 80095a0:	24000470 	.word	0x24000470

080095a4 <_getpid_r>:
 80095a4:	f7f8 b86d 	b.w	8001682 <_getpid>

080095a8 <atan2>:
 80095a8:	f000 b826 	b.w	80095f8 <__ieee754_atan2>
 80095ac:	0000      	movs	r0, r0
	...

080095b0 <sqrt>:
 80095b0:	b508      	push	{r3, lr}
 80095b2:	ed2d 8b04 	vpush	{d8-d9}
 80095b6:	eeb0 8b40 	vmov.f64	d8, d0
 80095ba:	f000 f819 	bl	80095f0 <__ieee754_sqrt>
 80095be:	eeb4 8b48 	vcmp.f64	d8, d8
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	d60c      	bvs.n	80095e2 <sqrt+0x32>
 80095c8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 80095e8 <sqrt+0x38>
 80095cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	d505      	bpl.n	80095e2 <sqrt+0x32>
 80095d6:	f7fe f985 	bl	80078e4 <__errno>
 80095da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80095de:	2321      	movs	r3, #33	@ 0x21
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	ecbd 8b04 	vpop	{d8-d9}
 80095e6:	bd08      	pop	{r3, pc}
	...

080095f0 <__ieee754_sqrt>:
 80095f0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80095f4:	4770      	bx	lr
	...

080095f8 <__ieee754_atan2>:
 80095f8:	ee11 1a10 	vmov	r1, s2
 80095fc:	eeb0 7b40 	vmov.f64	d7, d0
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	ee11 5a90 	vmov	r5, s3
 8009606:	424b      	negs	r3, r1
 8009608:	4f59      	ldr	r7, [pc, #356]	@ (8009770 <__ieee754_atan2+0x178>)
 800960a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800960e:	430b      	orrs	r3, r1
 8009610:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009614:	42bb      	cmp	r3, r7
 8009616:	d80d      	bhi.n	8009634 <__ieee754_atan2+0x3c>
 8009618:	ee10 ca10 	vmov	ip, s0
 800961c:	ee17 6a90 	vmov	r6, s15
 8009620:	f1cc 0000 	rsb	r0, ip, #0
 8009624:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009628:	ea40 000c 	orr.w	r0, r0, ip
 800962c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8009630:	42b8      	cmp	r0, r7
 8009632:	d904      	bls.n	800963e <__ieee754_atan2+0x46>
 8009634:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009638:	eeb0 0b47 	vmov.f64	d0, d7
 800963c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800963e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 8009642:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009646:	4308      	orrs	r0, r1
 8009648:	d103      	bne.n	8009652 <__ieee754_atan2+0x5a>
 800964a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800964e:	f000 b897 	b.w	8009780 <atan>
 8009652:	17ac      	asrs	r4, r5, #30
 8009654:	f004 0402 	and.w	r4, r4, #2
 8009658:	ea53 0c0c 	orrs.w	ip, r3, ip
 800965c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009660:	d107      	bne.n	8009672 <__ieee754_atan2+0x7a>
 8009662:	2c02      	cmp	r4, #2
 8009664:	d05c      	beq.n	8009720 <__ieee754_atan2+0x128>
 8009666:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8009738 <__ieee754_atan2+0x140>
 800966a:	2c03      	cmp	r4, #3
 800966c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009670:	e7e2      	b.n	8009638 <__ieee754_atan2+0x40>
 8009672:	4311      	orrs	r1, r2
 8009674:	d107      	bne.n	8009686 <__ieee754_atan2+0x8e>
 8009676:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 8009740 <__ieee754_atan2+0x148>
 800967a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8009748 <__ieee754_atan2+0x150>
 800967e:	2e00      	cmp	r6, #0
 8009680:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009684:	e7d8      	b.n	8009638 <__ieee754_atan2+0x40>
 8009686:	42ba      	cmp	r2, r7
 8009688:	d10f      	bne.n	80096aa <__ieee754_atan2+0xb2>
 800968a:	4293      	cmp	r3, r2
 800968c:	f104 34ff 	add.w	r4, r4, #4294967295
 8009690:	d107      	bne.n	80096a2 <__ieee754_atan2+0xaa>
 8009692:	2c02      	cmp	r4, #2
 8009694:	d847      	bhi.n	8009726 <__ieee754_atan2+0x12e>
 8009696:	4b37      	ldr	r3, [pc, #220]	@ (8009774 <__ieee754_atan2+0x17c>)
 8009698:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800969c:	ed93 7b00 	vldr	d7, [r3]
 80096a0:	e7ca      	b.n	8009638 <__ieee754_atan2+0x40>
 80096a2:	2c02      	cmp	r4, #2
 80096a4:	d842      	bhi.n	800972c <__ieee754_atan2+0x134>
 80096a6:	4b34      	ldr	r3, [pc, #208]	@ (8009778 <__ieee754_atan2+0x180>)
 80096a8:	e7f6      	b.n	8009698 <__ieee754_atan2+0xa0>
 80096aa:	42bb      	cmp	r3, r7
 80096ac:	d0e3      	beq.n	8009676 <__ieee754_atan2+0x7e>
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80096b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096b8:	da1a      	bge.n	80096f0 <__ieee754_atan2+0xf8>
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	da01      	bge.n	80096c2 <__ieee754_atan2+0xca>
 80096be:	323c      	adds	r2, #60	@ 0x3c
 80096c0:	db19      	blt.n	80096f6 <__ieee754_atan2+0xfe>
 80096c2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80096c6:	f000 f955 	bl	8009974 <fabs>
 80096ca:	f000 f859 	bl	8009780 <atan>
 80096ce:	eeb0 7b40 	vmov.f64	d7, d0
 80096d2:	2c01      	cmp	r4, #1
 80096d4:	d012      	beq.n	80096fc <__ieee754_atan2+0x104>
 80096d6:	2c02      	cmp	r4, #2
 80096d8:	d019      	beq.n	800970e <__ieee754_atan2+0x116>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d0ac      	beq.n	8009638 <__ieee754_atan2+0x40>
 80096de:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009750 <__ieee754_atan2+0x158>
 80096e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096e6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009758 <__ieee754_atan2+0x160>
 80096ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096ee:	e7a3      	b.n	8009638 <__ieee754_atan2+0x40>
 80096f0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8009740 <__ieee754_atan2+0x148>
 80096f4:	e7ed      	b.n	80096d2 <__ieee754_atan2+0xda>
 80096f6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009760 <__ieee754_atan2+0x168>
 80096fa:	e7ea      	b.n	80096d2 <__ieee754_atan2+0xda>
 80096fc:	ee17 1a90 	vmov	r1, s15
 8009700:	ec53 2b17 	vmov	r2, r3, d7
 8009704:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009708:	ec43 2b17 	vmov	d7, r2, r3
 800970c:	e794      	b.n	8009638 <__ieee754_atan2+0x40>
 800970e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009750 <__ieee754_atan2+0x158>
 8009712:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009716:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009758 <__ieee754_atan2+0x160>
 800971a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800971e:	e78b      	b.n	8009638 <__ieee754_atan2+0x40>
 8009720:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009758 <__ieee754_atan2+0x160>
 8009724:	e788      	b.n	8009638 <__ieee754_atan2+0x40>
 8009726:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009768 <__ieee754_atan2+0x170>
 800972a:	e785      	b.n	8009638 <__ieee754_atan2+0x40>
 800972c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009760 <__ieee754_atan2+0x168>
 8009730:	e782      	b.n	8009638 <__ieee754_atan2+0x40>
 8009732:	bf00      	nop
 8009734:	f3af 8000 	nop.w
 8009738:	54442d18 	.word	0x54442d18
 800973c:	c00921fb 	.word	0xc00921fb
 8009740:	54442d18 	.word	0x54442d18
 8009744:	3ff921fb 	.word	0x3ff921fb
 8009748:	54442d18 	.word	0x54442d18
 800974c:	bff921fb 	.word	0xbff921fb
 8009750:	33145c07 	.word	0x33145c07
 8009754:	3ca1a626 	.word	0x3ca1a626
 8009758:	54442d18 	.word	0x54442d18
 800975c:	400921fb 	.word	0x400921fb
	...
 8009768:	54442d18 	.word	0x54442d18
 800976c:	3fe921fb 	.word	0x3fe921fb
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	08009e58 	.word	0x08009e58
 8009778:	08009e40 	.word	0x08009e40
 800977c:	00000000 	.word	0x00000000

08009780 <atan>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	eeb0 7b40 	vmov.f64	d7, d0
 8009786:	ee17 5a90 	vmov	r5, s15
 800978a:	4b73      	ldr	r3, [pc, #460]	@ (8009958 <atan+0x1d8>)
 800978c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009790:	429c      	cmp	r4, r3
 8009792:	d913      	bls.n	80097bc <atan+0x3c>
 8009794:	4b71      	ldr	r3, [pc, #452]	@ (800995c <atan+0x1dc>)
 8009796:	429c      	cmp	r4, r3
 8009798:	d803      	bhi.n	80097a2 <atan+0x22>
 800979a:	d107      	bne.n	80097ac <atan+0x2c>
 800979c:	ee10 3a10 	vmov	r3, s0
 80097a0:	b123      	cbz	r3, 80097ac <atan+0x2c>
 80097a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80097a6:	eeb0 0b47 	vmov.f64	d0, d7
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 80098e8 <atan+0x168>
 80097b0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 80098f0 <atan+0x170>
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80097ba:	e7f4      	b.n	80097a6 <atan+0x26>
 80097bc:	4b68      	ldr	r3, [pc, #416]	@ (8009960 <atan+0x1e0>)
 80097be:	429c      	cmp	r4, r3
 80097c0:	d811      	bhi.n	80097e6 <atan+0x66>
 80097c2:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d80a      	bhi.n	80097e0 <atan+0x60>
 80097ca:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80097ce:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 80098f8 <atan+0x178>
 80097d2:	ee30 6b06 	vadd.f64	d6, d0, d6
 80097d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80097da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097de:	dce2      	bgt.n	80097a6 <atan+0x26>
 80097e0:	f04f 33ff 	mov.w	r3, #4294967295
 80097e4:	e013      	b.n	800980e <atan+0x8e>
 80097e6:	f000 f8c5 	bl	8009974 <fabs>
 80097ea:	4b5e      	ldr	r3, [pc, #376]	@ (8009964 <atan+0x1e4>)
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d84f      	bhi.n	8009890 <atan+0x110>
 80097f0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80097f4:	429c      	cmp	r4, r3
 80097f6:	d841      	bhi.n	800987c <atan+0xfc>
 80097f8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80097fc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8009800:	2300      	movs	r3, #0
 8009802:	eea0 5b07 	vfma.f64	d5, d0, d7
 8009806:	ee30 0b07 	vadd.f64	d0, d0, d7
 800980a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800980e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8009900 <atan+0x180>
 8009812:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009816:	ee24 5b04 	vmul.f64	d5, d4, d4
 800981a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8009908 <atan+0x188>
 800981e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8009822:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8009910 <atan+0x190>
 8009826:	eea3 6b05 	vfma.f64	d6, d3, d5
 800982a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8009918 <atan+0x198>
 800982e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009832:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8009920 <atan+0x1a0>
 8009836:	eea3 6b05 	vfma.f64	d6, d3, d5
 800983a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8009928 <atan+0x1a8>
 800983e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 8009930 <atan+0x1b0>
 8009842:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009846:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8009938 <atan+0x1b8>
 800984a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800984e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8009940 <atan+0x1c0>
 8009852:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009856:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 8009948 <atan+0x1c8>
 800985a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800985e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8009950 <atan+0x1d0>
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009868:	ee26 6b05 	vmul.f64	d6, d6, d5
 800986c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8009870:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009874:	d121      	bne.n	80098ba <atan+0x13a>
 8009876:	ee37 7b46 	vsub.f64	d7, d7, d6
 800987a:	e794      	b.n	80097a6 <atan+0x26>
 800987c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8009880:	2301      	movs	r3, #1
 8009882:	ee30 5b47 	vsub.f64	d5, d0, d7
 8009886:	ee30 0b07 	vadd.f64	d0, d0, d7
 800988a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800988e:	e7be      	b.n	800980e <atan+0x8e>
 8009890:	4b35      	ldr	r3, [pc, #212]	@ (8009968 <atan+0x1e8>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d20b      	bcs.n	80098ae <atan+0x12e>
 8009896:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800989a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800989e:	ee30 5b47 	vsub.f64	d5, d0, d7
 80098a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80098a6:	2302      	movs	r3, #2
 80098a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80098ac:	e7af      	b.n	800980e <atan+0x8e>
 80098ae:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80098b2:	2303      	movs	r3, #3
 80098b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80098b8:	e7a9      	b.n	800980e <atan+0x8e>
 80098ba:	4a2c      	ldr	r2, [pc, #176]	@ (800996c <atan+0x1ec>)
 80098bc:	492c      	ldr	r1, [pc, #176]	@ (8009970 <atan+0x1f0>)
 80098be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80098c2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80098c6:	ed93 5b00 	vldr	d5, [r3]
 80098ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80098ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80098d2:	ed92 7b00 	vldr	d7, [r2]
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098dc:	bfb8      	it	lt
 80098de:	eeb1 7b47 	vneglt.f64	d7, d7
 80098e2:	e760      	b.n	80097a6 <atan+0x26>
 80098e4:	f3af 8000 	nop.w
 80098e8:	54442d18 	.word	0x54442d18
 80098ec:	bff921fb 	.word	0xbff921fb
 80098f0:	54442d18 	.word	0x54442d18
 80098f4:	3ff921fb 	.word	0x3ff921fb
 80098f8:	8800759c 	.word	0x8800759c
 80098fc:	7e37e43c 	.word	0x7e37e43c
 8009900:	e322da11 	.word	0xe322da11
 8009904:	3f90ad3a 	.word	0x3f90ad3a
 8009908:	24760deb 	.word	0x24760deb
 800990c:	3fa97b4b 	.word	0x3fa97b4b
 8009910:	a0d03d51 	.word	0xa0d03d51
 8009914:	3fb10d66 	.word	0x3fb10d66
 8009918:	c54c206e 	.word	0xc54c206e
 800991c:	3fb745cd 	.word	0x3fb745cd
 8009920:	920083ff 	.word	0x920083ff
 8009924:	3fc24924 	.word	0x3fc24924
 8009928:	5555550d 	.word	0x5555550d
 800992c:	3fd55555 	.word	0x3fd55555
 8009930:	52defd9a 	.word	0x52defd9a
 8009934:	bfadde2d 	.word	0xbfadde2d
 8009938:	2c6a6c2f 	.word	0x2c6a6c2f
 800993c:	bfa2b444 	.word	0xbfa2b444
 8009940:	af749a6d 	.word	0xaf749a6d
 8009944:	bfb3b0f2 	.word	0xbfb3b0f2
 8009948:	fe231671 	.word	0xfe231671
 800994c:	bfbc71c6 	.word	0xbfbc71c6
 8009950:	9998ebc4 	.word	0x9998ebc4
 8009954:	bfc99999 	.word	0xbfc99999
 8009958:	440fffff 	.word	0x440fffff
 800995c:	7ff00000 	.word	0x7ff00000
 8009960:	3fdbffff 	.word	0x3fdbffff
 8009964:	3ff2ffff 	.word	0x3ff2ffff
 8009968:	40038000 	.word	0x40038000
 800996c:	08009e90 	.word	0x08009e90
 8009970:	08009e70 	.word	0x08009e70

08009974 <fabs>:
 8009974:	ec51 0b10 	vmov	r0, r1, d0
 8009978:	4602      	mov	r2, r0
 800997a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800997e:	ec43 2b10 	vmov	d0, r2, r3
 8009982:	4770      	bx	lr

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
